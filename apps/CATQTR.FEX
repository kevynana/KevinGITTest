-* File CATQTR.FEX
-*
-*****   This routine reads the Report Instance DB, looking for the current
-*****     execution instance, checks the C/P Flag to determine if the
-*****     Rollup databases need concatenation - then generates the
-*****     appropriate INCLUDE file for the Report Stream AIRUSE, CARUSE, and
-*****     HTLUSE
-*****   AUTHOR:  Dave Kuzanek
-*****   PRODUCTION DATE:
-*
-*  9/15/00  IBISTL-RJ  ADDED '.FOC' TO THE USE STATEMENTS THAT ARE
-*                      GENERATED AND REMOVED THE SHOW FORM1 CASE.
-* 10/15/00  IBISTL-RJ  ADDED FILE DBCONCAT.  THIS FILE WILL CONTAIN
-*                      THE INST_KEY AND DATE RANGE NEEDED.
-* 06/17/02  STEVE      Added T_XXXX database AS TKT_MAIN
-* 10/23/03  LCI-LS     Applied SU Database changes
-* 06/30/04  LS         Corrected incorrect database allocations
-*
-*06/17/2015 LSI S-05704 Changes for Adhoc in ER5 to make it run in the current Review
-*                       as BRPTINST does not have segment settings AND 
-*                       field ROLLUP_CODE anymore.

-INCLUDE SETECHO

MAINTAIN FILES BRPTINST AND BROLLUP AND ROLLQTR AND DBCONCAT 
CASE TOP
COMPUTE Cnt1/I1 = ;
COMPUTE Hold_Line/A72 = ;
COMPUTE Roll/A6 = ;
COMPUTE DBName/A8 = ; 
COMPUTE DPos/I1 = ;
COMPUTE To_Flag/A1 = ;
COMPUTE Temp_Yr/I4 = ;
COMPUTE PQ_Yr/I4 = ;
COMPUTE Temp_Date/A10 = ;
COMPUTE Temp_Date8/A8 = ;
COMPUTE Temp_DtYMD/YYMD = ;

COMPUTE Q_Temp.QFMDT/YYMD = ;
COMPUTE Q_Temp.QTODT/YYMD = ;
COMPUTE Q_Temp.QTR/A1 = ;
COMPUTE SCR.TSFrom/YYMD = ;
COMPUTE SCR.TSTo/YYMD = ;

COMPUTE SqX/A2 = HEXBYT(39, SqX) || HEXBYT(39, SqX);
COMPUTE DqX/A2 = HEXBYT(34, DqX);
COMPUTE SpX/A1 = HEXBYT(64, SpX);
COMPUTE AmpX/A1 = HEXBYT(38, AmpX);

-*COMPUTE AIR_PATH/A25 = 'd:\\' || 'TNT\\' | 'TTRACKER\\' | 'DATA\\';
-*COMPUTE CAR_PATH/A25 = 'd:\\' || 'TNT\\' | 'TTRACKER\\' | 'DATA\\';
-*COMPUTE HTL_PATH/A25 = 'd:\\' || 'TNT\\' | 'TTRACKER\\' | 'DATA\\';

COMPUTE AIR_PATH/A40 = '&&MNTDATASRV' | '\\TNT\\' | 'TTRACKER\\' | 'DATA\\';
COMPUTE CAR_PATH/A40 = '&&MNTDATASRV' | '\\TNT\\' | 'TTRACKER\\' | 'DATA\\';
COMPUTE HTL_PATH/A40 = '&&MNTDATASRV' | '\\TNT\\' | 'TTRACKER\\' | 'DATA\\';
COMPUTE LIM_PATH/A40 = '&&MNTDATASRV' | '\\TNT\\' | 'TTRACKER\\' | 'DATA\\';

INFER DBCONCAT.USER_ID INTO Cntl
INFER BROLLUP.ROLLUP_CODE INTO Roll_Stack
-*INFER BRPTINST.INST_KEY SETTINGS.ID INTO RI_Stack
INFER BRPTINST.INST_KEY RPT_TITLE1 INTO RI_Stack
INFER ROLLQTR.ROLLUP_CODE INTO Qtr_Stack

STACK CLEAR Cntl
REPOSITION DBCONCAT.USER_ID
NEXT DBCONCAT.USER_ID INTO Cntl

STACK CLEAR RI_Stack
REPOSITION BRPTINST.INST_KEY RPT_TITLE1
-*NEXT BRPTINST.INST_KEY SETTINGS.ID INTO RI_Stack
NEXT BRPTINST.INST_KEY RPT_TITLE1 INTO RI_Stack
    WHERE BRPTINST.INST_KEY EQ Cntl(1).IN_KEY

STACK CLEAR Roll_Stack
REPOSITION BROLLUP.ROLLUP_CODE
NEXT BROLLUP.ROLLUP_CODE INTO Roll_Stack 
-*WHERE BROLLUP.ROLLUP_CODE EQ RI_Stack(1).ROLLUP_CODE
COMPUTE Roll = Roll_Stack(1).COMP;
-*IF RI_Stack(1).RPT_TYPE EQ 'STS' THEN PERFORM Load_TS
-*IF RI_Stack(1).RPT_TYPE EQ 'ETS' THEN PERFORM Load_ES
-*IF RI_Stack(1).RPT_TYPE EQ 'SPD' THEN PERFORM Load_SPD
IF RI_Stack(1).RPT_TYPE EQ 'OTH'
 BEGIN
  PERFORM Load_TS
 ENDBEGIN
ELSE IF RI_Stack(1).RPT_GROUP EQ 'OTH'
       BEGIN 
        PERFORM Load_TS
       ENDBEGIN
  ELSE IF RI_Stack(1).RPT_GROUP EQ 'EXC' 
         BEGIN
          PERFORM Load_ES
         ENDBEGIN
    ELSE IF RI_Stack(1).RPT_GROUP EQ 'ADD' 
           BEGIN
            PERFORM Load_SPD
           ENDBEGIN
      ELSE IF RI_Stack(1).RPT_GROUP EQ 'CDD' 
             BEGIN
              PERFORM Load_SPD
             ENDBEGIN
        ELSE IF RI_Stack(1).RPT_GROUP EQ 'HDD' 
               BEGIN
                PERFORM Load_SPD
               ENDBEGIN
          ELSE IF RI_Stack(1).RPT_GROUP EQ 'QTR' 
                 BEGIN
                  PERFORM Load_SPD
                 ENDBEGIN 
IF Roll_Stack(1).QTR_ENABLE EQ 'X' THEN
BEGIN
  STACK CLEAR Qtr_Stack
  REPOSITION ROLLQTR.ROLLUP_CODE
  NEXT ROLLQTR.ROLLUP_CODE INTO Qtr_Stack WHERE
    ROLLQTR.ROLLUP_CODE EQ Roll_Stack(1).ROLLUP_CODE
  -*  ROLLQTR.ROLLUP_CODE EQ RI_Stack(1).ROLLUP_CODE
    
  PERFORM Multiple_DB
  PERFORM Write_Mult
ENDBEGIN
ELSE BEGIN
  PERFORM Single_DB
ENDBEGIN

-*ALLOCATE UDID files
COMPUTE Hold_Line = AIR_PATH || 'UA' || ROLL ||
'.FOC' || ' AS ' | 'AIRUDID';
TYPE ON AUSEINCL "<Hold_Line"

COMPUTE Hold_Line = AIR_PATH || 'UF' || ROLL ||
'.FOC' || ' AS ' | 'UDFILE';
TYPE ON AUSEINCL "<Hold_Line"

COMPUTE Hold_Line = CAR_PATH || 'UC' || ROLL ||
'.FOC' || ' AS ' | 'CARUDID';
TYPE ON CUSEINCL "<Hold_Line"
COMPUTE Hold_Line = AIR_PATH || 'UF' || ROLL ||
'.FOC' || ' AS ' | 'UDFILE';
TYPE ON CUSEINCL "<Hold_Line"

COMPUTE Hold_Line = HTL_PATH || 'UH' || ROLL ||
'.FOC' || ' AS ' | 'HTLUDID';
TYPE ON HUSEINCL "<Hold_Line"
COMPUTE Hold_Line = AIR_PATH || 'UF' || ROLL ||
'.FOC' || ' AS ' | 'UDFILE';
TYPE ON HUSEINCL "<Hold_Line"

COMPUTE Hold_Line = LIM_PATH || 'UL' || ROLL ||
'.FOC' || ' AS ' | 'LIMUDID';
TYPE ON LUSEINCL "<Hold_Line"
COMPUTE Hold_Line = AIR_PATH || 'UF' || ROLL ||
'.FOC' || ' AS ' | 'UDFILE';
TYPE ON LUSEINCL "<Hold_Line"

ENDCASE

CASE Single_DB
-* Air
  COMPUTE DBName = RI_Stack(1).PAIR_DB || '_' || Roll;
  COMPUTE Hold_Line = AIR_PATH || DBName ||
    '.FOC' || ' AS ' | AmpX || AmpX || 'EXTRACT';
  TYPE ON AUSEINCL "<Hold_Line"
  COMPUTE DBName = 'A_' || Roll;
  COMPUTE Hold_Line = AIR_PATH || DBName ||
   '.FOC' || ' AS ' | 'AIR_MAIN';
  TYPE ON AUSEINCL "<Hold_Line"
  COMPUTE DBName = 'T_' || Roll;
  COMPUTE Hold_Line = AIR_PATH || DBName ||
   '.FOC' || ' AS ' | 'TKT_MAIN';
  TYPE ON AUSEINCL "<Hold_Line"
    
-* Car
  COMPUTE DBName = 'C_' || Roll;
  COMPUTE Hold_Line = CAR_PATH || DBName ||
    '.FOC' || ' AS ' | AmpX || AmpX || 'EXTRACT';
  TYPE ON CUSEINCL "<Hold_Line"
   
-* Hotel
  COMPUTE DBName = 'H_' || Roll;
  COMPUTE Hold_Line = HTL_PATH || DBName ||
    '.FOC' || ' AS ' | AmpX || AmpX || 'EXTRACT';
  TYPE ON HUSEINCL "<Hold_Line"

-* Limo
  COMPUTE DBName = 'L_' || Roll;
  COMPUTE Hold_Line = LIM_PATH || DBName ||
    '.FOC' || ' AS ' | AmpX || AmpX || 'EXTRACT';
  TYPE ON LUSEINCL "<Hold_Line"
    
  
endcase

CASE Multiple_DB
  STACK CLEAR Q_Temp
  COMPUTE Cnt1 = 1;
  IF Qtr_Stack(1).Q1FMDT GT ' ' THEN  BEGIN
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q1FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q1TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '1';
  ENDBEGIN
  IF Qtr_Stack(1).Q2FMDT GT ' ' THEN  BEGIN
    COMPUTE Cnt1 = Cnt1 + 1;
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q2FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q2TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '2';
  ENDBEGIN
  IF Qtr_Stack(1).Q3FMDT GT ' ' THEN  BEGIN
    COMPUTE Cnt1 = Cnt1 + 1;
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q3FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q3TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '3';
  ENDBEGIN
  IF Qtr_Stack(1).Q4FMDT GT ' ' THEN  BEGIN
    COMPUTE Cnt1 = Cnt1 + 1;
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q4FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q4TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '4';
  ENDBEGIN
  IF Qtr_Stack(1).Q5FMDT GT ' ' THEN  BEGIN
    COMPUTE Cnt1 = Cnt1 + 1;
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q5FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q5TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '5';
  ENDBEGIN
  IF Qtr_Stack(1).Q6FMDT GT ' ' THEN  BEGIN
    COMPUTE Cnt1 = Cnt1 + 1;
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q6FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q6TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '6';
  ENDBEGIN
  IF Qtr_Stack(1).Q7FMDT GT ' ' THEN  BEGIN
    COMPUTE Cnt1 = Cnt1 + 1;
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q7FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q7TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '7';
  ENDBEGIN
  IF Qtr_Stack(1).Q8FMDT GT ' ' THEN  BEGIN
    COMPUTE Cnt1 = Cnt1 + 1;
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q8FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q8TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '8';
  ENDBEGIN
  IF Qtr_Stack(1).Q9FMDT GT ' ' THEN  BEGIN
    COMPUTE Cnt1 = Cnt1 + 1;
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q9FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q9TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '9';
  ENDBEGIN
  IF Qtr_Stack(1).Q0FMDT GT ' ' THEN  BEGIN
    COMPUTE Cnt1 = Cnt1 + 1;
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q0FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q0TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '0';
  ENDBEGIN
  IF Qtr_Stack(1).QZFMDT GT ' ' THEN  BEGIN
    COMPUTE Cnt1 = Cnt1 + 1;
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).QZFMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).QZTODT;
    COMPUTE Q_Temp(Cnt1).QTR = 'Z';
  ENDBEGIN
  IF Qtr_Stack(1).QYFMDT GT ' ' THEN  BEGIN
    COMPUTE Cnt1 = Cnt1 + 1;
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).QYFMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).QYTODT;
    COMPUTE Q_Temp(Cnt1).QTR = 'Y';
  ENDBEGIN
-*
STACK SORT Q_Temp BY QFMDT
endcase

CASE Write_Mult

IF RI_STACK(1).DATETYPE EQ 'T' THEN BEGIN
  PERFORM WriteAll;
  GOTO ENDCASE;
EndBegin

COMPUTE j/2 = 1;
 
-*IF RI_Stack(1).RPT_TYPE EQ 'ETS' OR RI_Stack(1).RPT_TYPE EQ 'SPD' THEN BEGIN




IF RI_Stack(1).RPT_GROUP EQ 'EXC' OR RI_Stack(1).RPT_GROUP EQ 'ADD'
 OR RI_Stack(1).RPT_GROUP EQ 'CDD' OR RI_Stack(1).RPT_GROUP EQ 'HDD'
 OR (RI_Stack(1).RPT_GROUP EQ 'QTR' AND RI_Stack(1).RPT_TYPE NE 'OTH') THEN 
BEGIN
 REPEAT WHILE j LE Q_Temp.FocCount 
  IF (SCR(1).TSFROM GE Q_TEMP(j).QFMDT AND SCR(1).TSFROM LE Q_TEMP(j).QTODT) OR
     (SCR(1).TSTO   GE Q_TEMP(j).QFMDT AND SCR(1).TSTO   LE Q_TEMP(j).QTODT) OR
     (SCR(2).TSFROM GE Q_TEMP(j).QFMDT AND SCR(2).TSFROM LE Q_TEMP(j).QTODT) OR
     (SCR(2).TSTO   GE Q_TEMP(j).QFMDT AND SCR(2).TSTO   LE Q_TEMP(j).QTODT) OR
     (Q_TEMP(j).QFMDT GE SCR(1).TSFROM AND Q_TEMP(j).QFMDT LE SCR(1).TSTO) OR
     (Q_TEMP(j).QTODT GE SCR(1).TSFROM AND Q_TEMP(j).QTODT LE SCR(1).TSTO) OR
     (Q_TEMP(j).QFMDT GE SCR(2).TSFROM AND Q_TEMP(j).QFMDT LE SCR(2).TSTO) OR
     (Q_TEMP(j).QTODT GE SCR(2).TSFROM AND Q_TEMP(j).QTODT LE SCR(2).TSTO) 
   THEN BEGIN
         Compute Cnt1 = j;
         PERFORM Post_Mult;
        ENDBEGIN
 ENDREPEAT j = j + 1;
ENDBEGIN

-*ELSE IF RI_Stack(1).RPT_TYPE EQ 'STS' THEN BEGIN
ELSE IF RI_Stack(1).RPT_GROUP EQ 'OTH' OR RI_Stack(1).RPT_TYPE EQ 'OTH' THEN BEGIN
REPEAT WHILE j LE  Q_Temp.FocCount 
IF (SCR(1).TSFROM GE Q_TEMP(j).QFMDT AND SCR(1).TSFROM LE Q_TEMP(j).QTODT) OR
   (SCR(1).TSTO   GE Q_TEMP(j).QFMDT AND SCR(1).TSTO   LE Q_TEMP(j).QTODT) OR
   (SCR(2).TSFROM GE Q_TEMP(j).QFMDT AND SCR(2).TSFROM LE Q_TEMP(j).QTODT) OR
   (SCR(2).TSTO   GE Q_TEMP(j).QFMDT AND SCR(2).TSTO   LE Q_TEMP(j).QTODT) OR
   (SCR(3).TSFROM GE Q_TEMP(j).QFMDT AND SCR(3).TSFROM LE Q_TEMP(j).QTODT) OR
   (SCR(3).TSTO   GE Q_TEMP(j).QFMDT AND SCR(3).TSTO   LE Q_TEMP(j).QTODT) OR
   (SCR(4).TSFROM GE Q_TEMP(j).QFMDT AND SCR(4).TSFROM LE Q_TEMP(j).QTODT) OR
   (SCR(4).TSTO   GE Q_TEMP(j).QFMDT AND SCR(4).TSTO   LE Q_TEMP(j).QTODT) OR
   (Q_TEMP(j).QFMDT GE SCR(1).TSFROM AND Q_TEMP(j).QFMDT LE SCR(1).TSTO) OR
   (Q_TEMP(j).QTODT GE SCR(1).TSFROM AND Q_TEMP(j).QTODT LE SCR(1).TSTO) OR
   (Q_TEMP(j).QFMDT GE SCR(2).TSFROM AND Q_TEMP(j).QFMDT LE SCR(2).TSTO) OR
   (Q_TEMP(j).QTODT GE SCR(2).TSFROM AND Q_TEMP(j).QTODT LE SCR(2).TSTO) OR
   (Q_TEMP(j).QFMDT GE SCR(3).TSFROM AND Q_TEMP(j).QFMDT LE SCR(3).TSTO) OR
   (Q_TEMP(j).QTODT GE SCR(3).TSFROM AND Q_TEMP(j).QTODT LE SCR(3).TSTO) OR
   (Q_TEMP(j).QFMDT GE SCR(4).TSFROM AND Q_TEMP(j).QFMDT LE SCR(4).TSTO) OR
   (Q_TEMP(j).QTODT GE SCR(4).TSFROM AND Q_TEMP(j).QTODT LE SCR(4).TSTO) 
   THEN BEGIN
      Compute Cnt1 = j;
      PERFORM Post_Mult;
   ENDBEGIN
ENDREPEAT j = j + 1;
ENDBEGIN

ELSE BEGIN
REPEAT WHILE j LE Q_Temp.FocCount 
IF (Cntl(1).FM_DATE GE Q_TEMP(j).QFMDT AND Cntl(1).FM_DATE LE Q_TEMP(j).QTODT)
OR (Cntl(1).TO_DATE GE Q_TEMP(j).QFMDT AND Cntl(1).TO_DATE LE Q_TEMP(j).QTODT)
OR (Q_TEMP(j).QFMDT GE Cntl(1).FM_DATE AND Q_TEMP(j).QFMDT LE Cntl(1).TO_DATE)
OR (Q_TEMP(j).QTODT GE Cntl(1).FM_DATE AND Q_TEMP(j).QTODT LE Cntl(1).TO_DATE)
  
   THEN BEGIN
      Compute Cnt1 = j;
      PERFORM Post_Mult;
   ENDBEGIN
ENDREPEAT j = j + 1;
ENDBEGIN

ENDCASE

Case WriteAll
    STACK CLEAR Q_Temp;
    COMPUTE Cnt1 = 1;
    REPEAT WHILE Cnt1 LE 10
      COMPUTE Q_Temp(Cnt1).QTR = EDIT(Cnt1-1);
    ENDREPEAT Cnt1 = Cnt1 + 1;
    COMPUTE Q_Temp(11).QTR = 'Z';
    COMPUTE Q_Temp(12).QTR = 'Y';
    
    COMPUTE Cnt1 = 1;
    REPEAT WHILE Cnt1 LE Q_Temp.FocCount 
       PERFORM Post_Mult;
    ENDREPEAT Cnt1 = Cnt1 + 1;
EndCase

CASE Load_TS
  STACK CLEAR SCR
  COMPUTE SCR(1).TSFrom = Cntl(1).CMFMDT;
  COMPUTE SCR(1).TSTo   = Cntl(1).CMTODT;
  COMPUTE SCR(2).TSFrom = Cntl(1).PMFMDT;
  COMPUTE SCR(2).TSTo   = Cntl(1).PMTODT;
  COMPUTE SCR(3).TSFrom = Cntl(1).CYFMDT;
  COMPUTE SCR(3).TSTo   = Cntl(1).CYTODT;
  COMPUTE SCR(4).TSFrom = Cntl(1).PYFMDT;
  COMPUTE SCR(4).TSTo   = Cntl(1).PYTODT;
  STACK SORT SCR BY TSFrom BY TSTo
ENDCASE

CASE Load_ES
  STACK CLEAR SCR
  COMPUTE SCR(1).TSFrom = Cntl(1).FM_DATE;
  COMPUTE SCR(1).TSTo   = Cntl(1).TO_DATE;
  COMPUTE SCR(2).TSFrom = Cntl(1).FXDATE;
  COMPUTE SCR(2).TSTo   = Cntl(1).TXDATE;
ENDCASE 

CASE Load_SPD
  STACK CLEAR SCR
  COMPUTE SCR(1).TSFrom = Cntl(1).FM_DATE;
  COMPUTE SCR(1).TSTo   = Cntl(1).TO_DATE;
  COMPUTE SCR(2).TSFrom = Cntl(1).FXDATE;
  COMPUTE SCR(2).TSTo = Cntl(1).TXDATE;
ENDCASE

CASE Post_Mult
-* Air
  COMPUTE DBName = RI_Stack(1).PAIR_DB || Q_Temp(Cnt1).QTR || Roll;
  COMPUTE Hold_Line = AIR_PATH || DBName ||
    '.FOC' || ' AS ' | AmpX || AmpX || 'EXTRACT';
  TYPE ON AUSEINCL "<Hold_Line"
  COMPUTE DBName = 'A' || Q_Temp(Cnt1).QTR || Roll;
  COMPUTE Hold_Line = AIR_PATH || DBName ||
   '.FOC' || ' AS ' | 'AIR_MAIN';
  TYPE ON AUSEINCL "<Hold_Line"
  COMPUTE DBName = 'T' || Q_Temp(Cnt1).QTR || Roll;
  COMPUTE Hold_Line = AIR_PATH || DBName ||
   '.FOC' || ' AS ' | 'TKT_MAIN';
  TYPE ON AUSEINCL "<Hold_Line"
-* Car
  COMPUTE DBName = 'C' || Q_Temp(Cnt1).QTR || Roll;
  COMPUTE Hold_Line = CAR_PATH || DBName ||
    '.FOC' || ' AS ' | AmpX || AmpX || 'EXTRACT';
  TYPE ON CUSEINCL "<Hold_Line"
-* Hotel
  COMPUTE DBName = 'H' || Q_Temp(Cnt1).QTR || Roll;
  COMPUTE Hold_Line = HTL_PATH || DBName ||
    '.FOC' || ' AS ' | AmpX || AmpX || 'EXTRACT';
  TYPE ON HUSEINCL "<Hold_Line"
-* Limo
  COMPUTE DBName = 'L' || Q_Temp(Cnt1).QTR || Roll;
  COMPUTE Hold_Line = LIM_PATH || DBName ||
    '.FOC' || ' AS ' | AmpX || AmpX || 'EXTRACT';
  TYPE ON LUSEINCL "<Hold_Line"  
ENDCASE
END
-RUN