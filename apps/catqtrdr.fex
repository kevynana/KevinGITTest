-* File CATQTRDR.FEX
-*
-*****   This routine reads the Report Instance DB, looking for the current
-*****     execution instance, checks the C/P Flag to determine if the
-*****     Rollup databases need concatenation - then generates the
-*****     appropriate INCLUDE file for the Report Stream AIRUSE, CARUSE, and
-*****     HTLUSE
-*****   AUTHOR:  Dave Kuzanek
-*****   PRODUCTION DATE:
-*
-*  9/15/00  IBISTL-RJ  ADDED '.FOC' TO THE USE STATEMENTS THAT ARE
-*                      GENERATED AND REMOVED THE SHOW FORM1 CASE.  
-* 06/17/02  STEVE      Added T_XXXX database AS TKT_MAIN 


MAINTAIN FILES RPT_INST AND ROLLUP AND ROLLQTR AND DBCONCAT

COMPUTE Cnt1/I1 = ;
COMPUTE OutLineF/A72 =;
COMPUTE Hold_Line/A72 = ;
COMPUTE Roll/A6 = ;
COMPUTE DBName/A8 = ;
COMPUTE DPos/I1 = ;
COMPUTE To_Flag/A1 = ;
COMPUTE Temp_Yr/I4 = ;
COMPUTE PQ_Yr/I4 = ;
COMPUTE Temp_Date/A10 = ;
COMPUTE Temp_Date8/A8 = ;
COMPUTE Temp_DtYMD/YYMD = ;

COMPUTE Q_Temp.QFMDT/YYMD = ;
COMPUTE Q_Temp.QTODT/YYMD = ;
COMPUTE Q_Temp.QTR/A1 = ;
COMPUTE TS_Stack.TSFrom/YYMD = ;
COMPUTE TS_Stack.TSTo/YYMD = ;

COMPUTE SqX/A2 = HEXBYT(39, SqX) || HEXBYT(39, SqX);
COMPUTE DqX/A2 = HEXBYT(34, DqX);
COMPUTE SpX/A1 = HEXBYT(64, SpX);
COMPUTE AmpX/A1 = HEXBYT(38, AmpX);

INFER DBCONCAT.USER_ID INTO Cntl_Stack
INFER ROLLUP.ROLLUP_CODE INTO Roll_Stack
INFER RPT_INST.INST_KEY I_CODE.PRT_LN1 INTO RI_Stack
INFER ROLLQTR.ROLLUP_CODE INTO Qtr_Stack

STACK CLEAR Cntl_Stack
REPOSITION DBCONCAT.USER_ID
NEXT DBCONCAT.USER_ID INTO Cntl_Stack
 
STACK CLEAR RI_Stack
REPOSITION RPT_INST.INST_KEY I_CODE.PRT_LN1
NEXT RPT_INST.INST_KEY I_CODE.PRT_LN1 INTO RI_Stack
    WHERE RPT_INST.INST_KEY EQ CNTL_Stack(1).IKEY

STACK CLEAR Roll_Stack
REPOSITION ROLLUP.ROLLUP_CODE
NEXT ROLLUP.ROLLUP_CODE INTO Roll_Stack WHERE
  ROLLUP.ROLLUP_CODE EQ RI_Stack(1).ROLLUP_CODE
COMPUTE Roll = Roll_Stack(1).COMP;
IF RI_Stack(1).RPT_TYPE EQ 'STS' THEN PERFORM Load_TS
IF Roll_Stack(1).QTR_ENABLE EQ 'X' THEN
BEGIN
  STACK CLEAR Qtr_Stack
  REPOSITION ROLLQTR.ROLLUP_CODE
  NEXT ROLLQTR.ROLLUP_CODE INTO Qtr_Stack WHERE
    ROLLQTR.ROLLUP_CODE EQ RI_Stack(1).ROLLUP_CODE
  PERFORM Multiple_DB
  PERFORM Write_Mult
ENDBEGIN
ELSE BEGIN
  PERFORM Single_DB
ENDBEGIN
GOTO END

CASE Single_DB
-* Air
  COMPUTE DBName = RI_Stack(1).PAIR_DB || '_' || Roll;
  COMPUTE Hold_Line = Roll_Stack(1).AIR_PATH || DBName ||
    '.FOC' || ' AS ' | AmpX || AmpX || 'EXTRACT';
  TYPE ON AUSEINCL "<Hold_Line"
  COMPUTE DBName = 'A_' || Roll;
  COMPUTE Hold_Line = Roll_Stack(1).AIR_PATH || DBName ||
   '.FOC' || ' AS ' | 'AIR_MAIN';
  TYPE ON AUSEINCL "<Hold_Line"
  COMPUTE DBName = 'T_' || Roll;
  COMPUTE Hold_Line = Roll_Stack(1).AIR_PATH || DBName ||
   '.FOC' || ' AS ' | 'TKT_MAIN';
  TYPE ON AUSEINCL "<Hold_Line"
-* Car
  COMPUTE DBName = 'C_' || Roll;
  COMPUTE Hold_Line = Roll_Stack(1).CAR_PATH || DBName ||
    '.FOC' || ' AS ' | AmpX || AmpX || 'EXTRACT';
  TYPE ON CUSEINCL "<Hold_Line"
-* Hotel
  COMPUTE DBName = 'H_' || Roll;
  COMPUTE Hold_Line = Roll_Stack(1).HTL_PATH || DBName ||
    '.FOC' || ' AS ' | AmpX || AmpX || 'EXTRACT';
  TYPE ON HUSEINCL "<Hold_Line"
endcase

CASE Multiple_DB
  STACK CLEAR Q_Temp
  COMPUTE Cnt1 = 1;
  IF Qtr_Stack(1).Q1FMDT GT ' ' THEN
  BEGIN
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q1FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q1TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '1';
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDBEGIN
  IF Qtr_Stack(1).Q2FMDT GT ' ' THEN
  BEGIN
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q2FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q2TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '2';
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDBEGIN
  IF Qtr_Stack(1).Q3FMDT GT ' ' THEN
  BEGIN
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q3FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q3TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '3';
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDBEGIN
  IF Qtr_Stack(1).Q4FMDT GT ' ' THEN
  BEGIN
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q4FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q4TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '4';
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDBEGIN
  IF Qtr_Stack(1).Q5FMDT GT ' ' THEN
  BEGIN
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q5FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q5TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '5';
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDBEGIN
  IF Qtr_Stack(1).Q6FMDT GT ' ' THEN
  BEGIN
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q6FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q6TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '6';
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDBEGIN
  IF Qtr_Stack(1).Q7FMDT GT ' ' THEN
  BEGIN
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q7FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q7TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '7';
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDBEGIN
  IF Qtr_Stack(1).Q8FMDT GT ' ' THEN
  BEGIN
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q8FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q8TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '8';
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDBEGIN
  IF Qtr_Stack(1).Q9FMDT GT ' ' THEN
  BEGIN
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q9FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q9TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '9';
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDBEGIN
  IF Qtr_Stack(1).Q0FMDT GT ' ' THEN
  BEGIN
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).Q0FMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).Q0TODT;
    COMPUTE Q_Temp(Cnt1).QTR = '0';
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDBEGIN
  IF Qtr_Stack(1).QZFMDT GT ' ' THEN
  BEGIN
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).QZFMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).QZTODT;
    COMPUTE Q_Temp(Cnt1).QTR = 'Z';
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDBEGIN
  IF Qtr_Stack(1).QYFMDT GT ' ' THEN
  BEGIN
    COMPUTE Q_Temp(Cnt1).QFMDT = Qtr_Stack(1).QYFMDT;
    COMPUTE Q_Temp(Cnt1).QTODT = Qtr_Stack(1).QYTODT;
    COMPUTE Q_Temp(Cnt1).QTR = 'Y';
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDBEGIN
  STACK SORT Q_Temp BY QFMDT
endcase

CASE Write_Mult
  COMPUTE Cnt1 = 1;
  COMPUTE To_Flag = 'N';
  REPEAT WHILE Cnt1 LE Q_Temp.FocCount
    IF To_Flag EQ 'N' THEN 
    BEGIN
      PERFORM From_Test
      COMPUTE Cnt1 = Cnt1 + 1;
      GOTO ENDREPEAT
    ENDBEGIN
    IF To_Flag EQ 'Y' THEN PERFORM To_Test
    IF To_Flag EQ 'Q' THEN GOTO EXITREPEAT
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDREPEAT
ENDCASE

CASE Load_TS
  STACK CLEAR TS_Stack
  COMPUTE TS_Stack(1).TSFrom = RI_Stack(1).CMFM_DATE;
  COMPUTE TS_Stack(1).TSTo = RI_Stack(1).CMTO_DATE;
  COMPUTE TS_Stack(2).TSFrom = RI_Stack(1).PMFM_DATE;
  COMPUTE TS_Stack(2).TSTo = RI_Stack(1).PMTO_DATE;
  COMPUTE TS_Stack(3).TSFrom = RI_Stack(1).CYFM_DATE;
  COMPUTE TS_Stack(3).TSTo = RI_Stack(1).CYTO_DATE;
  COMPUTE TS_Stack(4).TSFrom = RI_Stack(1).PYFM_DATE;
  COMPUTE TS_Stack(4).TSTo = RI_Stack(1).PYTO_DATE;
  STACK SORT TS_Stack BY TSFrom BY TSTo
ENDCASE

CASE From_Test
  IF RI_Stack(1).RPT_TYPE EQ 'STS' THEN
  BEGIN
    IF TS_Stack(1).TSFrom LE Q_Temp(Cnt1).QTODT THEN
    BEGIN
      PERFORM Post_Mult
      COMPUTE To_Flag = 'Y';
    ENDBEGIN
  ENDBEGIN
  ELSE BEGIN
    IF RI_Stack(1).USE_PARM EQ 'AVIW28' THEN
    BEGIN
      COMPUTE Temp_Date8 = Cntl_Stack(1).FM_DATE;
      COMPUTE PQ_Yr = SUBSTR(Temp_Date8, 1, 4);
      COMPUTE Temp_Yr = PQ_Yr - 1;
      COMPUTE Temp_Date = Temp_Yr || '/01/01';
      COMPUTE Temp_DtYMD = Temp_Date;
TYPE "Temp Date <Temp_DtYMD ";
    ENDBEGIN
    ELSE BEGIN
      COMPUTE Temp_DtYMD = Cntl_Stack(1).FM_DATE;
    ENDBEGIN
    IF Temp_DtYMD LE Q_Temp(Cnt1).QTODT THEN
    BEGIN
      PERFORM Post_Mult
      COMPUTE To_Flag = 'Y';
    ENDBEGIN
  ENDBEGIN
ENDCASE

CASE To_Test
  IF RI_Stack(1).RPT_TYPE EQ 'STS' THEN
  BEGIN
    IF TS_Stack(4).TSTo GE Q_Temp(Cnt1).QFMDT THEN
    BEGIN
      PERFORM Post_Mult
    ENDBEGIN
    ELSE BEGIN
      COMPUTE To_Flag = 'Q';
    ENDBEGIN
  ENDBEGIN
  ELSE BEGIN
    IF Cntl_Stack(1).TO_DATE GE Q_Temp(Cnt1).QFMDT THEN
    BEGIN
      PERFORM Post_Mult
    ENDBEGIN
    ELSE BEGIN
      COMPUTE To_Flag = 'Q';
    ENDBEGIN
  ENDBEGIN
ENDCASE

CASE Post_Mult
-* Air
  COMPUTE DBName = RI_Stack(1).PAIR_DB || Q_Temp(Cnt1).QTR || Roll;
  COMPUTE Hold_Line = Roll_Stack(1).AIR_PATH || DBName ||
    '.FOC' || ' AS ' | AmpX || AmpX || 'EXTRACT';
  TYPE ON AUSEINCL "<Hold_Line"
  COMPUTE DBName = 'A' || Q_Temp(Cnt1).QTR || Roll;
  COMPUTE Hold_Line = Roll_Stack(1).AIR_PATH || DBName ||
   '.FOC' || ' AS ' | 'AIR_MAIN';
  TYPE ON AUSEINCL "<Hold_Line"
  COMPUTE DBName = 'T' || Q_Temp(Cnt1).QTR || Roll;
  COMPUTE Hold_Line = Roll_Stack(1).AIR_PATH || DBName ||
   '.FOC' || ' AS ' | 'TKT_MAIN';
  TYPE ON AUSEINCL "<Hold_Line"
-* Car
  COMPUTE DBName = 'C' || Q_Temp(Cnt1).QTR || Roll;
  COMPUTE Hold_Line = Roll_Stack(1).CAR_PATH || DBName ||
    '.FOC' || ' AS ' | AmpX || AmpX || 'EXTRACT';
  TYPE ON CUSEINCL "<Hold_Line"
-* Hotel
  COMPUTE DBName = 'H' || Q_Temp(Cnt1).QTR || Roll;
  COMPUTE Hold_Line = Roll_Stack(1).HTL_PATH || DBName ||
    '.FOC' || ' AS ' | AmpX || AmpX || 'EXTRACT';
  TYPE ON HUSEINCL "<Hold_Line"
ENDCASE

END
