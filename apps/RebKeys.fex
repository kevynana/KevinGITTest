-* -INCLUDE SETECHO
CREATE FILE RPT_KEY
-RUN

MAINTAIN FILE RPT_INST AND RPT_SET AND RPT_KEY

CASE TOP
INFER RPT_KEY.KEY_TYPE RPT_KEY.INST_KEY INTO keyStack1;
INFER RPT_KEY.KEY_TYPE RPT_KEY.SET_KEY INTO keyStack2;

STACK CLEAR SETSTACK;
STACK CLEAR keyStack1;
STACK CLEAR keyStack2;
REPOSITION RPT_SET.SET_KEY;
FOR ALL NEXT RPT_SET.SET_KEY INTO setStack;
STACK SORT setStack BY SET_KEY;

COMPUTE CNT2/I5 = 1;
COMPUTE CNT/I5=setStack.FOCCOUNT - 10;
REPEAT WHILE CNT LE setStack.FOCCOUNT
  COMPUTE keyStack2(CNT2).KEY_TYPE = 'S';
  COMPUTE keyStack2(CNT2).SET_KEY = setStack(CNT).SET_KEY;
  COMPUTE CNT2 = CNT2 + 1;
ENDREPEAT CNT = CNT + 1;
STACK CLEAR setStack;
REPOSITION RPT_KEY.KEY_TYPE;
FOR ALL INCLUDE RPT_KEY.KEY_TYPE RPT_KEY.SET_KEY 
  FROM keyStack2;
COMMIT;

STACK CLEAR instStack;
REPOSITION RPT_INST.INST_KEY;
FOR ALL NEXT INST_KEY INTO instStack;
STACK SORT instStack BY INST_KEY;

COMPUTE CNT2 = 1;
COMPUTE CNT=instStack.FOCCOUNT - 10;
REPEAT WHILE CNT LE instStack.FOCCOUNT
  COMPUTE keyStack1(CNT2).KEY_TYPE = 'I';
  COMPUTE keyStack1(CNT2).INST_KEY = instStack(CNT).INST_KEY;
  COMPUTE CNT2 = CNT2 + 1;
ENDREPEAT CNT = CNT + 1;
STACK CLEAR instStack;
REPOSITION RPT_KEY.KEY_TYPE;
FOR ALL INCLUDE RPT_KEY.KEY_TYPE RPT_KEY.INST_KEY 
  FROM keyStack1;
COMMIT;
ENDCASE

END
-RUN