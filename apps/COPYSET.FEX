-* File COPYSET.FEX

-***************************************************************************
-* This program will copy a report set and all related report instances from
-* one user id to another.  The set_id and inst_id will be updated with a
-* date/time stamp to create a unique identifier.
-* DATE           NAME
-* 2/22/01        Shelley Snook
-* 11/15/01       Steve Cords - updated client codes and categories
-* 11/20/01       Steve Cords - updated ROL_LEVEL field in IHIER_SL database
-* 03/28/02       Steve Cords - now writing out to I_SUMM database
-* 04/03/02       Steve Cords - Changed Joins to not be ALL
-* 04/03/02       Steve Cords - Added SET_TYPE copy into RPT_SET
-* 03/27/03       William Torres - Added RPT_FLDS database
-***************************************************************************
-* -INCLUDE SETECHO

SET ASNAMES = ON
SET ALL = PASS
SET NODATA = ' '

-* JOIN CLEAR *

-*Set variables
-SET &&FROMUSER='master';
-SET &&TOUSER='';
-SET &&TOSECURITY='';
-SET &&RSETNAME='OAK Quarterly reports';
-SET &&ROLLUP='OAK-R';

-* Create new set_id
DEFINE FILE RPT_SET
ID/A6 = EDIT (SET_ID, '999999');
-*set date
NOWDATE/A8=TODAY(NOWDATE);
CC/A2='20';
MM/A2=EDIT (NOWDATE, '99');
DD/A2=EDIT (NOWDATE, '$$$99');
YY/A2=EDIT (NOWDATE, '$$$$$$99');
DATE/A8 = CC || YY || MM || DD;
-* set time
NOWTIME/A8 = HHMMSS(NOWTIME);
HOUR/A2 = EDIT (NOWTIME, '99');
MINUTE/A2 = EDIT (NOWTIME, '$$$99');
SECOND/A2 = EDIT (NOWTIME, '$$$$$$99');
TIME/A6= HOUR || MINUTE || SECOND;
-* new set_id with date/time stamp - 'wb' will indicate it was created by
-* this program
NEWSETID/A22 = ID | 'wb' || DATE || TIME;
NEWSETKEY/A30 = ROLLUP_CODE | NEWSETID;
NEWUSER/A20='&&TOUSER';
NEWSECURITY/I1=&&TOSECURITY;
END
-RUN

-*Find set to copy this file will be used in report instance copy
-TYPE FIND SET TO COPY
TABLE FILE RPT_SET
PRINT
 SET_KEY
 NEWSETKEY
 ROLLUP_CODE
 NEWSETID
 SET_FREQ
 SET_NAME
 SET_TITLE1
 SET_TITLE2
 SET_ESC
 PRINTER_TYP
 FM_DATE
 TO_DATE
 OUTPUT_DEST
 OUTPUT_FORMAT
 EXECUTE_FLAG
 CONTROL_ID
 RUN_SEQ
 NEWUSER
 NEWSECURITY
 ZIP_FLAG
 SET_TYPE
WHERE (ROLLUP_CODE EQ '&&ROLLUP') AND (USER_NAME EQ '&&FROMUSER') AND
(SET_NAME EQ '&&RSETNAME')
ON TABLE HOLD AS RPTSET FORMAT FOCUS
END
-RUN

-*Find set to copy this will be added to RPT_SET
TABLE FILE RPTSET
PRINT
 NEWSETKEY AS 'SET_KEY'
 ROLLUP_CODE
 NEWSETID AS 'SET_ID'
 SET_FREQ
 SET_NAME
 SET_TITLE1
 SET_TITLE2
 SET_ESC
 PRINTER_TYP
 FM_DATE
 TO_DATE
 OUTPUT_DEST
 OUTPUT_FORMAT
 EXECUTE_FLAG
 CONTROL_ID
 RUN_SEQ
 NEWUSER AS 'USER_NAME'
 NEWSECURITY AS 'USER_SECURITY'
 ZIP_FLAG
 SET_TYPE
ON TABLE HOLD AS SETHLD1
END
-RUN

-TYPE UPDATE RPT_SET
-* Update RPT_SET with new record
MODIFY FILE RPT_SET
 LOG DUPL    MSG OFF
 LOG INVALID MSG OFF
 LOG FORMAT  MSG OFF
 LOG NOMATCH MSG OFF
FIXFORM FROM SETHLD1
MATCH SET_KEY
ON MATCH REJECT
ON NOMATCH INCLUDE
DATA ON SETHLD1
END
-RUN

JOIN SEG01.SET_KEY IN RPTSET TO ALL RPT_INST.SET_KEY IN RPT_INST AS JOINME
JOIN RPT_INST.INST_KEY IN RPTSET TO IHIER_SL.INST_KEY IN IHIER_SL AS JOINME2

DEFINE FILE RPTSET
ID/A6 = EDIT (SET_ID, '999999');
-*set date
NOWDATE2/A8 WITH INST_KEY =TODAY(NOWDATE2);
CC/A2 WITH INST_KEY ='20';
MM/A2 WITH INST_KEY =EDIT (NOWDATE2, '99');
DD/A2 WITH INST_KEY =EDIT (NOWDATE2, '$$$99');
YY/A2 WITH INST_KEY =EDIT (NOWDATE2, '$$$$$$99');
DATE/A8 WITH INST_KEY = CC || YY || MM || DD;
-* set time
NOWTIME2/A8 WITH INST_KEY = HHMMSS(NOWTIME2);
HOUR/A2 WITH INST_KEY = EDIT (NOWTIME2, '99');
MINUTE/A2 WITH INST_KEY = EDIT (NOWTIME2, '$$$99');
D_SECOND/D2 = 00;
END
-RUN

-TYPE FIND REPORT INSTANCES
-* find records to copy
TABLE FILE RPTSET
PRINT
COMPUTE L_SECOND/D2 = IF D_SECOND EQ LAST L_SECOND THEN
                      (L_SECOND + 1) ELSE (L_SECOND + 1); NOPRINT AND
COMPUTE A_SECOND/A2 = EDIT(L_SECOND); NOPRINT AND
COMPUTE TIME/A6 = HOUR || MINUTE || A_SECOND; NOPRINT AND
COMPUTE NEWINSTID/A22= ID | 'wb' | DATE | TIME; NOPRINT AND
COMPUTE NEWINSTKEY/A72=ROLLUP_CODE | NEWSETID | RPT_ID | NEWINSTID; NOPRINT
AND
 INST_KEY
 NEWINSTKEY
 RPT_INST.ROLLUP_CODE
 NEWSETID
 RPT_ID
 NEWINSTID
 NEWSETKEY
 RPT_INST.OUTPUT_DEST
 RPT_INST.OUTPUT_FORMAT
 RPT_INST.EXECUTE_FLAG
 SRD_FLAG
 RPT_NAME
 RPT_GROUP
 RPT_TYPE
 RPT_STREAM
 RPT_HEAD1
 RPT_HEAD2
 RPT_FOOT1
 RPT_FOOT2
 STYLE1
 STYLE2
 RPT_TITLE1
 RPT_TITLE2
 TITLE_ESC
 BODY_ESC
 STYLE3
 RPT_LOOK
 RPT_SERVER
 GLOBAL_PARM
 USE_PARM
 CMFM_DATE
 CMTO_DATE
 PMFM_DATE
 PMTO_DATE
 CYFM_DATE
 CYTO_DATE
 PYFM_DATE
 PYTO_DATE
 LEVEL_KEY
 LEV_SELECT
 SELECT_LEV
 RPT_INST.RUN_SEQ
 RPT_INST.FM_DATE
 RPT_INST.TO_DATE
 PAIR_DB
 PRINTER_TYP
 RPT_INST.CONTROL_ID
 COVER_DEST
 SUMM_DEST
 RANK_DEST
 SECURE_FLAG
 DISTRB_FLAG
 LOGO_1
 LOGO_2
 FXDATE
 TXDATE
 CLIENT1
 CLIENT2
 CLIENT3
 CLIENT4
 CLIENT5
 CLIENT6
 CLIENT7
 CLIENT8
 CLIENT9
 CLIENT10
 CLIENT11
 CLIENT12
 CLIENT13
 CLIENT14
 CLIENT15
 CLIENT16
 CLIENT17
 CLIENT18
 CLIENT19
 CLIENT20
 CLIENT21
 CLIENT22
 CLIENT23
 CLIENT24
 CLIENT25
 CATG1
 CATG2
 CATG3
 CATG4
 CATG5
 CATG6
 CATG7
 CATG8
 CATG9
 CATG10
 CLSEL
 CASEL
 CL_OM1
 CL_OM2
 CL_OM3
 CL_OM4
 CL_OM5
 CL_OM6
 CA_OM1
 CA_OM2
 CA_OM3
 CA_OM4
 CA_OM5
 CA_OM6
 PRT_LN1
 ROL_LEVEL
ON TABLE HOLD AS RPTINST FORMAT FOCUS INDEX INST_KEY
END
-RUN


TABLE FILE RPTINST
PRINT
 NEWINSTKEY AS 'INST_KEY'
 ROLLUP_CODE
 NEWSETID AS 'SET_ID'
 RPT_ID
 NEWINSTID AS 'INSTANCE_ID'
 NEWSETKEY AS 'SET_KEY'
 OUTPUT_DEST
 OUTPUT_FORMAT
 EXECUTE_FLAG
 SRD_FLAG
 RPT_NAME
 RPT_GROUP
 RPT_TYPE
 RPT_STREAM
 RPT_HEAD1
 RPT_HEAD2
 RPT_FOOT1
 RPT_FOOT2
 STYLE1
 STYLE2
 RPT_TITLE1
 RPT_TITLE2
 TITLE_ESC
 BODY_ESC
 STYLE3
 RPT_LOOK
 RPT_SERVER
 GLOBAL_PARM
 USE_PARM
 CMFM_DATE
 CMTO_DATE
 PMFM_DATE
 PMTO_DATE
 CYFM_DATE
 CYTO_DATE
 PYFM_DATE
 PYTO_DATE
 LEVEL_KEY
 LEV_SELECT
 SELECT_LEV
 RUN_SEQ
 FM_DATE
 TO_DATE
 PAIR_DB
 PRINTER_TYP
 CONTROL_ID
 COVER_DEST
 SUMM_DEST
 RANK_DEST
 SECURE_FLAG
 DISTRB_FLAG
 LOGO_1
 LOGO_2
 FXDATE
 TXDATE
 CLIENT1
 CLIENT2
 CLIENT3
 CLIENT4
 CLIENT5
 CLIENT6
 CLIENT7
 CLIENT8
 CLIENT9
 CLIENT10
 CLIENT11
 CLIENT12
 CLIENT13
 CLIENT14
 CLIENT15
 CLIENT16
 CLIENT17
 CLIENT18
 CLIENT19
 CLIENT20
 CLIENT21
 CLIENT22
 CLIENT23
 CLIENT24
 CLIENT25
 CATG1
 CATG2
 CATG3
 CATG4
 CATG5
 CATG6
 CATG7
 CATG8
 CATG9
 CATG10
 CLSEL
 CASEL
ON TABLE HOLD AS INSTHLD
END
-RUN

-TYPE UPDATE RPT_INST
-* Update RPT_INST with new records
MODIFY FILE RPT_INST
 LOG DUPL    MSG OFF
 LOG INVALID MSG OFF
 LOG FORMAT  MSG OFF
 LOG NOMATCH MSG OFF
FIXFORM FROM INSTHLD
MATCH INST_KEY
ON MATCH REJECT
ON NOMATCH INCLUDE
DATA ON INSTHLD
END
-RUN

-TYPE UPDATE RPT_INST 2
TABLE FILE RPTINST
PRINT NEWINSTKEY AS 'INST_KEY'
 PRT_LN1
 CL_OM1
 CL_OM2
 CL_OM3
 CL_OM4
 CL_OM5
 CL_OM6
 CA_OM1
 CA_OM2
 CA_OM3
 CA_OM4
 CA_OM5
 CA_OM6
ON TABLE HOLD AS INSTHLD2
END
-RUN

MODIFY FILE RPT_INST
 LOG DUPL    MSG OFF
 LOG INVALID MSG OFF
 LOG FORMAT  MSG OFF
 LOG NOMATCH MSG OFF
FIXFORM INST_KEY/72 PRT_LN1/65
FIXFORM CL_OM1/65 CL_OM2/65 CL_OM3/65 CL_OM4/65 CL_OM5/65 CL_OM6/65
FIXFORM CA_OM1/65 CA_OM2/65 CA_OM3/65 CA_OM4/65 CA_OM5/65 CA_OM6/65
MATCH INST_KEY
ON MATCH CONTINUE
MATCH PRT_LN1
ON NOMATCH INCLUDE
ON MATCH REJECT
DATA ON INSTHLD2
END
-RUN

-* update ihier_sl
TABLE FILE RPTINST
PRINT
 NEWINSTKEY AS 'INST_KEY'
 LEVEL_KEY AS 'SEL_KEY'
 LEV_SELECT AS 'SEL_DESC'
 SELECT_LEV AS 'SEL_LEVEL'
 ROL_LEVEL
ON TABLE HOLD AS HIERHLD
END
-RUN

-TYPE UPDATE IHIER_SL
-* Update IHIER_SL with new records
MODIFY FILE IHIER_SL
 LOG DUPL    MSG OFF
 LOG INVALID MSG OFF
 LOG FORMAT  MSG OFF
 LOG NOMATCH MSG OFF
FIXFORM FROM HIERHLD
MATCH INST_KEY SEL_KEY
ON MATCH REJECT
ON NOMATCH INCLUDE
DATA ON HIERHLD
END
-RUN


JOIN RPTINST.INST_KEY IN RPTINST TO IHIER_BK.INST_KEY IN IHIER_BK AS JOINME1

TABLE FILE RPTINST
PRINT
 NEWINSTKEY AS 'INST_KEY'
 HIER_LEVEL
 FLD_NAME
 SORT_SEQ
 FLD_DESC
 SORT_OPTION
 SORT_SELECT
 SORT_ORDER
 SUBH_SELECT
 SUBH_TEXT1
 SUBH_TEXT2
 SUBF_SELECT
 SUBF_TEXT1
 SUBF_TEXT2
 PG_BREAK
 SKP_LINE
 SBTOT_SELECT
 SBTOT_TEXT1
 SBTOT_TEXT2
ON TABLE HOLD AS HIERBKHD
END
-RUN

-TYPE UPDATE IHIER_BK
-* Update IHIER_SL with new records
MODIFY FILE IHIER_BK
 LOG DUPL    MSG OFF
 LOG INVALID MSG OFF
 LOG FORMAT  MSG OFF
 LOG NOMATCH MSG OFF
FIXFORM FROM HIERBKHD
MATCH INST_KEY HIER_LEVEL
ON MATCH REJECT
ON NOMATCH INCLUDE
DATA ON HIERBKHD
END
-RUN

-*******************
JOIN RPTINST.INST_KEY IN RPTINST TO I_SUMM.INST_KEY IN I_SUMM AS JOIN3

TABLE FILE RPTINST
PRINT
 NEWINSTKEY AS 'INST_KEY'
 HSEL1 HDES1
 HSEL2 HDES2
 HSEL3 HDES3
 HSEL4 HDES4
 HSEL5 HDES5
 HSEL6 HDES6
 HSEL7 HDES7
 HSEL8 HDES8
 HSEL9 HDES9
 HSEL10 HDES10
 HSEL11 HDES11
 HSEL12 HDES12
 HSEL13 HDES13
 HSEL14 HDES14
 HSEL15 HDES15
 HSEL16 HDES16
 HSEL17 HDES17
 HSEL18 HDES18
 HSEL19 HDES19
 HSEL20 HDES20
 HSEL21 HDES21
 HSEL22 HDES22
 HSEL23 HDES23
 HSEL24 HDES24
 HSEL25 HDES25
 HSIF01 HSIF02 HSIF03 HSIF04 HSIF05
 HSIF06 HSIF07 HSIF08 HSIF09 HSIF10
 SELECT SCREEN LEVEL
 NEWINSTID
ON TABLE HOLD AS ISUMMHD
END
-RUN

DEFINE FILE ISUMMHD
RPTKEY/A30 = NEWINSTID;
END
-RUN

TABLE FILE ISUMMHD
PRINT
 INST_KEY
 HSEL1 HDES1
 HSEL2 HDES2
 HSEL3 HDES3
 HSEL4 HDES4
 HSEL5 HDES5
 HSEL6 HDES6
 HSEL7 HDES7
 HSEL8 HDES8
 HSEL9 HDES9
 HSEL10 HDES10
 HSEL11 HDES11
 HSEL12 HDES12
 HSEL13 HDES13
 HSEL14 HDES14
 HSEL15 HDES15
 HSEL16 HDES16
 HSEL17 HDES17
 HSEL18 HDES18
 HSEL19 HDES19
 HSEL20 HDES20
 HSEL21 HDES21
 HSEL22 HDES22
 HSEL23 HDES23
 HSEL24 HDES24
 HSEL25 HDES25
 HSIF01 HSIF02 HSIF03 HSIF04 HSIF05
 HSIF06 HSIF07 HSIF08 HSIF09 HSIF10
 SELECT SCREEN LEVEL
 RPTKEY
ON TABLE HOLD AS ISUMMHD1
END
-TYPE UPDATE I_SUMM
-* Update I_SUMM with new records
MODIFY FILE I_SUMM
 LOG DUPL    MSG OFF
 LOG INVALID MSG OFF
 LOG FORMAT  MSG OFF
 LOG NOMATCH MSG OFF
FIXFORM FROM ISUMMHD1
MATCH INST_KEY
ON MATCH REJECT
ON NOMATCH INCLUDE
DATA ON ISUMMHD1
END
-RUN
-*========================================================================
-*                              MODIFY FILE RPT_FLDS
-*========================================================================

JOIN RPTINST.INST_KEY IN RPTINST TO RPT_FLDS.INST_KEY IN RPT_FLDS AS JOIN4

TABLE FILE RPTINST
PRINT INST_KEY NEWINSTKEY
ON TABLE HOLD AS HOLD1 FORMAT FOCUS
END
-RUN

MAINTAIN FILE RPT_FLDS AND HOLD1

CASE TOP
	PERFORM DEF_RPTSTK;	
	COMPUTE NEW_KEY/A72=;
	COMPUTE OLD_KEY/A72=;
	COMPUTE CNT1/I5 = 1;
	COMPUTE CNT/I2 = 1;
	INFER HOLD1.INST_KEY INTO stkHold1;
	FOR ALL NEXT HOLD1.INST_KEY INTO stkHold1;
	
	REPEAT WHILE CNT1 LE stkHold1.FOCCOUNT
		COMPUTE OLD_KEY = stkHold1(CNT1).INST_KEY;
		COMPUTE NEW_KEY = stkHold1(CNT1).NEWINSTKEY;
		PERFORM UPD_RPTFLDS;
	ENDREPEAT CNT1 = CNT1 + 1;

ENDCASE

CASE UPD_RPTFLDS
  STACK CLEAR CopyFrom2;
  STACK CLEAR CopyFrom3;
	REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
	FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.COMMON1.INCL1     INTO CopyFrom2
		Where RPT_FLDS.INST_KEY EQ OLD_KEY
	REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
	FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.COMMON2.SEQ_NO    INTO CopyFrom3
		Where RPT_FLDS.INST_KEY EQ OLD_KEY;

	STACK CLEAR CopyTo2;
	STACK CLEAR CopyTo3;
  COMPUTE CopyTo2(1).INST_KEY    = NEW_KEY ;
	COMPUTE CopyTo2(1).USE_PARM    = CopyFrom2(1).USE_PARM ;
	COMPUTE CopyTo2(1).INCL1    = CopyFrom2(1).INCL1;
	COMPUTE CopyTo2(1).INCL2    = CopyFrom2(1).INCL2;
	COMPUTE CopyTo2(1).INCL3    = CopyFrom2(1).INCL3;
	
	COMPUTE CopyTo2(1).USE_PARM    = CopyFrom2(1).USE_PARM ;
		
	REPOSITION RPT_FLDS.RPT_INST.INST_KEY 
	FOR 1 INCLUDE RPT_FLDS.INST_KEY RPT_FLDS.COMMON1.INCL1 RPT_FLDS.COMMON1.INCL2 
				RPT_FLDS.COMMON1.INCL3 FROM CopyTo2(1)

	COMPUTE CNT = 1;
	REPEAT WHILE CNT LE CopyFrom3.FOCCOUNT
	COMPUTE CopyTo3(CNT).INST_KEY        = NEW_KEY ;
	COMPUTE CopyTo3(CNT).SEQ_NO           = CopyFrom3(CNT).SEQ_NO; ;
	COMPUTE CopyTo3(CNT).ID_LEVEL1        = CopyFrom3(CNT).ID_LEVEL1 ;
	COMPUTE CopyTo3(CNT).ID_LEVEL2        = CopyFrom3(CNT).ID_LEVEL2 ;
	COMPUTE CopyTo3(CNT).ID_LEVEL3        = CopyFrom3(CNT).ID_LEVEL3;
	
	REPOSITION RPT_FLDS.RPT_INST.INST_KEY 
	FOR 1 INCLUDE RPT_FLDS.INST_KEY RPT_FLDS.COMMON2.SEQ_NO RPT_FLDS.COMMON2.ID_LEVEL1
	RPT_FLDS.COMMON2.ID_LEVEL2 RPT_FLDS.COMMON2.ID_LEVEL3 FROM CopyTo3(CNT)
	ENDREPEAT CNT = CNT + 1;
  COMMIT;
  
    PERFORM UPDAIR;
    PERFORM UPDCAR;
    PERFORM UPDHTL;
ENDCASE

CASE UPDAIR
	STACK CLEAR CopyFrom4;
	STACK CLEAR CopyFrom5;
	STACK CLEAR CopyTo4;
	STACK CLEAR CopyTo5;
	
	REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
	FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.AIR.INCL1		   INTO CopyFrom4
		Where RPT_FLDS.INST_KEY EQ OLD_KEY
	REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
	FOR ALL NEXT RPT_FLDS.INST_KEY  RPT_FLDS.AIRFLDS.SEQ_NO    INTO CopyFrom5
		Where RPT_FLDS.INST_KEY EQ OLD_KEY
		
	COMPUTE CopyTo4(1).INST_KEY        = NEW_KEY ;
	COMPUTE CopyTo4(1).ID       = CopyFrom4(1).ID;
	COMPUTE CopyTo4(1).INCL1       = CopyFrom4(1).INCL1;
	COMPUTE CopyTo4(1).INCL2       = CopyFrom4(1).INCL2;
	COMPUTE CopyTo4(1).INCL3       = CopyFrom4(1).INCL3;
	COMPUTE CopyTo4(1).INCL4       = CopyFrom4(1).INCL4;
	COMPUTE CopyTo4(1).INCL5       = CopyFrom4(1).INCL5;
	COMPUTE CopyTo4(1).INCL6       = CopyFrom4(1).INCL6;
	COMPUTE CopyTo4(1).INCL7       = CopyFrom4(1).INCL7;
	COMPUTE CopyTo4(1).INCL8       = CopyFrom4(1).INCL8;
	COMPUTE CopyTo4(1).INTDOMT     = CopyFrom4(1).INTDOMT;
	COMPUTE CopyTo4(1).INTDOMS     = CopyFrom4(1).INTDOMS;
	COMPUTE CopyTo4(1).RANKBYTOP1  = CopyFrom4(1).RANKBYTOP1;
	COMPUTE CopyTo4(1).RANKMETHOD  = CopyFrom4(1).RANKMETHOD;
	COMPUTE CopyTo4(1).CLASSCAT_A  = CopyFrom4(1).CLASSCAT_A;
	COMPUTE CopyTo4(1).CLASSCAT_F  = CopyFrom4(1).CLASSCAT_F;
	COMPUTE CopyTo4(1).CLASSCAT_B  = CopyFrom4(1).CLASSCAT_B;
	COMPUTE CopyTo4(1).CLASSCAT_C  = CopyFrom4(1).CLASSCAT_C;
	COMPUTE CopyTo4(1).CLASSCAT_D  = CopyFrom4(1).CLASSCAT_D;
	COMPUTE CopyTo4(1).TRANS_TYPE_S    = CopyFrom4(1).TRANS_TYPE_S;
	COMPUTE CopyTo4(1).TRANS_TYPE_E    = CopyFrom4(1).TRANS_TYPE_E;
	COMPUTE CopyTo4(1).TRANS_TYPE_R    = CopyFrom4(1).TRANS_TYPE_R;
	COMPUTE CopyTo4(1).TRANS_TYPE_V    = CopyFrom4(1).TRANS_TYPE_V;
	COMPUTE CopyTo4(1).ADV_PUR_A       = CopyFrom4(1).ADV_PUR_A;
	COMPUTE CopyTo4(1).ADV_PUR_0       = CopyFrom4(1).ADV_PUR_0;
	COMPUTE CopyTo4(1).ADV_PUR_7       = CopyFrom4(1).ADV_PUR_7;
	COMPUTE CopyTo4(1).ADV_PUR_14      = CopyFrom4(1).ADV_PUR_14;
	COMPUTE CopyTo4(1).ADV_PUR_21      = CopyFrom4(1).ADV_PUR_21;
	COMPUTE CopyTo4(1).RANKBYTOP2      = CopyFrom4(1).RANKBYTOP2;
	COMPUTE CopyTo4(1).CITYPAIRFLD     = CopyFrom4(1).CITYPAIRFLD;
	
	REPOSITION RPT_FLDS.RPT_INST.INST_KEY 
	FOR 1 INCLUDE RPT_FLDS.INST_KEY
	RPT_FLDS.AIR.ID RPT_FLDS.AIR.INCL1 RPT_FLDS.AIR.INCL2 RPT_FLDS.AIR.INCL3
	RPT_FLDS.AIR.INCL4 RPT_FLDS.AIR.INCL5 RPT_FLDS.AIR.INCL6
	RPT_FLDS.AIR.INCL7 RPT_FLDS.AIR.INCL8 
	RPT_FLDS.AIR.INTDOMT RPT_FLDS.AIR.INTDOMS RPT_FLDS.AIR.RANKBYTOP1
	RPT_FLDS.AIR.RANKMETHOD RPT_FLDS.AIR.CLASSCAT_A RPT_FLDS.AIR.CLASSCAT_F
	RPT_FLDS.AIR.CLASSCAT_B RPT_FLDS.AIR.CLASSCAT_C RPT_FLDS.AIR.CLASSCAT_D
	RPT_FLDS.AIR.TRANS_TYPE_S RPT_FLDS.AIR.TRANS_TYPE_E RPT_FLDS.AIR.TRANS_TYPE_R
	RPT_FLDS.AIR.TRANS_TYPE_V RPT_FLDS.AIR.ADV_PUR_A RPT_FLDS.AIR.ADV_PUR_0
	RPT_FLDS.AIR.ADV_PUR_7 RPT_FLDS.AIR.ADV_PUR_14 RPT_FLDS.AIR.ADV_PUR_21
	RPT_FLDS.AIR.RANKBYTOP2 RPT_FLDS.AIR.CITYPAIRFLD
	FROM CopyTo4(1)

	COMPUTE CNT = 1;
	REPEAT WHILE CNT LE CopyFrom5.FOCCOUNT
	COMPUTE CopyTo5(CNT).INST_KEY      = NEW_KEY;
	COMPUTE CopyTo5(CNT).SEQ_NO        = CopyFrom5(CNT).SEQ_NO;
	COMPUTE CopyTo5(CNT).PASSENGER     = CopyFrom5(CNT).PASSENGER;
	COMPUTE CopyTo5(CNT).TICKET_NO     = CopyFrom5(CNT).TICKET_NO;
	COMPUTE CopyTo5(CNT).ORG_AIRPORT   = CopyFrom5(CNT).ORG_AIRPORT;
	COMPUTE CopyTo5(CNT).RTE_AIRPORT   = CopyFrom5(CNT).RTE_AIRPORT;
	COMPUTE CopyTo5(CNT).VAL_AIR       = CopyFrom5(CNT).VAL_AIR;
	COMPUTE CopyTo5(CNT).FLOWN_AIR     = CopyFrom5(CNT).FLOWN_AIR;
	COMPUTE CopyTo5(CNT).REFUSE_CODE   = CopyFrom5(CNT).REFUSE_CODE;
	COMPUTE CopyTo5(CNT).CP_AIRPORT    = CopyFrom5(CNT).CP_AIRPORT;
	
	REPOSITION RPT_FLDS.RPT_INST.INST_KEY 
	FOR ALL INCLUDE RPT_FLDS.INST_KEY
	RPT_FLDS.AIRFLDS.SEQ_NO RPT_FLDS.AIRFLDS.PASSENGER RPT_FLDS.AIRFLDS.TICKET_NO
	RPT_FLDS.AIRFLDS.ORG_AIRPORT RPT_FLDS.AIRFLDS.RTE_AIRPORT
	RPT_FLDS.AIRFLDS.VAL_AIR RPT_FLDS.AIRFLDS.FLOWN_AIR RPT_FLDS.AIRFLDS.REFUSE_CODE
	RPT_FLDS.AIRFLDS.CP_AIRPORT FROM CopyTo5(CNT)

	ENDREPEAT CNT = CNT + 1;
	COMMIT                                                                      
ENDCASE

CASE UPDCAR
	STACK CLEAR CopyFrom6;
	STACK CLEAR CopyFrom7;
	STACK CLEAR CopyTo6;
	STACK CLEAR CopyTo7;
	
	REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
	FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.CAR.INCL1		   INTO CopyFrom6
	Where RPT_FLDS.INST_KEY EQ OLD_KEY
	REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
	FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.CARFLDS.SEQ_NO    INTO CopyFrom7
	Where RPT_FLDS.INST_KEY EQ OLD_KEY
			
	COMPUTE CNT = 1;
	COMPUTE CopyTo6(CNT).INST_KEY     = NEW_KEY;
	COMPUTE CopyTo6(CNT).ID           = CopyFrom6(CNT).ID;
	COMPUTE CopyTo6(CNT).INCL1        = CopyFrom6(CNT).INCL1;
	COMPUTE CopyTo6(CNT).INCL2        = CopyFrom6(CNT).INCL2;
	COMPUTE CopyTo6(CNT).INCL3        = CopyFrom6(CNT).INCL3;
	COMPUTE CopyTo6(CNT).INCL4        = CopyFrom6(CNT).INCL4;
	COMPUTE CopyTo6(CNT).INCL5        = CopyFrom6(CNT).INCL5;
	COMPUTE CopyTo6(CNT).INCL6        = CopyFrom6(CNT).INCL6;
	COMPUTE CopyTo6(CNT).RANKBYTOP    = CopyFrom6(CNT).RANKBYTOP;
	COMPUTE CopyTo6(CNT).RANKMETHOD   = CopyFrom6(CNT).RANKMETHOD;
	COMPUTE CopyTo6(CNT).RATEALL      = CopyFrom6(CNT).RATEALL;
	COMPUTE CopyTo6(CNT).RATE1        = CopyFrom6(CNT).RATE1;
	COMPUTE CopyTo6(CNT).RATE2        = CopyFrom6(CNT).RATE2;
	COMPUTE CopyTo6(CNT).RATE3        = CopyFrom6(CNT).RATE3;
	COMPUTE CopyTo6(CNT).RATE4        = CopyFrom6(CNT).RATE4;
	COMPUTE CopyTo6(CNT).RATE5        = CopyFrom6(CNT).RATE5;
	COMPUTE CopyTo6(CNT).RATE6        = CopyFrom6(CNT).RATE6;
	
	REPOSITION RPT_FLDS.RPT_INST.INST_KEY 
	FOR 1 INCLUDE RPT_FLDS.INST_KEY
	RPT_FLDS.CAR.ID RPT_FLDS.CAR.INCL1 RPT_FLDS.CAR.INCL2 RPT_FLDS.CAR.INCL3 
	RPT_FLDS.CAR.INCL4 RPT_FLDS.CAR.INCL5 RPT_FLDS.CAR.INCL6 RPT_FLDS.CAR.RANKBYTOP 
	RPT_FLDS.CAR.RANKMETHOD RPT_FLDS.CAR.RATEALL RPT_FLDS.CAR.RATE1
	RPT_FLDS.CAR.RATE2 RPT_FLDS.CAR.RATE3 RPT_FLDS.CAR.RATE4 RPT_FLDS.CAR.RATE5
	RPT_FLDS.CAR.RATE6 FROM CopyTo6(CNT);

	COMPUTE CNT = 1;
	REPEAT WHILE CNT LE CopyFrom7.FOCCOUNT	
	COMPUTE CopyTo7(CNT).INST_KEY     = NEW_KEY;
	COMPUTE CopyTo7(CNT).SEQ_NO       = CopyFrom7(CNT).SEQ_NO;
	COMPUTE CopyTo7(CNT).PASSENGER    = CopyFrom7(CNT).PASSENGER;
	COMPUTE CopyTo7(CNT).VENDOR_CODE  = CopyFrom7(CNT).VENDOR_CODE;
	COMPUTE CopyTo7(CNT).REFUSE_CODE  = CopyFrom7(CNT).REFUSE_CODE;
	COMPUTE CopyTo7(CNT).PICKUP_CITY  = CopyFrom7(CNT).PICKUP_CITY;
	COMPUTE CopyTo7(CNT).DROPOFF_CITY = CopyFrom7(CNT).DROPOFF_CITY;
	COMPUTE CopyTo7(CNT).CAR_TYPE     = CopyFrom7(CNT).CAR_TYPE;
	
	REPOSITION RPT_FLDS.RPT_INST.INST_KEY 
	FOR 1 INCLUDE RPT_FLDS.INST_KEY
	RPT_FLDS.CARFLDS.SEQ_NO RPT_FLDS.CARFLDS.PASSENGER RPT_FLDS.CARFLDS.VENDOR_CODE
	RPT_FLDS.CARFLDS.REFUSE_CODE RPT_FLDS.CARFLDS.PICKUP_CITY 
	RPT_FLDS.CARFLDS.DROPOFF_CITY RPT_FLDS.CARFLDS.CAR_TYPE FROM CopyTo7(CNT)
	ENDREPEAT CNT = CNT + 1;
	
	COMMIT;                                                                      
ENDCASE

CASE UPDHTL	
	STACK CLEAR CopyFrom8;
	STACK CLEAR CopyFrom9;
	STACK CLEAR CopyTo8;
	STACK CLEAR CopyTo9;
	
	REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
	FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.HTL.INCL1		   INTO CopyFrom8
		Where RPT_FLDS.INST_KEY EQ OLD_KEY
	REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
	FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.HTLFLDS.SEQ_NO    INTO CopyFrom9
		Where RPT_FLDS.INST_KEY EQ OLD_KEY
	
	COMPUTE CopyTo8(1).INST_KEY     = NEW_KEY ;
	COMPUTE CopyTo8(1).ID           = CopyFrom8(1).ID ;
	COMPUTE CopyTo8(1).INCL1        = CopyFrom8(1).INCL1 ;
	COMPUTE CopyTo8(1).INCL2        = CopyFrom8(1).INCL2 ;
	COMPUTE CopyTo8(1).INCL3        = CopyFrom8(1).INCL3 ;
	COMPUTE CopyTo8(1).INCL4        = CopyFrom8(1).INCL4 ;
	COMPUTE CopyTo8(1).RANKBYTOP1   = CopyFrom8(1).RANKBYTOP1 ;
	COMPUTE CopyTo8(1).RANKMETHOD   = CopyFrom8(1).RANKMETHOD ;
	COMPUTE CopyTo8(1).RANKBYTOP2   = CopyFrom8(1).RANKBYTOP2 ;
	
	REPOSITION RPT_FLDS.RPT_INST.INST_KEY 
	FOR ALL INCLUDE RPT_FLDS.INST_KEY
	RPT_FLDS.HTL.ID RPT_FLDS.HTL.INCL1 RPT_FLDS.HTL.INCL2 RPT_FLDS.HTL.INCL3 
	RPT_FLDS.HTL.INCL4 RPT_FLDS.HTL.RANKBYTOP1 RPT_FLDS.HTL.RANKMETHOD RPT_FLDS.HTL.RANKBYTOP2
	FROM CopyTo8(1)

	COMPUTE CNT = 1;
	REPEAT WHILE CNT LE CopyFrom9.FOCCOUNT
	COMPUTE CopyTo9(CNT).INST_KEY     = NEW_KEY;
	COMPUTE CopyTo9(CNT).SEQ_NO       = CopyFrom9(CNT).SEQ_NO;
	COMPUTE CopyTo9(CNT).PASSENGER    = CopyFrom9(CNT).PASSENGER;
	COMPUTE CopyTo9(CNT).CHAIN_CODE   = CopyFrom9(CNT).CHAIN_CODE;
	COMPUTE CopyTo9(CNT).HTL_CITY     = CopyFrom9(CNT).HTL_CITY;
	COMPUTE CopyTo9(CNT).REFUSE_CODE  = CopyFrom9(CNT).REFUSE_CODE;
	
	REPOSITION RPT_FLDS.RPT_INST.INST_KEY 
	FOR 1 INCLUDE RPT_FLDS.INST_KEY
	RPT_FLDS.HTLFLDS.SEQ_NO RPT_FLDS.HTLFLDS.PASSENGER RPT_FLDS.HTLFLDS.CHAIN_CODE
	RPT_FLDS.HTLFLDS.HTL_CITY RPT_FLDS.HTLFLDS.REFUSE_CODE FROM CopyTo9(CNT)

	ENDREPEAT CNT = CNT + 1;

	COMMIT;                                                                      
ENDCASE

CASE DEF_RPTSTK
	INFER RPT_FLDS.INST_KEY RPT_FLDS.COMMON1.INCL1     INTO CopyFrom2 ;
	INFER RPT_FLDS.INST_KEY RPT_FLDS.COMMON2.SEQ_NO    INTO CopyFrom3 ;
	
	INFER RPT_FLDS.INST_KEY RPT_FLDS.COMMON1.INCL1     INTO CopyTo2 ;
	INFER RPT_FLDS.INST_KEY RPT_FLDS.COMMON2.SEQ_NO    INTO CopyTo3 ;
	
	INFER RPT_FLDS.INST_KEY RPT_FLDS.AIR.INCL1         INTO CopyFrom4 ;
	INFER RPT_FLDS.INST_KEY RPT_FLDS.AIRFLDS.SEQ_NO    INTO CopyFrom5 ;

	INFER RPT_FLDS.INST_KEY RPT_FLDS.AIR.INCL1         INTO CopyTo4 ;
	INFER RPT_FLDS.INST_KEY RPT_FLDS.AIRFLDS.SEQ_NO    INTO CopyTo5 ;
	
	INFER RPT_FLDS.INST_KEY RPT_FLDS.CAR.INCL1         INTO CopyFrom6 ;
	INFER RPT_FLDS.INST_KEY RPT_FLDS.CARFLDS.SEQ_NO    INTO CopyFrom7 ;

	INFER RPT_FLDS.INST_KEY RPT_FLDS.CAR.INCL1         INTO CopyTo6 ;
	INFER RPT_FLDS.INST_KEY RPT_FLDS.CARFLDS.SEQ_NO    INTO CopyTo7 ;
	
	INFER RPT_FLDS.INST_KEY RPT_FLDS.HTL.INCL1         INTO CopyFrom8 ;
	INFER RPT_FLDS.INST_KEY RPT_FLDS.HTLFLDS.SEQ_NO    INTO CopyFrom9 ;

	INFER RPT_FLDS.INST_KEY RPT_FLDS.HTL.INCL1         INTO CopyTo8 ;
	INFER RPT_FLDS.INST_KEY RPT_FLDS.HTLFLDS.SEQ_NO    INTO CopyTo9 ;
ENDCASE

END
-RUN
-EXIT
