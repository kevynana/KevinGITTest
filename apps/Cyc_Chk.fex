-* File CYC_CHK.FEX
-*
-*****   This routine checks the Report Queue DB for any scheduled
-*****     reports to be run, and sets the INSTPASS parameters accordingly.
-*****   AUTHOR:  Dave Kuzanek
-*****   PRODUCTION DATE:
-**********************************************************************
-*DATE           NAME               DESCRIPTION
-*9/11/00      IBISTL-RJ            Removed the show Form1 code.  There 
-*                                  are not Winforms for this subroutine. 
-*9/20/00     IBISTL-jyn            Evaluated the RPT_QUE table instead the 
-*				    RPT_INST table.  Will no longer by user
-*                                  based.  Control file is not needed.
-*10/10/00    IBISTL-RJ             ADDED CODE FOR THE ZIPPING OF THE 
-*                                  REPORT SETS AND FOR REPORT BROKER. 
-*10/21/03    LCI-LS                Made changes as SU databases' changes
-**********************************************************************

MAINTAIN FILE BRPT_QUE AND BRPT_SET AND BRPTINST AND BROLLUP  
-*AND BI_SUMM

CASE TOP
COMPUTE Cnt1/I5 = ;
-*COMPUTE In_Pm/A72 = ;
COMPUTE In_Pm/I7 = ;
COMPUTE Ti_Pm/A18 = ;
-*COMPUTE Ix_Pm/A22 = ;
COMPUTE St_Pm/A8 = ;
COMPUTE Se_Pm/A8 = ;
COMPUTE Rp_Pm/A3 = ;
COMPUTE Rt_Pm/A50 = ;
COMPUTE Sn_Pm/A40 = ;
COMPUTE Sq/A4 = ;
COMPUTE Sq_Pm/A4 = ;
COMPUTE Sr_pm/A1 = ;
-*10/10/00    IBISTL-RJ             ADDED CODE FOR THE ZIPPING OF THE 
-*                                  REPORT SETS AND FOR REPORT BROKER. 
COMPUTE Ot_Pm/A10 = ;
COMPUTE Zp_Pm/A1 = ;
COMPUTE Cm_Pm/A8 = ;
COMPUTE Us_Pm/A20 = ;
-*COMPUTE Sk_Pm/A30 = ;
COMPUTE Sk_Pm/I7 = ;
COMPUTE Out_To/A2 =;
-*
COMPUTE Cyc_Queue.Roll_Seq/I6 =;
COMPUTE Cyc_Queue.Rpt_Seq/I6 = ;
COMPUTE Cyc_Queue.Set_Seq/I6 = ;
COMPUTE Cyc_Queue.Inst_Key/I7 = ;
COMPUTE Cyc_Queue.Rpt_Stream/A8 = ;
COMPUTE Cyc_Queue.Global_Parm/A8 = ;
COMPUTE Cyc_Queue.Rpt_Type/A3 = ;
COMPUTE Cyc_Queue.Rpt_Name/A50 = ;
COMPUTE Cyc_Queue.Set_Name/A40 = ;
COMPUTE Cyc_Queue.Ex_Flag/A1 = ;
-*COMPUTE Cyc_Queue.Insid/A22 = ;
COMPUTE Cyc_Queue.Screen/A1 = ;
-*10/10/00    IBISTL-RJ             ADDED CODE FOR THE ZIPPING OF THE 
-*                                  REPORT SETS AND FOR REPORT BROKER. 
COMPUTE Cyc_Queue.Out_Fmt/A10 = ;
COMPUTE Cyc_Queue.Zip_Flag/A1 = ; 
COMPUTE Cyc_Queue.Rollup_Code/A8 = ;
COMPUTE Cyc_Queue.User_ID/A20 = ;
-*COMPUTE Cyc_Queue.Set_Key/A30 = ;
COMPUTE Cyc_Queue.Set_Key/I7 = ;
COMPUTE Cyc_Queue.OutTO/A2 = ;
COMPUTE Cyc_Queue.INTIME/18=;
-*
  
  REPOSITION BRPT_QUE.INST_KEY
  FOR ALL NEXT BRPT_QUE.INST_KEY INTO RQ_STACK
-* REJ    WHERE (BRPT_QUE.EX_FLAG EQ 'Y') 
  
  STACK CLEAR Cyc_Queue
  STACK CLEAR RI_Stack
  STACK CLEAR RS_Stack
  STACK CLEAR ROLL_STACK

  COMPUTE Cnt1 = 1;
  REPEAT WHILE Cnt1 LE RQ_STACK.FocCount
-*  10/30/00  IBISTL-RJ  ADDED CODE TO CHECK FOR UPDATE STATUS IN ROLLUP
    REPOSITION ROLLUP.ROLLUP_CODE  
    NEXT ROLLUP.ROLLUP_CODE INTO ROLL_STACK
      WHERE ROLLUP.ROLLUP_CODE EQ RQ_STACK(Cnt1).ROLLUP_CODE
    IF ROLL_STACK().UPD_STAT EQ 'X'
      BEGIN
        COMPUTE Cnt1 = Cnt1 + 1;
        GOTO ENDREPEAT
      ENDBEGIN
-*
-*    REPOSITION BI_SUMM.INST_KEY 
-*    NEXT BI_SUMM.INST_KEY INTO IS_STACK
-*      WHERE BI_SUMM.INST_KEY EQ RQ_STACK(Cnt1).INST_KEY

    REPOSITION BRPTINST.INST_KEY 
    NEXT BRPTINST.INST_KEY BRPTINST.SETTINGS.ID INTO RI_STACK
      WHERE BRPTINST.INST_KEY EQ RQ_STACK(Cnt1).INST_KEY

    REPOSITION BRPT_SET.SET_KEY
    NEXT BRPT_SET.SET_KEY INTO RS_Stack
      WHERE BRPT_SET.SET_KEY EQ RI_STACK().SET_KEY

    COMPUTE Cyc_Queue(Cnt1).Ex_Flag     = RQ_STACK(Cnt1).EX_FLAG;
    COMPUTE Cyc_Queue(Cnt1).Roll_Seq    = RQ_STACK(Cnt1).Roll_SEQ;
    COMPUTE Cyc_Queue(Cnt1).Rpt_Seq     = RQ_STACK(Cnt1).RPT_SEQ;
    COMPUTE Cyc_Queue(Cnt1).Set_Seq     = RQ_Stack(Cnt1).SET_SEQ;
    COMPUTE Cyc_Queue(Cnt1).Inst_Key    = RQ_STACK(Cnt1).INST_KEY;
-*    COMPUTE Cyc_Queue(Cnt1).Rpt_Stream  = RQ_STACK(Cnt1).RPT_STREAM;
-*    COMPUTE Cyc_Queue(Cnt1).Global_Parm = RQ_STACK(Cnt1).GLOBAL_PARM;
-*    COMPUTE Cyc_Queue(Cnt1).Rpt_Type    = RQ_STACK(Cnt1).RPT_TYPE;
    COMPUTE Cyc_Queue(Cnt1).Rpt_Stream  = RI_STACK(Cnt1).RPT_STREAM;
    COMPUTE Cyc_Queue(Cnt1).Global_Parm = RI_STACK(Cnt1).GLOBAL_PARM;
    COMPUTE Cyc_Queue(Cnt1).Rpt_Type    = RI_STACK(Cnt1).RPT_TYPE;

    COMPUTE Cyc_Queue(Cnt1).Rpt_Name    = RQ_STACK(Cnt1).RPT_NAME;
    cOMPUTE Cyc_Queue(Cnt1).INTIME      = RQ_STACK(Cnt1).INTIME;
    COMPUTE Cyc_Queue(Cnt1).Set_Name    = RS_Stack().SET_NAME;
-*10/10/00    IBISTL-RJ             ADDED CODE FOR THE ZIPPING OF THE 
-*                                  REPORT SETS AND FOR REPORT BROKER. 
    COMPUTE Cyc_Queue(Cnt1).Zip_Flag    = RS_Stack().ZIP_FLAG;
    COMPUTE Cyc_Queue(Cnt1).Out_Fmt     = RI_Stack().OUTPUT_FORMAT;
-*    COMPUTE Cyc_Queue(Cnt1).Rollup_Code = RI_Stack().ROLLUP_CODE;
   COMPUTE Cyc_Queue(Cnt1).Rollup_Code = 
     if RI_Stack().ROLLUP_CODE NE ' ' then RI_Stack().ROLLUP_CODE
     else if RI_STACK(Cnt1).ROLLUP_CODE NE ' ' then RI_STACK(Cnt1).ROLLUP_CODE
     else RS_Stack().ROLLUP_CODE;
 
   
    COMPUTE Cyc_Queue(Cnt1).User_Id     = RQ_Stack(Cnt1).USER_NAME;
    COMPUTE Cyc_Queue(Cnt1).Set_Key     = RS_Stack().SET_KEY;
    COMPUTE Cyc_Queue(Cnt1).OutTo       = 
         IF RI_Stack().DISTRB_FLAG EQ ' ' THEN 'T'
                                          ELSE RI_Stack().DISTRB_FLAG;
-*    COMPUTE Cyc_Queue(Cnt1).Insid       = RI_Stack().INSTANCE_ID;
-*??? COMPUTE Cyc_Queue(Cnt1).Screen      = IS_Stack().SCREEN;
-*

    COMPUTE Cnt1 = Cnt1 + 1;
  ENDREPEAT

  STACK SORT Cyc_Queue BY INTIME BY Roll_Seq BY Set_Seq BY Rpt_Seq BY Inst_Key 

  IF Cyc_Queue.FocCount GT 0 THEN
  BEGIN
    COMPUTE In_Pm = Cyc_Queue(1).Inst_Key;
    COMPUTE St_Pm = Cyc_Queue(1).Rpt_Stream;
    COMPUTE Se_Pm = Cyc_Queue(1).Global_Parm;
    COMPUTE Rp_Pm = Cyc_Queue(1).Rpt_Type;
    COMPUTE Rt_Pm = Cyc_Queue(1).Rpt_Name;
    COMPUTE Sn_Pm = Cyc_Queue(1).Set_Name;
-*10/10/00    IBISTL-RJ             ADDED CODE FOR THE ZIPPING OF THE 
-*                                  REPORT SETS AND FOR REPORT BROKER. 
    COMPUTE Ot_Pm = Cyc_Queue(1).Out_Fmt;
    COMPUTE Zp_Pm = IF Cyc_Queue(1).Zip_Flag EQ '' THEN 'N' 
       ELSE Cyc_Queue(1).Zip_Flag;
    COMPUTE Cm_Pm = Cyc_Queue(1).Rollup_Code;
    COMPUTE Us_Pm = Cyc_Queue(1).User_Id;
    COMPUTE Sk_Pm = Cyc_Queue(1).Set_Key;
-*    COMPUTE Ix_Pm = Cyc_Queue(1).Insid ;
    COMPUTE Sr_Pm = Cyc_Queue(1).Screen ;
    COMPUTE Out_To = Cyc_Queue(1).OutTo ;
    COMPUTE Ti_PM = cyc_Queue(1).INTIME;
-*
    COMPUTE Sq_Pm = Cyc_Queue.FocCount - 1;

-* REJ    PERFORM Upd_Queue
-* REJ    PERFORM Upd_Inst
    TYPE ON INSTPASS
"<St_Pm <9 <Se_Pm <17 <Rp_Pm <20 <In_Pm <27 <Rt_Pm <77 <Sn_Pm" |
"<117 <Ot_Pm <127 <Cm_Pm <135 <Us_Pm <155 <Sk_Pm" |
"<162 <Out_To <164 <Zp_Pm <165 <Ti_PM";

-*"<St_Pm <9 <Se_Pm <17 <Rp_Pm <20 <In_Pm <92 <Rt_Pm <142 <Sn_Pm" |
-*"<182 <Ot_Pm <192 <Cm_Pm <200 <Us_Pm <220 <Sk_Pm" |
-*"<250 <Out_To <252 <Zp_Pm <253 <Ix_Pm <275 <Sr_Pm <276 <Ti_PM";
    GOTO END RESET
  ENDBEGIN
  ELSE
  BEGIN
    TYPE ON INSTPASS "xxxxxxxx"
    GOTO END RESET
  ENDBEGIN
ENDCASE

CASE Upd_Queue
  COMPUTE Cnt1 = 1;
  REPEAT WHILE Cnt1 LE RQ_STACK.FocCount
    IF RQ_STACK(Cnt1).INST_KEY EQ Cyc_Queue(1).Inst_Key THEN
    BEGIN
      GOTO EXITREPEAT
    ENDBEGIN
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDREPEAT
  COMPUTE RQ_STACK(Cnt1).EX_FLAG = 'N';
  UPDATE BRPT_QUE.EX_FLAG FROM RQ_STACK(Cnt1)
  COMMIT
ENDCASE

CASE Upd_Inst
  STACK CLEAR RI_STACK
  REPOSITION BRPTINST.INST_KEY  
  NEXT BRPTINST.INST_KEY BRPTINST.SETTINGS.ID INTO RI_STACK
      WHERE BRPTINST.INST_KEY EQ Cyc_Queue(1).INST_KEY
  COMPUTE RI_STACK().EXECUTE_FLAG = 'N';
  UPDATE BRPTINST.EXECUTE_FLAG FROM RI_STACK()
  COMMIT
ENDCASE

END
