-*****************THIS HEADER REPRESENTS THE 80 CHARACTER MAXIUM FOR PROGRAMS**
-*  7/2/04  DEB  ASSOCIATED WITH TOTAL COMPANY REPORTING TRAVEL SUMMARY


-* File EXECMAI2.FEX
MAINTAIN FILES TC1_MAIN AND TC_TKTP1

INFER TC1_MAIN.CATEGORY INTO E_STACK
INFER TC_TKTP1.CDM1NET_AMT INTO TKTP1_STACK

COMPUTE E_STACK(1).CATEGORY = 'Air';
        E_STACK(2).CATEGORY = 'Air';
        E_STACK(3).CATEGORY = 'Air';
        E_STACK(4).CATEGORY = 'Air';
        E_STACK(5).CATEGORY = 'Air';
        E_STACK(6).CATEGORY = 'Air';
        E_STACK(7).CATEGORY = 'Air';
        E_STACK(8).CATEGORY = 'Air';
        E_STACK(9).CATEGORY = 'Air';
        E_STACK(10).CATEGORY = 'Air';
        E_STACK(11).CATEGORY = 'Performance';
        E_STACK(12).CATEGORY = 'Performance';
        E_STACK(13).CATEGORY = 'Performance';
        E_STACK(1).ROW_LABEL = 'Air Volume';
        E_STACK(2).ROW_LABEL = 'Taxes/Charges';
        E_STACK(3).ROW_LABEL = 'Airline Fees';
        E_STACK(4).ROW_LABEL = 'Net Volume';
        E_STACK(5).ROW_LABEL = 'Tickets Issued';
        E_STACK(6).ROW_LABEL = 'Full Refunds';
        E_STACK(7).ROW_LABEL = 'Tickets Voided';
        E_STACK(8).ROW_LABEL = 'Full Exchanges';
        E_STACK(9).ROW_LABEL = 'Net Tickets';
        E_STACK(10).ROW_LABEL = 'Average Ticket Cost';
        E_STACK(11).ROW_LABEL = 'Lost Savings';
        E_STACK(12).ROW_LABEL = 'Lost Savings %';
        E_STACK(13).ROW_LABEL = 'Contract Savings';
        E_STACK(1).CAT_ORDER = '1';
        E_STACK(2).CAT_ORDER = '1';
        E_STACK(3).CAT_ORDER = '1';
        E_STACK(4).CAT_ORDER = '1';
        E_STACK(5).CAT_ORDER = '1';
        E_STACK(6).CAT_ORDER = '1';
        E_STACK(7).CAT_ORDER = '1';
        E_STACK(8).CAT_ORDER = '1';
        E_STACK(9).CAT_ORDER = '1';
        E_STACK(10).CAT_ORDER = '1';
        E_STACK(11).CAT_ORDER = '2';
        E_STACK(12).CAT_ORDER = '2';
        E_STACK(13).CAT_ORDER = '2';
        E_STACK(1).ROW_ORDER = '1'; -* THESE NEED TO BE PARAMETERS
        E_STACK(2).ROW_ORDER = '2'; -* SO THAT WE CAN SORT HOWEVER 
        E_STACK(3).ROW_ORDER = '4'; -* THE CLIENT WOULD LIKE TO SEE
        E_STACK(4).ROW_ORDER = '3';
        E_STACK(5).ROW_ORDER = '5';
        E_STACK(6).ROW_ORDER = '6';
        E_STACK(7).ROW_ORDER = '7';
        E_STACK(8).ROW_ORDER = '8';
        E_STACK(9).ROW_ORDER = '9';
        E_STACK(10).ROW_ORDER = '10';
        E_STACK(11).ROW_ORDER = '1';
        E_STACK(12).ROW_ORDER = '2';
        E_STACK(13).ROW_ORDER = '3';
        CNT1/I2 = 0;


-* IF A_STACK.FOCCOUNT EQ 0 THEN GOTO EXITREPEAT

COMPUTE CNT1 = 1;
-* REPEAT WHILE CNT1 LE A_STACK.FOCCOUNT

REPEAT ALL
 STACK CLEAR TKTP1_STACK
 NEXT TC_TKTP1.CDM1NET_AMT INTO TKTP1_STACK
 
TYPE "LOADING STACKS"
 IF TKTP1_STACK.FOCCOUNT EQ 0 THEN GOTO EXITREPEAT

-*NEW CASES   
    PERFORM NET_VOLUME
    PERFORM TAX_AMOUNT 
    PERFORM AIR_FEE
    PERFORM AIR_VOLUME
    PERFORM TKT_ISS
    PERFORM REF_ISS
    PERFORM VOD_ISS
    PERFORM EXG_ISS
-*    PERFORM TOT_TRANS
    PERFORM NET_TKTS
    PERFORM AVG_COST
-*    PERFORM AVG_MILE
-*    PERFORM SAV_INFO
-*    PERFORM SAV_PERCENT
    PERFORM LOST_INFO
    PERFORM LOS_PERCENT
    PERFORM VAS_INFO

ENDREPEAT

FOR ALL INCLUDE TC1_MAIN.DOM_CURR FROM E_STACK
COMMIT
-****************************
CASE NET_VOLUME

TYPE "NET_VOLUME"
-* MONTHLY CALCULATIONS
-* DOMESTIC CALCULATIONS FOR NET VOLUME COLUMNS

COMPUTE 
 E_STACK(4).DOM_CURR = E_STACK(4).DOM_CURR
                       + (TKTP1_STACK(CNT1).CDM1NET_AMT); 
                                              
 E_STACK(4).DOM_PRIOR = E_STACK(4).DOM_PRIOR
                        + (TKTP1_STACK(CNT1).PDM1NET_AMT); 
                                                

-* INTERNATIONAL CALCULATIONS FOR NET VOLUME COLUMNS

E_STACK(4).INT_CURR = E_STACK(4).INT_CURR
                      + (TKTP1_STACK(CNT1).CIM1NET_AMT); 
                                              
E_STACK(4).INT_PRIOR = E_STACK(4).INT_PRIOR
                       + (TKTP1_STACK(CNT1).PIM1NET_AMT); 
                                              

-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR NET VOLUME COLUMNS

E_STACK(4).DI_CURR = E_STACK(4).DOM_CURR + E_STACK(4).INT_CURR;
E_STACK(4).DI_PRIOR = E_STACK(4).DOM_PRIOR + E_STACK(4).INT_PRIOR;



-************

-* YEAR TO DATE CALCULATIONS
-* DOMESTIC CALCULATIONS FOR NET VOLUME COLUMNS

E_STACK(4).DYTD_CURR = E_STACK(4).DYTD_CURR
                       + (TKTP1_STACK(CNT1).CDY1NET_AMT); 
                                               
E_STACK(4).DYTD_PRIOR = E_STACK(4).DYTD_PRIOR
                        + (TKTP1_STACK(CNT1).PDY1NET_AMT); 
                                                

-* INTERNATIONAL CALCULATIONS FOR NET VOLUME COLUMNS

E_STACK(4).IYTD_CURR = E_STACK(4).IYTD_CURR
                       + (TKTP1_STACK(CNT1).CIY1NET_AMT); 
                                               
E_STACK(4).IYTD_PRIOR = E_STACK(4).IYTD_PRIOR
                        + (TKTP1_STACK(CNT1).PIY1NET_AMT); 
                                                


-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR NET VOLUME COLUMNS

E_STACK(4).DIYTD_CURR = E_STACK(4).DYTD_CURR + E_STACK(4).IYTD_CURR;
E_STACK(4).DIYTD_PRIOR = E_STACK(4).DYTD_PRIOR + E_STACK(4).IYTD_PRIOR;


ENDCASE
-****************************

CASE TAX_AMOUNT
TYPE "TAX_AMOUNT"

-* MONTHLY CALCULATIONS
-* DOMESTIC CALCULATIONS FOR TAX AMOUNT COLUMNS

COMPUTE 
 E_STACK(2).DOM_CURR = E_STACK(2).DOM_CURR
                       + (TKTP1_STACK(CNT1).CDM1TAX_AMT); 
                                               
 E_STACK(2).DOM_PRIOR = E_STACK(2).DOM_PRIOR
                        + (TKTP1_STACK(CNT1).PDM1TAX_AMT); 
                        


-* INTERNATIONAL CALCULATIONS FOR TAX AMOUNT COLUMNS

E_STACK(2).INT_CURR = E_STACK(2).INT_CURR
                      + (TKTP1_STACK(CNT1).CIM1TAX_AMT); 
                       
E_STACK(2).INT_PRIOR = E_STACK(2).INT_PRIOR
                       + (TKTP1_STACK(CNT1).PIM1TAX_AMT); 
                       


-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR TAX AMOUNT COLUMNS

E_STACK(2).DI_CURR = E_STACK(2).DOM_CURR + E_STACK(2).INT_CURR;
E_STACK(2).DI_PRIOR = E_STACK(2).DOM_PRIOR + E_STACK(2).INT_PRIOR;


-************

-* YEAR TO DATE CALCULATIONS
-* DOMESTIC CALCULATIONS FOR TAX AMOUNT COLUMNS

E_STACK(2).DYTD_CURR = E_STACK(2).DYTD_CURR
                       + (TKTP1_STACK(CNT1).CDY1TAX_AMT); 
                        
E_STACK(2).DYTD_PRIOR = E_STACK(2).DYTD_PRIOR
                        + (TKTP1_STACK(CNT1).PDY1TAX_AMT); 
                                                


-* INTERNATIONAL CALCULATIONS FOR TAX AMOUNT COLUMNS

E_STACK(2).IYTD_CURR = E_STACK(2).IYTD_CURR
                       + (TKTP1_STACK(CNT1).CIY1TAX_AMT); 
                       
E_STACK(2).IYTD_PRIOR = E_STACK(2).IYTD_PRIOR
                        + (TKTP1_STACK(CNT1).PIY1TAX_AMT); 
                        


-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR TAX AMOUNT COLUMNS

E_STACK(2).DIYTD_CURR = E_STACK(2).DYTD_CURR + E_STACK(2).IYTD_CURR;
E_STACK(2).DIYTD_PRIOR = E_STACK(2).DYTD_PRIOR + E_STACK(2).IYTD_PRIOR;

ENDCASE
-****************************

CASE AIR_FEE
TYPE "AIR_FEE"

-* MONTHLY CALCULATIONS
-* DOMESTIC CALCULATIONS FOR AIRLINE FEE COLUMNS

COMPUTE 
 E_STACK(3).DOM_CURR = E_STACK(3).DOM_CURR
                       + TKTP1_STACK(CNT1).CDM1AIR_FEE;
                       
 E_STACK(3).DOM_PRIOR = E_STACK(3).DOM_PRIOR
                       + TKTP1_STACK(CNT1).PDM1AIR_FEE;
                         

-* INTERNATIONAL CALCULATIONS FOR AIRLINE FEE COLUMNS

E_STACK(3).INT_CURR = E_STACK(3).INT_CURR
                      + TKTP1_STACK(CNT1).CIM1AIR_FEE;  
E_STACK(3).INT_PRIOR = E_STACK(3).INT_PRIOR
                      + TKTP1_STACK(CNT1).PIM1AIR_FEE;                        


-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR AIRLINE FEE COLUMNS

E_STACK(3).DI_CURR = E_STACK(3).DOM_CURR + E_STACK(3).INT_CURR;
E_STACK(3).DI_PRIOR = E_STACK(3).DOM_PRIOR + E_STACK(3).INT_PRIOR;


-************

-* YEAR TO DATE CALCULATIONS
-* DOMESTIC CALCULATIONS FOR AIRLINE FEE COLUMNS

E_STACK(3).DYTD_CURR = E_STACK(3).DYTD_CURR
                       + TKTP1_STACK(CNT1).CDY1AIR_FEE;                      
E_STACK(3).DYTD_PRIOR = E_STACK(3).DYTD_PRIOR
                       + TKTP1_STACK(CNT1).PDY1AIR_FEE;                        


-* INTERNATIONAL CALCULATIONS FOR AIRLINE FEE COLUMNS

E_STACK(3).IYTD_CURR = E_STACK(3).IYTD_CURR
                       + TKTP1_STACK(CNT1).CIY1AIR_FEE;                      
E_STACK(3).IYTD_PRIOR = E_STACK(3).IYTD_PRIOR
                       + TKTP1_STACK(CNT1).PIY1AIR_FEE;                        


-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR AIRLINE FEE COLUMNS

E_STACK(3).DIYTD_CURR = E_STACK(3).DYTD_CURR + E_STACK(3).IYTD_CURR;
E_STACK(3).DIYTD_PRIOR = E_STACK(3).DYTD_PRIOR + E_STACK(3).IYTD_PRIOR;


ENDCASE
-****************************

CASE AIR_VOLUME
TYPE "AIR_VOLUME"

-* MONTHLY CALCULATIONS
-* DOMESTIC CALCULATIONS FOR AIR VOLUME COLUMNS

COMPUTE 
 E_STACK(1).DOM_CURR = E_STACK(2).DOM_CURR
                     + E_STACK(4).DOM_CURR; 
                       
 E_STACK(1).DOM_PRIOR = E_STACK(2).DOM_PRIOR
                      + E_STACK(4).DOM_PRIOR; 


-* INTERNATIONAL CALCULATIONS FOR AIR VOLUME COLUMNS

E_STACK(1).INT_CURR = E_STACK(2).INT_CURR
                    + E_STACK(4).INT_CURR;
                      
E_STACK(1).INT_PRIOR = E_STACK(2).INT_PRIOR
                     + E_STACK(4).INT_PRIOR; 
                       


-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR AIR VOLUME COLUMNS

E_STACK(1).DI_CURR = E_STACK(1).DOM_CURR + E_STACK(1).INT_CURR;
E_STACK(1).DI_PRIOR = E_STACK(1).DOM_PRIOR + E_STACK(1).INT_PRIOR;


-************

-* YEAR TO DATE CALCULATIONS
-* DOMESTIC CALCULATIONS FOR AIR VOLUME COLUMNS

E_STACK(1).DYTD_CURR = E_STACK(2).DYTD_CURR
                     + E_STACK(4).DYTD_CURR; 
                       
E_STACK(1).DYTD_PRIOR = E_STACK(2).DYTD_PRIOR
                      + E_STACK(4).DYTD_PRIOR;
                        


-* INTERNATIONAL CALCULATIONS FOR AIR VOLUME COLUMNS

E_STACK(1).IYTD_CURR = E_STACK(2).IYTD_CURR
                     + E_STACK(4).IYTD_CURR; 
                       
E_STACK(1).IYTD_PRIOR = E_STACK(2).IYTD_PRIOR
                      + E_STACK(4).IYTD_PRIOR; 
                        

-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR AIR VOLUME COLUMNS

E_STACK(1).DIYTD_CURR = E_STACK(1).DYTD_CURR + E_STACK(1).IYTD_CURR;
E_STACK(1).DIYTD_PRIOR = E_STACK(1).DYTD_PRIOR + E_STACK(1).IYTD_PRIOR;


ENDCASE
-****************************

CASE TKT_ISS
TYPE "TKT_ISS"

-* MONTHLY CALCULATIONS
-* DOMESTIC CALCULATIONS FOR TICKETS ISSUED COLUMNS

COMPUTE 
 E_STACK(5).DOM_CURR = E_STACK(5).DOM_CURR
                       + TKTP1_STACK(CNT1).CDM1TKT_ISS; 
                       
 E_STACK(5).DOM_PRIOR = E_STACK(5).DOM_PRIOR
                        + TKTP1_STACK(CNT1).PDM1TKT_ISS; 
                         


-* INTERNATIONAL CALCULATIONS FOR TICKETS ISSUED COLUMNS

E_STACK(5).INT_CURR = E_STACK(5).INT_CURR
                      + TKTP1_STACK(CNT1).CIM1TKT_ISS; 

E_STACK(5).INT_PRIOR = E_STACK(5).INT_PRIOR
                       + TKTP1_STACK(CNT1).PIM1TKT_ISS; 
                      


-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR TICKETS ISSUED COLUMNS

E_STACK(5).DI_CURR = E_STACK(5).DOM_CURR + E_STACK(5).INT_CURR;
E_STACK(5).DI_PRIOR = E_STACK(5).DOM_PRIOR + E_STACK(5).INT_PRIOR;


-************

-* YEAR TO DATE CALCULATIONS
-* DOMESTIC CALCULATIONS FOR TICKETS ISSUED COLUMNS

E_STACK(5).DYTD_CURR = E_STACK(5).DYTD_CURR
                       + TKTP1_STACK(CNT1).CDY1TKT_ISS; 
                      
E_STACK(5).DYTD_PRIOR = E_STACK(5).DYTD_PRIOR
                        + TKTP1_STACK(CNT1).PDY1TKT_ISS; 
                       


-* INTERNATIONAL CALCULATIONS FOR TICKETS ISSUED COLUMNS

E_STACK(5).IYTD_CURR = E_STACK(5).IYTD_CURR
                       + TKTP1_STACK(CNT1).CIY1TKT_ISS; 
                      
E_STACK(5).IYTD_PRIOR = E_STACK(5).IYTD_PRIOR
                        + TKTP1_STACK(CNT1).PIY1TKT_ISS; 
                       


-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR TICKETS ISSUED COLUMNS

E_STACK(5).DIYTD_CURR = E_STACK(5).DYTD_CURR + E_STACK(5).IYTD_CURR;
E_STACK(5).DIYTD_PRIOR = E_STACK(5).DYTD_PRIOR + E_STACK(5).IYTD_PRIOR;


ENDCASE
-****************************

CASE REF_ISS
TYPE "REF_ISS"

-* MONTHLY CALCULATIONS
-* DOMESTIC CALCULATIONS FOR REFUNDS ISSUED COLUMNS

COMPUTE 
 E_STACK(6).DOM_CURR = E_STACK(6).DOM_CURR
                       + (TKTP1_STACK(CNT1).CDM1REF_ISS); 
                       
 E_STACK(6).DOM_PRIOR = E_STACK(6).DOM_PRIOR
                        + (TKTP1_STACK(CNT1).PDM1REF_ISS); 
                        


-* INTERNATIONAL CALCULATIONS FOR REFUNDS ISSUED COLUMNS

E_STACK(6).INT_CURR = E_STACK(6).INT_CURR
                      + (TKTP1_STACK(CNT1).CIM1REF_ISS); 
  
E_STACK(6).INT_PRIOR = E_STACK(6).INT_PRIOR
                       + (TKTP1_STACK(CNT1).PIM1REF_ISS); 
                       


-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR REFUNDS ISSUED COLUMNS

E_STACK(6).DI_CURR = E_STACK(6).DOM_CURR + E_STACK(6).INT_CURR;
E_STACK(6).DI_PRIOR = E_STACK(6).DOM_PRIOR + E_STACK(6).INT_PRIOR;


-************

-* YEAR TO DATE CALCULATIONS
-* DOMESTIC CALCULATIONS FOR REFUNDS ISSUED COLUMNS

E_STACK(6).DYTD_CURR = E_STACK(6).DYTD_CURR
                       + (TKTP1_STACK(CNT1).CDY1REF_ISS); 
                       
E_STACK(6).DYTD_PRIOR = E_STACK(6).DYTD_PRIOR
                        + (TKTP1_STACK(CNT1).PDY1REF_ISS); 
                        


-* INTERNATIONAL CALCULATIONS FOR REFUNDS ISSUED COLUMNS

E_STACK(6).IYTD_CURR = E_STACK(6).IYTD_CURR
                       + (TKTP1_STACK(CNT1).CIY1REF_ISS); 
                       
E_STACK(6).IYTD_PRIOR = E_STACK(6).IYTD_PRIOR
                        + (TKTP1_STACK(CNT1).PIY1REF_ISS); 
                        

-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR REFUNDS ISSUED COLUMNS

E_STACK(6).DIYTD_CURR = E_STACK(6).DYTD_CURR + E_STACK(6).IYTD_CURR;
E_STACK(6).DIYTD_PRIOR = E_STACK(6).DYTD_PRIOR + E_STACK(6).IYTD_PRIOR;


ENDCASE
-****************************

CASE VOD_ISS
TYPE "VOD_ISS"

-* MONTHLY CALCULATIONS
-* DOMESTIC CALCULATIONS FOR VOIDS ISSUED COLUMNS

COMPUTE 
 E_STACK(7).DOM_CURR = E_STACK(7).DOM_CURR
                       + (TKTP1_STACK(CNT1).CDM1VOD_ISS); 
                       
 E_STACK(7).DOM_PRIOR = E_STACK(7).DOM_PRIOR
                        + (TKTP1_STACK(CNT1).PDM1VOD_ISS); 
                        


-* INTERNATIONAL CALCULATIONS FOR VOIDS ISSUED COLUMNS

E_STACK(7).INT_CURR = E_STACK(7).INT_CURR
                      + (TKTP1_STACK(CNT1).CIM1VOD_ISS); 
  
E_STACK(7).INT_PRIOR = E_STACK(7).INT_PRIOR
                       + (TKTP1_STACK(CNT1).PIM1VOD_ISS); 
                       


-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR VOIDS ISSUED COLUMNS

E_STACK(7).DI_CURR = E_STACK(7).DOM_CURR + E_STACK(7).INT_CURR;
E_STACK(7).DI_PRIOR = E_STACK(7).DOM_PRIOR + E_STACK(7).INT_PRIOR;


-************

-* YEAR TO DATE CALCULATIONS
-* DOMESTIC CALCULATIONS FOR VOIDS ISSUED COLUMNS

E_STACK(7).DYTD_CURR = E_STACK(7).DYTD_CURR
                       + (TKTP1_STACK(CNT1).CDY1VOD_ISS); 
                       
E_STACK(7).DYTD_PRIOR = E_STACK(7).DYTD_PRIOR
                        + (TKTP1_STACK(CNT1).PDY1VOD_ISS); 
                        


-* INTERNATIONAL CALCULATIONS FOR VOIDS ISSUED COLUMNS

E_STACK(7).IYTD_CURR = E_STACK(7).IYTD_CURR
                       + (TKTP1_STACK(CNT1).CIY1VOD_ISS); 
                       
E_STACK(7).IYTD_PRIOR = E_STACK(7).IYTD_PRIOR
                        + (TKTP1_STACK(CNT1).PIY1VOD_ISS); 
                        


-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR VOIDS ISSUED COLUMNS

E_STACK(7).DIYTD_CURR = E_STACK(7).DYTD_CURR + E_STACK(7).IYTD_CURR;
E_STACK(7).DIYTD_PRIOR = E_STACK(7).DYTD_PRIOR + E_STACK(7).IYTD_PRIOR;

ENDCASE
-****************************

CASE EXG_ISS
TYPE "EXG_ISS"

-* MONTHLY CALCULATIONS
-* DOMESTIC CALCULATIONS FOR EXCHANGES ISSUED COLUMNS

COMPUTE 
 E_STACK(8).DOM_CURR = E_STACK(8).DOM_CURR
                       + (TKTP1_STACK(CNT1).CDM1EXG_ISS); 
                       
 E_STACK(8).DOM_PRIOR = E_STACK(8).DOM_PRIOR
                        + (TKTP1_STACK(CNT1).PDM1EXG_ISS); 
                        

-* INTERNATIONAL CALCULATIONS FOR EXCHANGES ISSUED COLUMNS

E_STACK(8).INT_CURR = E_STACK(8).INT_CURR
                      + (TKTP1_STACK(CNT1).CIM1EXG_ISS); 
  
E_STACK(8).INT_PRIOR = E_STACK(8).INT_PRIOR
                       + (TKTP1_STACK(CNT1).PIM1EXG_ISS); 
                       


-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR EXCHANGES ISSUED COLUMNS

E_STACK(8).DI_CURR = E_STACK(8).DOM_CURR + E_STACK(8).INT_CURR;
E_STACK(8).DI_PRIOR = E_STACK(8).DOM_PRIOR + E_STACK(8).INT_PRIOR;

-************

-* YEAR TO DATE CALCULATIONS
-* DOMESTIC CALCULATIONS FOR EXCHANGES ISSUED COLUMNS

E_STACK(8).DYTD_CURR = E_STACK(8).DYTD_CURR
                       + (TKTP1_STACK(CNT1).CDY1EXG_ISS); 
                       
E_STACK(8).DYTD_PRIOR = E_STACK(8).DYTD_PRIOR
                        + (TKTP1_STACK(CNT1).PDY1EXG_ISS); 
                        


-* INTERNATIONAL CALCULATIONS FOR EXCHANGES ISSUED COLUMNS

E_STACK(8).IYTD_CURR = E_STACK(8).IYTD_CURR
                       + (TKTP1_STACK(CNT1).CIY1EXG_ISS); 
                       
E_STACK(8).IYTD_PRIOR = E_STACK(8).IYTD_PRIOR
                        + (TKTP1_STACK(CNT1).PIY1EXG_ISS); 
                        


-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR EXCHANGES ISSUED COLUMNS

E_STACK(8).DIYTD_CURR = E_STACK(8).DYTD_CURR + E_STACK(8).IYTD_CURR;
E_STACK(8).DIYTD_PRIOR = E_STACK(8).DYTD_PRIOR + E_STACK(8).IYTD_PRIOR;

ENDCASE
-****************************

CASE NET_TKTS
TYPE "NET_TKTS"

-* MONTHLY CALCULATIONS
-* DOMESTIC CALCULATIONS FOR NET TKTS COLUMNS

COMPUTE 
 E_STACK(9).DOM_CURR = E_STACK(5).DOM_CURR
                     - E_STACK(6).DOM_CURR
                     - E_STACK(7).DOM_CURR
                     - E_STACK(8).DOM_CURR; 
                       
 E_STACK(9).DOM_PRIOR = E_STACK(5).DOM_PRIOR
                      - E_STACK(6).DOM_PRIOR
                      - E_STACK(7).DOM_PRIOR
                      - E_STACK(8).DOM_PRIOR; 



-* INTERNATIONAL CALCULATIONS FOR NET TRANSACTIONS COLUMNS

E_STACK(9).INT_CURR = E_STACK(5).INT_CURR
                    - E_STACK(6).INT_CURR
                    - E_STACK(7).INT_CURR
                    - E_STACK(8).INT_CURR;
                      
E_STACK(9).INT_PRIOR = E_STACK(5).INT_PRIOR
                     - E_STACK(6).INT_PRIOR
                     - E_STACK(7).INT_PRIOR
                     - E_STACK(8).INT_PRIOR; 
                       


-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR TOTAL TRANSACTIONS COLUMNS

E_STACK(9).DI_CURR = E_STACK(9).DOM_CURR + E_STACK(9).INT_CURR;
E_STACK(9).DI_PRIOR = E_STACK(9).DOM_PRIOR + E_STACK(9).INT_PRIOR;

-************

-* YEAR TO DATE CALCULATIONS
-* DOMESTIC CALCULATIONS FOR NET TRANSACTIONS COLUMNS

E_STACK(9).DYTD_CURR = E_STACK(5).DYTD_CURR
                     - E_STACK(6).DYTD_CURR
                     - E_STACK(7).DYTD_CURR
                     - E_STACK(8).DYTD_CURR; 
                       
E_STACK(9).DYTD_PRIOR = E_STACK(5).DYTD_PRIOR
                      - E_STACK(6).DYTD_PRIOR
                      - E_STACK(7).DYTD_PRIOR
                      - E_STACK(8).DYTD_PRIOR;
                        


-* INTERNATIONAL CALCULATIONS FOR NET TRANSACTIONS COLUMNS

E_STACK(9).IYTD_CURR = E_STACK(5).IYTD_CURR
                     - E_STACK(6).IYTD_CURR
                     - E_STACK(7).IYTD_CURR
                     - E_STACK(8).IYTD_CURR; 
                       
E_STACK(9).IYTD_PRIOR = E_STACK(5).IYTD_PRIOR
                      - E_STACK(6).IYTD_PRIOR
                      - E_STACK(7).IYTD_PRIOR
                      - E_STACK(8).IYTD_PRIOR; 
                        


-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR NET TRANSACTIONS COLUMNS

E_STACK(9).DIYTD_CURR = E_STACK(9).DYTD_CURR + E_STACK(9).IYTD_CURR;
E_STACK(9).DIYTD_PRIOR = E_STACK(9).DYTD_PRIOR + E_STACK(9).IYTD_PRIOR;

ENDCASE

-****************************
CASE AVG_COST
TYPE "AVG_COST"

-* MONTHLY CALCULATIONS
-* DOMESTIC CALCULATIONS FOR AVG FLIGHT COST COLUMNS

COMPUTE 
 E_STACK(10).DOM_CURR = IF E_STACK(9).DOM_CURR EQ 0
              THEN 0 ELSE (E_STACK(2).DOM_CURR
                     + E_STACK(4).DOM_CURR)/E_STACK(9).DOM_CURR;
                       
 E_STACK(10).DOM_PRIOR = IF ((E_STACK(9).DOM_PRIOR LT 1) AND
                             (E_STACK(9).DOM_PRIOR GT (-1))) THEN 0 ELSE
  (E_STACK(2).DOM_PRIOR + E_STACK(4).DOM_PRIOR)/E_STACK(9).DOM_PRIOR; 



-* INTERNATIONAL CALCULATIONS FOR AVG FLIGHT COST COLUMNS

E_STACK(10).INT_CURR = IF ((E_STACK(9).INT_CURR LT 1) AND 
                           (E_STACK(9).INT_CURR GT (-1))) THEN 0 ELSE       
 (E_STACK(2).INT_CURR + E_STACK(4).INT_CURR)/E_STACK(9).INT_CURR;
                      
E_STACK(10).INT_PRIOR = IF ((E_STACK(9).INT_PRIOR LT 1) AND
                            (E_STACK(9).INT_PRIOR GT (-1))) THEN 0 ELSE 
     (E_STACK(2).INT_PRIOR + E_STACK(4).INT_PRIOR)/E_STACK(9).INT_PRIOR; 
                       


-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR AVG COST COLUMNS

E_STACK(10).DI_CURR = IF (E_STACK(5).DI_CURR - E_STACK(6).DI_CURR
   - E_STACK(7).DI_CURR - E_STACK(8).DI_CURR) EQ 0 THEN 0 ELSE
     E_STACK(1).DI_CURR/ (E_STACK(5).DI_CURR - E_STACK(6).DI_CURR
   - E_STACK(7).DI_CURR - E_STACK(8).DI_CURR);
E_STACK(10).DI_PRIOR = IF (E_STACK(5).DI_PRIOR - E_STACK(6).DI_PRIOR
   - E_STACK(7).DI_PRIOR - E_STACK(8).DI_PRIOR) EQ 0 THEN 0 ELSE
     E_STACK(1).DI_PRIOR/ (E_STACK(5).DI_PRIOR - E_STACK(6).DI_PRIOR
   - E_STACK(7).DI_PRIOR - E_STACK(8).DI_PRIOR);


-************

-* YEAR TO DATE CALCULATIONS
-* DOMESTIC CALCULATIONS FOR AVG COST COLUMNS

E_STACK(10).DYTD_CURR = IF E_STACK(9).DYTD_CURR EQ 0
                THEN 0 ELSE (E_STACK(2).DYTD_CURR
                     + E_STACK(4).DYTD_CURR)/E_STACK(9).DYTD_CURR; 
                       
E_STACK(10).DYTD_PRIOR = IF E_STACK(9).DYTD_PRIOR EQ 0
                THEN 0 ELSE (E_STACK(2).DYTD_PRIOR
                      + E_STACK(4).DYTD_PRIOR)/E_STACK(9).DYTD_PRIOR;
                        


-* INTERNATIONAL CALCULATIONS FOR AVG COST COLUMNS

E_STACK(10).IYTD_CURR = IF E_STACK(9).IYTD_CURR EQ 0
                THEN 0 ELSE (E_STACK(2).IYTD_CURR
                     + E_STACK(4).IYTD_CURR)/E_STACK(9).IYTD_CURR; 
                       
E_STACK(10).IYTD_PRIOR = IF E_STACK(9).IYTD_PRIOR EQ 0
                THEN 0 ELSE (E_STACK(2).IYTD_PRIOR
                      + E_STACK(4).IYTD_PRIOR)/E_STACK(9).IYTD_PRIOR; 
                        


-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR AVG COST COLUMNS

E_STACK(10).DIYTD_CURR = IF (E_STACK(5).DIYTD_CURR - E_STACK(6).DIYTD_CURR
   - E_STACK(7).DIYTD_CURR - E_STACK(8).DIYTD_CURR) EQ 0 THEN 0 ELSE
     E_STACK(1).DIYTD_CURR/ (E_STACK(5).DIYTD_CURR - E_STACK(6).DIYTD_CURR
   - E_STACK(7).DIYTD_CURR - E_STACK(8).DIYTD_CURR);

E_STACK(10).DIYTD_PRIOR = IF (E_STACK(5).DIYTD_PRIOR - E_STACK(6).DIYTD_PRIOR
   - E_STACK(7).DIYTD_PRIOR - E_STACK(8).DIYTD_PRIOR) EQ 0 THEN 0 ELSE
     E_STACK(1).DIYTD_PRIOR/ (E_STACK(5).DIYTD_PRIOR - E_STACK(6).DIYTD_PRIOR
   - E_STACK(7).DIYTD_PRIOR - E_STACK(8).DIYTD_PRIOR);



ENDCASE
-****************************

-*CASE AVG_MILE
-*TYPE "AVG_MILE"

-*COMPUTE
-* E_STACK(11).DOM_CURR = IF (E_STACK(11).DOM_CURR
-*        + (TKTP1_STACK(CNT1).CDM1_MILES)) EQ 0 THEN 0 ELSE
-*          (E_STACK(1).DOM_CURR/(E_STACK(11).DOM_CURR 
-*        + (TKTP1_STACK(CNT1).CDM1_MILES)));
-*ENDCASE
-****************************

-****************************
CASE LOST_INFO
TYPE "LOST_INFO"

-* MONTHLY CALCULATIONS
-* DOMESTIC CALCULATIONS FOR LOST SAVINGS AMOUNT COLUMNS

COMPUTE 
 E_STACK(11).DOM_CURR = E_STACK(11).DOM_CURR
                       + (TKTP1_STACK(CNT1).CDM1LOS_AMT); 
                        
 E_STACK(11).DOM_PRIOR = E_STACK(11).DOM_PRIOR
                        + (TKTP1_STACK(CNT1).PDM1LOS_AMT); 
                        


-* INTERNATIONAL CALCULATIONS FOR LOST SAVINGS AMOUNT COLUMNS

E_STACK(11).INT_CURR = E_STACK(11).INT_CURR
                      + (TKTP1_STACK(CNT1).CIM1LOS_AMT); 
                       
E_STACK(11).INT_PRIOR = E_STACK(11).INT_PRIOR
                       + (TKTP1_STACK(CNT1).PIM1LOS_AMT); 
                                               


-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR LOST SAVINGS AMOUNT COLUMNS

E_STACK(11).DI_CURR = E_STACK(11).DOM_CURR + E_STACK(13).INT_CURR;
E_STACK(11).DI_PRIOR = E_STACK(11).DOM_PRIOR + E_STACK(13).INT_PRIOR;

-************

-* YEAR TO DATE CALCULATIONS
-* DOMESTIC CALCULATIONS FOR LOST SAVINGS AMOUNT COLUMNS

E_STACK(11).DYTD_CURR = E_STACK(11).DYTD_CURR
                       + (TKTP1_STACK(CNT1).CDY1LOS_AMT); 
                       
E_STACK(11).DYTD_PRIOR = E_STACK(11).DYTD_PRIOR
                        + (TKTP1_STACK(CNT1).PDY1LOS_AMT); 
                       

-* INTERNATIONAL CALCULATIONS FOR LOST SAVINGS AMOUNT COLUMNS

E_STACK(11).IYTD_CURR = E_STACK(11).IYTD_CURR
                       + (TKTP1_STACK(CNT1).CIY1LOS_AMT); 
                       
E_STACK(11).IYTD_PRIOR = E_STACK(11).IYTD_PRIOR
                        + (TKTP1_STACK(CNT1).PIY1LOS_AMT); 
                      

-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR LOST SAVINGS AMOUNT COLUMNS

E_STACK(11).DIYTD_CURR = E_STACK(11).DYTD_CURR + E_STACK(13).IYTD_CURR;
E_STACK(11).DIYTD_PRIOR = E_STACK(11).DYTD_PRIOR + E_STACK(13).IYTD_PRIOR;

ENDCASE
-****************************

CASE VAS_INFO
TYPE "VAS_INFO"

-* MONTHLY CALCULATIONS
-* DOMESTIC CALCULATIONS FOR CONTRACT SAVINGS AMOUNT COLUMNS

COMPUTE 
 E_STACK(13).DOM_CURR = E_STACK(13).DOM_CURR
                       + (TKTP1_STACK(CNT1).CDM1VAS_AMT); 
                                               
 E_STACK(13).DOM_PRIOR = E_STACK(13).DOM_PRIOR
                        + (TKTP1_STACK(CNT1).PDM1VAS_AMT); 
                                               


-* INTERNATIONAL CALCULATIONS FOR CONTRACT SAVINGS AMOUNT COLUMNS

E_STACK(13).INT_CURR = E_STACK(13).INT_CURR
                      + (TKTP1_STACK(CNT1).CIM1VAS_AMT); 
                          
E_STACK(13).INT_PRIOR = E_STACK(13).INT_PRIOR
                       + (TKTP1_STACK(CNT1).PIM1VAS_AMT); 
                                              


-* DOMESTIC AND INTERNATIONAL CALCULATIONS
-* FOR VALUE ADDED SAVINGS AMOUNT COLUMNS

E_STACK(13).DI_CURR = E_STACK(13).DOM_CURR + E_STACK(13).INT_CURR;
E_STACK(13).DI_PRIOR = E_STACK(13).DOM_PRIOR + E_STACK(13).INT_PRIOR;


-************

-* YEAR TO DATE CALCULATIONS
-* DOMESTIC CALCULATIONS FOR VALUE ADDED SAVINGS AMOUNT COLUMNS

E_STACK(13).DYTD_CURR = E_STACK(13).DYTD_CURR
                       + (TKTP1_STACK(CNT1).CDY1VAS_AMT); 
                                              
E_STACK(13).DYTD_PRIOR = E_STACK(13).DYTD_PRIOR
                        + (TKTP1_STACK(CNT1).PDY1VAS_AMT); 
                                               


-* INTERNATIONAL CALCULATIONS FOR CONTRACT SAVINGS AMOUNT COLUMNS

E_STACK(13).IYTD_CURR = E_STACK(13).IYTD_CURR
                       + (TKTP1_STACK(CNT1).CIY1VAS_AMT); 
                                              
E_STACK(13).IYTD_PRIOR = E_STACK(13).IYTD_PRIOR
                        + (TKTP1_STACK(CNT1).PIY1VAS_AMT); 
                                              


-* DOMESTIC AND INTERNATIONAL CALCULATIONS
-* FOR VALUE ADDED SAVINGS AMOUNT COLUMNS

E_STACK(13).DIYTD_CURR = E_STACK(13).DYTD_CURR + E_STACK(13).IYTD_CURR;
E_STACK(13).DIYTD_PRIOR = E_STACK(13).DYTD_PRIOR + E_STACK(13).IYTD_PRIOR;

TYPE "THEEND"

ENDCASE
-****************************

CASE LOS_PERCENT
TYPE "LOS_PCT"

-* MONTHLY CALCULATIONS
-* DOMESTIC CALCULATIONS FOR LOST SAVINGS PERCENTAGE COLUMNS

COMPUTE 
 E_STACK(12).DOM_CURR = IF ((E_STACK(1).DOM_CURR LT 1) AND 
                            (E_STACK(1).DOM_CURR GT (-1))) THEN 0 ELSE
                        (E_STACK(11).DOM_CURR/
                        E_STACK(1).DOM_CURR) * 100; 
                       
 E_STACK(12).DOM_PRIOR = IF ((E_STACK(1).DOM_PRIOR LT 1) AND 
                             (E_STACK(1).DOM_PRIOR GT (-1))) THEN 0 ELSE
                         (E_STACK(11).DOM_PRIOR/ 
                         E_STACK(1).DOM_PRIOR) * 100;
                        
-*E_STACK(12).DOM_VAR_VAL =
-*E_STACK(12).DOM_VAR_PCT = 

-* INTERNATIONAL CALCULATIONS FOR LOST SAVINGS PERCENTAGE COLUMNS

E_STACK(12).INT_CURR = IF ((E_STACK(1).INT_CURR LT 1) AND
                           (E_STACK(1).INT_CURR GT (-1))) THEN 0 ELSE
                        (E_STACK(11).INT_CURR/
                       E_STACK(1).INT_CURR) * 100;
                                            
E_STACK(12).INT_PRIOR = IF ((E_STACK(1).INT_PRIOR LT 1) AND
                            (E_STACK(1).INT_PRIOR GT (-1))) THEN 0 ELSE
                        (E_STACK(11).INT_PRIOR/
                        E_STACK(1).INT_PRIOR) * 100;
                                              
-*E_STACK(12).INT_VAR_VAL = 
-*E_STACK(12).INT_VAR_PCT = 

-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR LOST SAVINGS PERCENTAGE COLUMNS

E_STACK(12).DI_CURR = IF ((E_STACK(1).DI_CURR LT 1) AND 
                          (E_STACK(1).DI_CURR GT (-1))) THEN 0 ELSE
                        (E_STACK(11).DI_CURR/
                      E_STACK(1).DI_CURR) * 100;
                       
E_STACK(12).DI_PRIOR = IF ((E_STACK(1).DI_PRIOR LT 1) AND 
                           (E_STACK(1).DI_PRIOR GT (-1))) THEN 0 ELSE
                        (E_STACK(11).DI_PRIOR/
                       E_STACK(1).DI_PRIOR) * 100;
                         
-*E_STACK(12).DI_VAR_VAL = 
-*E_STACK(12).DI_VAR_PCT = 

-************

-* YEAR TO DATE CALCULATIONS
-* DOMESTIC CALCULATIONS FOR LOST SAVINGS PERCENTAGE COLUMNS

E_STACK(12).DYTD_CURR = IF ((E_STACK(1).DYTD_CURR LT 1) AND 
                            (E_STACK(1).DYTD_CURR GT (-1))) THEN 0 ELSE
                        (E_STACK(11).DYTD_CURR/
                        E_STACK(1).DYTD_CURR) * 100;
                                             
E_STACK(12).DYTD_PRIOR = IF ((E_STACK(1).DYTD_PRIOR LT 1) AND 
                             (E_STACK(1).DYTD_PRIOR GT (-1))) THEN 0 ELSE
                        (E_STACK(11).DYTD_PRIOR/
                         E_STACK(1).DYTD_PRIOR) * 100;
                                              
-*E_STACK(12).DYTD_VAR_VAL = 
-*E_STACK(12).DYTD_VAR_PCT = 

-* INTERNATIONAL CALCULATIONS FOR LOST SAVINGS PERCENTAGE COLUMNS

E_STACK(12).IYTD_CURR = IF ((E_STACK(1).IYTD_CURR LT 1) AND
                            (E_STACK(1).IYTD_CURR GT (-1))) THEN 0 ELSE
                        (E_STACK(11).IYTD_CURR/
                        E_STACK(1).IYTD_CURR) * 100;
                                             
E_STACK(12).IYTD_PRIOR = IF ((E_STACK(1).IYTD_PRIOR LT 1) AND 
                             (E_STACK(1).IYTD_PRIOR GT (-1))) THEN 0 ELSE
                        (E_STACK(11).IYTD_PRIOR/
                         E_STACK(1).IYTD_PRIOR) * 100;
                                               
-*E_STACK(12).IYTD_VAR_VAL = 
-*E_STACK(12).IYTD_VAR_PCT = 

-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR LOST SAVINGS PERCENTAGE COLUMNS

E_STACK(12).DIYTD_CURR = IF ((E_STACK(1).DIYTD_CURR LT 1) AND
                             (E_STACK(1).DIYTD_CURR GT (-1))) THEN 0 ELSE
                        (E_STACK(11).DIYTD_CURR/
                         E_STACK(1).DIYTD_CURR) * 100;
                         
E_STACK(12).DIYTD_PRIOR = IF ((E_STACK(1).DIYTD_PRIOR LT 1) AND
                              (E_STACK(1).DIYTD_PRIOR GT (-1))) THEN 0 ELSE
                         (E_STACK(11).DIYTD_PRIOR/
                          E_STACK(1).DIYTD_PRIOR) * 100;

-*E_STACK(12).DIYTD_VAR_VAL = 
-*E_STACK(12).DIYTD_VAR_PCT =
 
ENDCASE
-****************************
END

