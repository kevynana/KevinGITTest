-* File H50_TAG.FEX
-*
-*****   This routine retags old hierarchy keys to the new key in AH, CH, HH
-*****     following a batch rebuild of the hierarchy profile.
-*****     This is the 25 level (HIER50) version.
-*****   AUTHOR:  Dave Kuzanek
-*****   PRODUCTION DATE:
-***********************************************************************
-* DATE          NAME                DESCRIPTION
-* 8/29/00     IBISTL-KR             MODIFIED CODE TO REFLECT FIXED
-*                                   KEY LENGTH OF 50.
-*                                   CHANGED XHIER18 TO XHIER50,
-*                                     HIER18 TO HIER50, ah_18 TO ah_50,
-*                                     ch_18 TO ch_50, hh_18 TO hh_50,
-***********************************************************************

MAINTAIN FILE control AND xhier50 AND hier50 AND ah_50 AND ch_50 AND hh_50

COMPUTE Cnt1/I6 = ;
COMPUTE Cnt2/I6 = ;
COMPUTE Cnt3/I6 = ;

  COMPUTE S1Stat/A8 = ;
  COMPUTE S2Stat/A8 = ;
  COMPUTE S3Stat/A8 = ;
  COMPUTE S4Stat/A8 = ;
  COMPUTE S5Stat/A8 = ;
  COMPUTE S6Stat/A8 = ;
  COMPUTE S7Stat/A8 = ;
  COMPUTE S8Stat/A8 = ;
  COMPUTE S9Stat/A8 = ;
  COMPUTE S1A/I6 = ;
  COMPUTE S1B/I6 = ;
  COMPUTE S2A/I6 = ;
  COMPUTE S2B/I6 = ;
  COMPUTE S2C/I6 = ;
  COMPUTE S2D/I6 = ;
  COMPUTE S3A/I6 = ;
  COMPUTE S3B/I6 = ;
  COMPUTE S3C/I6 = ;
  COMPUTE S3D/I6 = ;
  COMPUTE S4A/I6 = ;
  COMPUTE S4B/I6 = ;
  COMPUTE S4C/I6 = ;
  COMPUTE S4D/I6 = ;
  COMPUTE S5A/I6 = ;
  COMPUTE S5B/I6 = ;
  COMPUTE S5C/I6 = ;
  COMPUTE S5D/I6 = ;
  COMPUTE S6A/I6 = ;
  COMPUTE S6B/I6 = ;
  COMPUTE S7A/I6 = ;
  COMPUTE S7B/I6 = ;
  COMPUTE S8A/I6 = ;
  COMPUTE S8B/I6 = ;
  COMPUTE S9A/I6 = ;
  COMPUTE S9B/I6 = ;
  COMPUTE S9C/I6 = ;
  COMPUTE S9D/I6 = ;

INFER HIER50.ROLL_LEV INTO HStack
INFER XHIER50.ROLL_LEV INTO XHStack
INFER CONTROL.CONTROL_ID INTO Cntl_Stack
INFER AH_50.ROLL_KEY INTO AHStack
INFER CH_50.ROLL_KEY INTO CHStack
INFER HH_50.ROLL_KEY INTO HHStack

REPOSITION CONTROL.CONTROL_ID
FOR ALL NEXT CONTROL.CONTROL_ID INTO Cntl_Stack
IF Cntl_Stack(1).ROLLUP_CODE EQ 'TRACKER1' THEN
  BEGIN
    TYPE " Please select a Rollup before using this function "
    GOTO EXIT
  ENDBEGIN

PERFORM Stat_Init
-* WINFORM SHOW_INACTIVE HIERSTAT

STACK CLEAR HStack
REPOSITION HIER50.ROLL_KEY
FOR ALL NEXT Hier50.ROLL_KEY INTO HStack
COMPUTE S3B = HStack.FocCount;
COMPUTE S4B = HStack.FocCount;
COMPUTE S5B = HStack.FocCount;

PERFORM Tag_OK
PERFORM Gen_InstEx
PERFORM Clear_Status
-* WINFORM CLOSE
GOTO END

CASE Clear_Status

  REPOSITION AH_50.ROLL_KEY
  STACK CLEAR AHStack
  FOR ALL NEXT AH_50.ROLL_KEY INTO AHStack WHERE
    AH_50.HIER_STATUS EQ 'x'
  COMPUTE Cnt1 = 1;
  REPEAT WHILE Cnt1 LE AHStack.FocCount
    COMPUTE AHStack(Cnt1).HIER_STATUS = ' ';
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDREPEAT
  FOR ALL UPDATE AH_50.HIER_STATUS FROM AHStack
  COMMIT

  REPOSITION CH_50.ROLL_KEY
  STACK CLEAR CHStack
  FOR ALL NEXT CH_50.ROLL_KEY INTO CHStack WHERE
    CH_50.HIER_STATUS EQ 'x'
  COMPUTE Cnt1 = 1;
  REPEAT WHILE Cnt1 LE CHStack.FocCount
    COMPUTE CHStack(Cnt1).HIER_STATUS = ' ';
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDREPEAT
  FOR ALL UPDATE CH_50.HIER_STATUS FROM CHStack
  COMMIT

  REPOSITION HH_50.ROLL_KEY
  STACK CLEAR HHStack
  FOR ALL NEXT HH_50.ROLL_KEY INTO HHStack WHERE
    HH_50.HIER_STATUS EQ 'x'
  COMPUTE Cnt1 = 1;
  REPEAT WHILE Cnt1 LE HHStack.FocCount
    COMPUTE HHStack(Cnt1).HIER_STATUS = ' ';
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDREPEAT
  FOR ALL UPDATE HH_50.HIER_STATUS FROM HHStack
  COMMIT

ENDCASE

CASE Gen_InstEx
  REPOSITION XHIER50.ROLL_KEY
  STACK CLEAR XHStack
  FOR ALL NEXT XHIER50.ROLL_KEY INTO XHStack
  IF XHStack.FocCount GT 0 THEN
  BEGIN
    FOR ALL DELETE XHIER50.ROLL_KEY FROM XHStack
    COMMIT
  ENDBEGIN
  REPOSITION HIER50.ROLL_KEY
  STACK CLEAR HStack
  FOR ALL NEXT HIER50.ROLL_KEY INTO HStack
    WHERE HIER50.OLD_KEY NE ' '
  COMPUTE Cnt1 = 1;
  COMPUTE Cnt2 = 1;
  STACK CLEAR XHStack
  REPEAT WHILE Cnt1 LE HStack.FocCount
    IF HStack(Cnt1).OLD_KEY NE HStack(Cnt1).ROLL_KEY THEN
    BEGIN
      COMPUTE XHStack(Cnt2).ROLL_LEV = HStack(Cnt1).ROLL_LEV;
      COMPUTE XHStack(Cnt2).EFF_DATE = HStack(Cnt1).EFF_DATE;
      COMPUTE XHStack(Cnt2).LEVEL_DESC = HStack(Cnt1).LEVEL_DESC;
      COMPUTE XHStack(Cnt2).LEVEL_BOSS = HStack(Cnt1).LEVEL_BOSS;
      COMPUTE XHStack(Cnt2).UPD_FLAG = HStack(Cnt1).UPD_FLAG;
      COMPUTE XHStack(Cnt2).OLD_KEY = HStack(Cnt1).OLD_KEY;
      COMPUTE XHStack(Cnt2).ROLL_KEY = HStack(Cnt1).ROLL_KEY;
      COMPUTE XHStack(Cnt2).INST_FLAG = HStack(Cnt1).INST_FLAG;
      COMPUTE Cnt2 = Cnt2 + 1;
    ENDBEGIN
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDREPEAT
  REPOSITION XHIER50.ROLL_KEY
  FOR ALL INCLUDE XHIER50.ROLL_KEY FROM XHStack
  COMMIT
  REPOSITION Hier50.ROLL_LEV
  STACK CLEAR HStack
  FOR ALL NEXT Hier50.Roll_Lev INTO HStack
  COMPUTE Cnt1 = 1;
  REPEAT WHILE Cnt1 LE HStack.FocCount
    COMPUTE HStack(Cnt1).UPD_FLAG =
      IF (HStack(Cnt1).UPD_FLAG EQ 'O') OR (HStack(Cnt1).UPD_FLAG EQ 'R')
        THEN HStack(Cnt1).UPD_FLAG ELSE ' ';
    COMPUTE HStack(Cnt1).OLD_KEY = HStack(Cnt1).ROLL_KEY;
    COMPUTE HStack(Cnt1).INST_FLAG = ' ';
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDREPEAT
  FOR ALL UPDATE Hier50.UPD_FLAG Hier50.OLD_KEY Hier50.INST_FLAG FROM HStack
  COMMIT
ENDCASE

CASE Tag_OK
  COMPUTE S3A = 0;
  COMPUTE S4A = 0;
  COMPUTE S5A = 0;
  COMPUTE Cnt1 = 1;
  REPEAT WHILE Cnt1 LE HStack.FocCount
    COMPUTE S3A = S3A + 1;
    COMPUTE S4A = S4A + 1;
    COMPUTE S5A = S5A + 1;
-*    WINFORM REFRESH HIERSTAT
    COMPUTE S3C = 0;
    COMPUTE S3D = 0;
    COMPUTE S4C = 0;
    COMPUTE S4D = 0;
    COMPUTE S5C = 0;
    COMPUTE S5D = 0;
    IF (HStack(Cnt1).ROLL_KEY NE HStack(Cnt1).OLD_KEY) AND
      (HStack(Cnt1).OLD_KEY GT ' ') THEN
    BEGIN
      REPOSITION AH_50.ROLL_KEY
      FOR ALL NEXT AH_50.ROLL_KEY INTO AHStack WHERE
        (AH_50.ROLL_KEY EQ HStack(Cnt1).OLD_KEY) AND
        (AH_50.HIER_STATUS NE 'x')
      COMPUTE S3D = AHStack.FocCount;
      REPOSITION CH_50.ROLL_KEY
      FOR ALL NEXT CH_50.ROLL_KEY INTO CHStack WHERE
        (CH_50.ROLL_KEY EQ HStack(Cnt1).OLD_KEY) AND
        (CH_50.HIER_STATUS NE 'x')
      COMPUTE S4D = CHStack.FocCount;
      REPOSITION HH_50.ROLL_KEY
      FOR ALL NEXT HH_50.ROLL_KEY INTO HHStack WHERE
        (HH_50.ROLL_KEY EQ HStack(Cnt1).OLD_KEY) AND
        (HH_50.HIER_STATUS NE 'x')
      COMPUTE S5D = HHStack.FocCount;
-*      WINFORM REFRESH HIERSTAT
      REPOSITION AH_50.ROLL_KEY
      REPEAT ALL
        STACK CLEAR AHStack
      FOR 5000 NEXT AH_50.ROLL_KEY INTO AHStack WHERE
        (AH_50.ROLL_KEY EQ HStack(Cnt1).OLD_KEY) AND
        (AH_50.HIER_STATUS NE 'x')
        IF AHStack.FocCount EQ 0 THEN GOTO EXITREPEAT
        COMPUTE Cnt2 = 1;
        REPEAT WHILE Cnt2 LE AHStack.FocCount
          COMPUTE S3C = S3C + 1;
-*          WINFORM REFRESH HIERSTAT
          COMPUTE AHStack(Cnt2).ROLL_KEY = HStack(Cnt1).ROLL_KEY;
          COMPUTE AHStack(Cnt2).HIER_STATUS = 'x';
          COMPUTE Cnt2 = Cnt2 + 1;
        ENDREPEAT
        FOR ALL UPDATE AH_50.ROLL_KEY AH_50.HIER_STATUS FROM AHStack
      ENDREPEAT
      COMMIT
      REPOSITION CH_50.ROLL_KEY
      REPEAT ALL
        STACK CLEAR CHStack
      FOR 5000 NEXT CH_50.ROLL_KEY INTO CHStack WHERE
        (CH_50.ROLL_KEY EQ HStack(Cnt1).OLD_KEY) AND
        (CH_50.HIER_STATUS NE 'x')
        IF CHStack.FocCount EQ 0 THEN GOTO EXITREPEAT
        COMPUTE Cnt2 = 1;
        REPEAT WHILE Cnt2 LE CHStack.FocCount
          COMPUTE S4C = S4C + 1;
-*          WINFORM REFRESH HIERSTAT
          COMPUTE CHStack(Cnt2).ROLL_KEY = HStack(Cnt1).ROLL_KEY;
          COMPUTE CHStack(Cnt2).HIER_STATUS = 'x';
          COMPUTE Cnt2 = Cnt2 + 1;
        ENDREPEAT
        FOR ALL UPDATE CH_50.ROLL_KEY CH_50.HIER_STATUS FROM CHStack
      ENDREPEAT
      COMMIT
      REPOSITION HH_50.ROLL_KEY
      REPEAT ALL
        STACK CLEAR HHStack
      FOR 5000 NEXT HH_50.ROLL_KEY INTO HHStack WHERE
        (HH_50.ROLL_KEY EQ HStack(Cnt1).OLD_KEY) AND
        (HH_50.HIER_STATUS NE 'x')
        IF HHStack.FocCount EQ 0 THEN GOTO EXITREPEAT
        COMPUTE Cnt2 = 1;
        REPEAT WHILE Cnt2 LE HHStack.FocCount
          COMPUTE S5C = S5C + 1;
-*          WINFORM REFRESH HIERSTAT
          COMPUTE HHStack(Cnt2).ROLL_KEY = HStack(Cnt1).ROLL_KEY;
          COMPUTE HHStack(Cnt2).HIER_STATUS = 'x';
          COMPUTE Cnt2 = Cnt2 + 1;
        ENDREPEAT
        FOR ALL UPDATE HH_50.ROLL_KEY HH_50.HIER_STATUS FROM HHStack
      ENDREPEAT
      COMMIT
    ENDBEGIN
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDREPEAT
  STACK CLEAR HStack
  REPOSITION HIER50.ROLL_KEY
  FOR ALL NEXT HIER50.ROLL_KEY INTO HStack
  COMPUTE Cnt1 = 1;
  REPEAT WHILE Cnt1 LE HStack.FocCount
    IF HStack(Cnt1).UPD_FLAG EQ 'U' THEN
      COMPUTE HStack(Cnt1).UPD_FLAG = ' ';
    IF HStack(Cnt1).UPD_FLAG EQ 'N' THEN
      COMPUTE HStack(Cnt1).UPD_FLAG = ' ';
    IF HStack(Cnt1).UPD_FLAG EQ 'R' THEN
      COMPUTE HStack(Cnt1).UPD_FLAG = 'O';
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDREPEAT
  FOR ALL UPDATE HIER50.UPD_FLAG HIER50.INST_FLAG FROM HStack
  COMMIT
ENDCASE

CASE Stat_Init
  COMPUTE S1Stat = 'Completed';
  COMPUTE S2Stat = 'Completed';
  COMPUTE S3Stat = 'Working';
  COMPUTE S4Stat = 'Working';
  COMPUTE S5Stat = 'Working';
  COMPUTE S6Stat = 'Pending';
  COMPUTE S7Stat = 'Pending';
  COMPUTE S8Stat = 'Pending';
  COMPUTE S9Stat = 'Pending';
endcase
case Winform_HierStat
-*   Winform show HierStat
endcase

END
