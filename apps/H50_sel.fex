-* File H50_SEL.FEX                                                             
-*                                                                              
-*                                                                              
-*                                                                              
-*****   This subroutine allows the specification of a Report Instance          
-*                                                                              
-*****     hierarchy level selection, and its associated sub-level sort         
-*                                                                              
-*****     break information.  Called from RPT_INST.                            
-*                                                                              
-*****     This is the 25 level (HIER50) version.                               
-*                                                                              
-*****   AUTHOR:  Dave Kuzanek                                                  
-*                                                                              
-*****   PRODUCTION DATE:                                                       
-*                                                                              
-************************************************************************       
-*                                                                              
-*DATE          NAME            DESCRIPTION                                     
-*                                                                              
-*9/12/00     IBISTL-RJ         COMMENTED OUT CODE DEALING WITH WINFORMS        
-*                                                                              
-*                              THAT ARE NOT CURRENTLY USED. MARKED - ibirj.    
-*                                                                              
MAINTAIN FILE hier50 AND ihier_bk AND rpt_inst AND rollup AND control           
 AND ihier_sl AND CLIENT AND CATEGORY  AND TEMPKEY  AND hierorg AND I_SUMM      
FROM INP_FIELD inst_parm lev_y roll_stack cntl_stack                            
                                                                                
COMPUTE INP_FIELD/A24=;                                                         
COMPUTE LastRow/I4 =;                                                           
COMPUTE CurrRow/I4 =;                                                           
COMPUTE Lev_X/I2 = ;                                                            
COMPUTE Lev_Y/I2 = ;                                                            
COMPUTE Alph_BkLev/A2 = ;                                                       
COMPUTE Num_BkLev/I2 = ;                                                        
COMPUTE Inst_Parm/A72 = ;                                                       
COMPUTE Zeros_2/A2 = '00';                                                      
COMPUTE Zeros_4/A4 = '0000';                                                    
COMPUTE Zeros_6/A6 = '000000';                                                  
COMPUTE Zeros_8/A8 = '00000000';                                                
COMPUTE Zeros_10/A10 = '0000000000';                                            
COMPUTE Zeros_12/A12 = '000000000000';                                          
COMPUTE Zeros_14/A14 = '00000000000000';                                        
COMPUTE Zeros_16/A16 = '0000000000000000';                                      
COMPUTE Zeros_18/A18 = '000000000000000000';                                    
COMPUTE Zeros_20/A20 = '00000000000000000000';                                  
COMPUTE Zeros_22/A22 = '0000000000000000000000';                                
COMPUTE Zeros_24/A24 = '000000000000000000000000';                              
COMPUTE Zeros_26/A26 = '00000000000000000000000000';                            
COMPUTE Zeros_28/A28 = '0000000000000000000000000000';                          
COMPUTE Zeros_30/A30 = '000000000000000000000000000000';                        
COMPUTE Zeros_32/A32 = '00000000000000000000000000000000';                      
COMPUTE Zeros_34/A34 = '0000000000000000000000000000000000';                    
COMPUTE Zeros_36/A36 = '000000000000000000000000000000000000';                  
COMPUTE Zeros_38/A38 = '00000000000000000000000000000000000000';                
COMPUTE Zeros_40/A40 = '0000000000000000000000000000000000000000';              
COMPUTE Zeros_42/A42 = '000000000000000000000000000000000000000000';            
COMPUTE Zeros_44/A44 = '00000000000000000000000000000000000000000000';          
COMPUTE Zeros_46/A46 = '0000000000000000000000000000000000000000000000';        
COMPUTE Zeros_48/A48 = '000000000000000000000000000000000000000000000000';      
COMPUTE Key_2/A2 = ;                                                            
COMPUTE Key_4/A4 = ;                                                            
COMPUTE Key_6/A6 = ;                                                            
COMPUTE Key_8/A8 = ;                                                            
COMPUTE Key_10/A10 = ;                                                          
COMPUTE Key_12/A12 = ;                                                          
COMPUTE Key_14/A14 = ;                                                          
COMPUTE Key_16/A16 = ;                                                          
COMPUTE Key_18/A18 = ;                                                          
COMPUTE Key_20/A20 = ;                                                          
COMPUTE Key_22/A22 = ;                                                          
COMPUTE Key_24/A24 = ;                                                          
COMPUTE Key_26/A26 = ;                                                          
COMPUTE Key_28/A28 = ;                                                          
COMPUTE Key_30/A30 = ;                                                          
COMPUTE Key_32/A32 = ;                                                          
COMPUTE Key_34/A14 = ;                                                          
COMPUTE Key_36/A16 = ;                                                          
COMPUTE Key_38/A18 = ;                                                          
COMPUTE Key_40/A20 = ;                                                          
COMPUTE Key_42/A22 = ;                                                          
COMPUTE Key_44/A24 = ;                                                          
COMPUTE Key_46/A26 = ;                                                          
COMPUTE Key_48/A28 = ;                                                          
COMPUTE Post_2/A2 = ;                                                           
COMPUTE Post_4/A4 = ;                                                           
COMPUTE Post_6/A6 = ;                                                           
COMPUTE Post_8/A8 = ;                                                           
COMPUTE Post_10/A10 = ;                                                         
COMPUTE Post_12/A12 = ;                                                         
COMPUTE Post_14/A14 = ;                                                         
COMPUTE Post_16/A16 = ;                                                         
COMPUTE Post_18/A18 = ;                                                         
COMPUTE Post_20/A20 = ;                                                         
COMPUTE Post_22/A22 = ;                                                         
COMPUTE Post_24/A24 = ;                                                         
COMPUTE Post_26/A26 = ;                                                         
COMPUTE Post_28/A28 = ;                                                         
COMPUTE Post_30/A30 = ;                                                         
COMPUTE Post_32/A32 = ;                                                         
COMPUTE Post_34/A34 = ;                                                         
COMPUTE Post_36/A36 = ;                                                         
COMPUTE Post_38/A38 = ;                                                         
COMPUTE Post_40/A40 = ;                                                         
COMPUTE Post_42/A42 = ;                                                         
COMPUTE Post_44/A44 = ;                                                         
COMPUTE Post_46/A46 = ;                                                         
COMPUTE Post_48/A48 = ;                                                         
COMPUTE Targ_2/A2 = ;                                                           
COMPUTE Targ_4/A4 = ;                                                           
COMPUTE Targ_6/A6 = ;                                                           
COMPUTE Targ_8/A8 = ;                                                           
COMPUTE Targ_10/A10 = ;                                                         
COMPUTE Targ_12/A12 = ;                                                         
COMPUTE Targ_14/A14 = ;                                                         
COMPUTE Targ_16/A16 = ;                                                         
COMPUTE Targ_18/A18 = ;                                                         
COMPUTE Targ_20/A20 = ;                                                         
COMPUTE Targ_22/A22 = ;                                                         
COMPUTE Targ_24/A24 = ;                                                         
COMPUTE Targ_26/A26 = ;                                                         
COMPUTE Targ_28/A28 = ;                                                         
COMPUTE Targ_30/A30 = ;                                                         
COMPUTE Targ_32/A32 = ;                                                         
COMPUTE Targ_34/A34 = ;                                                         
COMPUTE Targ_36/A36 = ;                                                         
COMPUTE Targ_38/A38 = ;                                                         
COMPUTE Targ_40/A40 = ;                                                         
COMPUTE Targ_42/A42 = ;                                                         
COMPUTE Targ_44/A44 = ;                                                         
COMPUTE Targ_46/A46 = ;                                                         
COMPUTE Targ_48/A48 = ;                                                         
COMPUTE Targ_50/A50 = ;                                                         
COMPUTE Target/A50 = ;                                                          
COMPUTE Snag_Targ/A30 = ;                                                       
COMPUTE Snag_Hold/A2 = ;                                                        
COMPUTE Sub_Start/I2 = ;                                                        
COMPUTE Sub_Stop/I2 = ;                                                         
COMPUTE Hold_MF/I4 =;                                                           
COMPUTE Hold_Roll/A15 = ;                                                       
COMPUTE SStack_Hold/I4 = ;                                                      
COMPUTE Sel_Head/A20 =;                                                         
COMPUTE Cnt1/I4 = ;                                                             
COMPUTE Cnt2/I4 = ;                                                             
COMPUTE Cnt3/I4 = ;                                                             
COMPUTE Pick/I4 = ;                                                             
COMPUTE PCnt/I4 = ;                                                             
COMPUTE SelTyp/A1 =;                                                            
COMPUTE Type_Stack.List_Type/A5 = ;                                             
COMPUTE Prt_YN.Rad/A7 = ;                                                       
COMPUTE Srt_YN.Rad/A7 = ;                                                       
COMPUTE Sel_YN.Rad/A7 = ;                                                       
COMPUTE Sum_YN.Rad/A7 = ;                                                       
COMPUTE Sum_TS.Rad/A7 = ;                                                       
COMPUTE SOrd_HL.Rad/A7 = ;                                                      
COMPUTE PBk_YN.Rad/A7 = ;                                                       
COMPUTE SkpL_YN.Rad/A7 = ;                                                      
COMPUTE SOnly_YN.Rad/A7 = ;                                                     
COMPUTE SMeth_CS.Rad/A7 = ;                                                     
COMPUTE SmOrd_HL.Rad/A7 = ;                                                     
COMPUTE Confirm_Code/A1 = ;                                                     
COMPUTE CL01/A6 = ;                                                             
COMPUTE CL02/A6 = ;                                                             
COMPUTE CL03/A6 = ;                                                             
COMPUTE CL04/A6 = ;                                                             
COMPUTE CL05/A6 = ;                                                             
COMPUTE CL06/A6 = ;                                                             
COMPUTE CL07/A6 = ;                                                             
COMPUTE CL08/A6 = ;                                                             
COMPUTE CL09/A6 = ;                                                             
COMPUTE CL10/A6 = ;                                                             
COMPUTE CL11/A6 = ;                                                             
COMPUTE CL12/A6 = ;                                                             
COMPUTE CL13/A6 = ;                                                             
COMPUTE CL14/A6 = ;                                                             
COMPUTE CL15/A6 = ;                                                             
COMPUTE CL16/A6 = ;                                                             
COMPUTE CL17/A6 = ;                                                             
COMPUTE CL18/A6 = ;                                                             
COMPUTE CL19/A6 = ;                                                             
COMPUTE CL20/A6 = ;                                                             
COMPUTE CL21/A6 = ;                                                             
COMPUTE CL22/A6 = ;                                                             
COMPUTE CL23/A6 = ;                                                             
COMPUTE CL24/A6 = ;                                                             
COMPUTE CL25/A6 = ;                                                             
COMPUTE CK01/I2 = ;                                                             
COMPUTE CK02/I2 = ;                                                             
COMPUTE CK03/I2 = ;                                                             
COMPUTE CK04/I2 = ;                                                             
COMPUTE CK05/I2 = ;                                                             
COMPUTE CK06/I2 = ;                                                             
COMPUTE CK07/I2 = ;                                                             
COMPUTE CK08/I2 = ;                                                             
COMPUTE CK09/I2 = ;                                                             
COMPUTE CK10/I2 = ;                                                             
COMPUTE CK11/I2 = ;                                                             
COMPUTE CK12/I2 = ;                                                             
COMPUTE CK13/I2 = ;                                                             
COMPUTE CK14/I2 = ;                                                             
COMPUTE CK15/I2 = ;                                                             
COMPUTE CK16/I2 = ;                                                             
COMPUTE CK17/I2 = ;                                                             
COMPUTE CK18/I2 = ;                                                             
COMPUTE CK19/I2 = ;                                                             
COMPUTE CK20/I2 = ;                                                             
COMPUTE CK21/I2 = ;                                                             
COMPUTE CK22/I2 = ;                                                             
COMPUTE CK23/I2 = ;                                                             
COMPUTE CK24/I2 = ;                                                             
COMPUTE CK25/I2 = ;                                                             
COMPUTE CK26/I2 = ;                                                             
COMPUTE CK27/I2 = ;                                                             
COMPUTE CK28/I2 = ;                                                             
COMPUTE CK29/I2 = ;                                                             
COMPUTE CK30/I2 = ;                                                             
COMPUTE CK31/I2 = ;                                                             
COMPUTE CK32/I2 = ;                                                             
COMPUTE CK33/I2 = ;                                                             
COMPUTE CK34/I2 = ;                                                             
COMPUTE CK35/I2 = ;                                                             
COMPUTE CK36/I2 = ;                                                             
COMPUTE CK37/I2 = ;                                                             
COMPUTE TT01/I2 = ;                                                             
COMPUTE TT02/I2 = ;                                                             
COMPUTE BUTTVAL/A1=;                                                            
COMPUTE XCLSEL/A1=;                                                             
COMPUTE XCASEL/A1=;                                                             
COMPUTE XSEL/A1 = ;                                                             
COMPUTE HS01/A17=;                                                              
COMPUTE HS02/A17=;                                                              
COMPUTE HS03/A17=;                                                              
COMPUTE HS04/A17=;                                                              
COMPUTE HS05/A17=;                                                              
COMPUTE HS06/A17=;                                                              
COMPUTE HS07/A17=;                                                              
COMPUTE HS08/A17=;                                                              
COMPUTE HS09/A17=;                                                              
COMPUTE HS10/A17=;                                                              
COMPUTE HS11/A17=;                                                              
COMPUTE HS12/A17=;                                                              
COMPUTE HS13/A17=;                                                              
COMPUTE HS14/A17=;                                                              
COMPUTE HS15/A17=;                                                              
COMPUTE HS16/A17=;                                                              
COMPUTE HS17/A17=;                                                              
COMPUTE HS18/A17=;                                                              
COMPUTE HS19/A17=;                                                              
COMPUTE HS20/A17=;                                                              
COMPUTE HS21/A17=;                                                              
COMPUTE HS22/A17=;                                                              
COMPUTE HS23/A17=;                                                              
COMPUTE HS24/A17=;                                                              
COMPUTE HS25/A17=;                                                              
COMPUTE XS01/A17=;                                                              
COMPUTE XSCREEN/A1=;                                                            
COMPUTE XSELECT/A1=;                                                            
COMPUTE LINE01/A65=;                                                            
COMPUTE LINE02/A65=;                                                            
COMPUTE LINE03/A65=;                                                            
COMPUTE LINE04/A65=;                                                            
COMPUTE LINE05/A65=;                                                            
COMPUTE LINE06/A65=;                                                            
COMPUTE LINE07/A65=;                                                            
COMPUTE LINE08/A65=;                                                            
COMPUTE LINE09/A65=;                                                            
COMPUTE LINE10/A65=;                                                            
COMPUTE XL01/A3=;                                                               
COMPUTE XL02/A30=;                                                              
COMPUTE XL03/A2=;                                                               
                                                                                
COMPUTE XR01/I1=;                                                               
COMPUTE XR02/I1=;                                                               
COMPUTE XR03/I1=;                                                               
COMPUTE XR04/I1=;                                                               
COMPUTE XR05/I1=;                                                               
COMPUTE XR06/I1=;                                                               
COMPUTE XR07/I1=;                                                               
COMPUTE XR08/I1=;                                                               
COMPUTE XR09/I1=;                                                               
COMPUTE XR10/I1=;                                                               
COMPUTE XR11/I1=;                                                               
COMPUTE XR12/I1=;                                                               
COMPUTE XR13/I1=;                                                               
COMPUTE XR14/I1=;                                                               
COMPUTE XR15/I1=;                                                               
COMPUTE XR16/I1=;                                                               
COMPUTE XR17/I1=;                                                               
COMPUTE XR18/I1=;                                                               
COMPUTE XR19/I1=;                                                               
COMPUTE XR20/I1=;                                                               
COMPUTE XR21/I1=;                                                               
COMPUTE XR22/I1=;                                                               
COMPUTE XR23/I1=;                                                               
COMPUTE XR24/I1=;                                                               
COMPUTE XR25/I1=;                                                               
COMPUTE XR26/I2L=;                                                              
COMPUTE SP/A4=;                                                                 
COMPUTE HK01/I2=;                                                               
COMPUTE HK02/I2=;                                                               
COMPUTE HK03/I2=;                                                               
COMPUTE HK04/I2=;                                                               
COMPUTE HK05/I2=;                                                               
COMPUTE HK06/I2=;                                                               
COMPUTE HK07/I2=;                                                               
COMPUTE HK08/I2=;                                                               
COMPUTE HK09/I2=;                                                               
COMPUTE HK10/I2=;                                                               
COMPUTE HK11/I2=;                                                               
COMPUTE HK12/I2=;                                                               
COMPUTE HK13/I2=;                                                               
COMPUTE HK14/I2=;                                                               
COMPUTE HK15/I2=;                                                               
COMPUTE HK16/I2=;                                                               
COMPUTE HK17/I2=;                                                               
COMPUTE HK18/I2=;                                                               
COMPUTE HK19/I2=;                                                               
COMPUTE HK20/I2=;                                                               
COMPUTE HK21/I2=;                                                               
COMPUTE HK22/I2=;                                                               
COMPUTE HK23/I2=;                                                               
COMPUTE HK24/I2=;                                                               
COMPUTE HK25/I2=;                                                               
COMPUTE HK26/I2=;                                                               
COMPUTE HTOT/I2=;                                                               
COMPUTE LEVELA/A2=;                                                             
COMPUTE LEVELB/A1=;                                                             
COMPUTE LEVELC/A1=;                                                             
COMPUTE LEVELD/A2=;                                                             
                                                                                
COMPUTE SPR0/A1=;                                                               
COMPUTE SPR1/A19=;                                                              
COMPUTE SPR2/A19=;                                                              
COMPUTE SPR3/A19=;                                                              
COMPUTE SPR4/A19=;                                                              
COMPUTE SPR5/A19=;                                                              
COMPUTE SPR6/A19=;                                                              
COMPUTE SPR7/A19=;                                                              
COMPUTE SPR8/A19=;                                                              
COMPUTE SPR9/A19=;                                                              
COMPUTE SPR10/A19=;                                                             
COMPUTE SPR11/A19=;                                                             
COMPUTE SPR12/A19=;                                                             
COMPUTE SPR13/A19=;                                                             
COMPUTE SPR14/A19=;                                                             
COMPUTE SPR15/A19=;                                                             
COMPUTE SPR16/A19=;                                                             
COMPUTE SPR17/A19=;                                                             
COMPUTE SPR18/A19=;                                                             
COMPUTE SPR19/A19=;                                                             
COMPUTE SPR20/A19=;                                                             
COMPUTE SPR21/A19=;                                                             
COMPUTE SPR22/A19=;                                                             
COMPUTE SPR23/A19=;                                                             
COMPUTE SPR24/A19=;                                                             
COMPUTE SPR25/A19=;                                                             
                                                                                
COMPUTE PR01/A65=;                                                              
COMPUTE PR02/A65=;                                                              
COMPUTE PR03/A65=;                                                              
COMPUTE PR04/A65=;                                                              
COMPUTE PR05/A65=;                                                              
COMPUTE PR06/A65=;                                                              
COMPUTE PR07/A65=;                                                              
COMPUTE PR08/A65=;                                                              
COMPUTE PR09/A65=;                                                              
COMPUTE PR10/A65=;                                                              
COMPUTE PR11/A65=;                                                              
COMPUTE PR12/A65=;                                                              
COMPUTE PR13/A65=;                                                              
COMPUTE PR14/A65=;                                                              
COMPUTE PR15/A65=;                                                              
COMPUTE PR16/A65=;                                                              
COMPUTE PR17/A65=;                                                              
COMPUTE PR18/A65=;                                                              
COMPUTE PR19/A65=;                                                              
COMPUTE PR20/A65=;                                                              
COMPUTE PR21/A65=;                                                              
COMPUTE PR22/A65=;                                                              
COMPUTE PR23/A65=;                                                              
COMPUTE PR24/A65=;                                                              
COMPUTE PR25/A65=;                                                              
                                                                                
COMPUTE MR04/A65=;                                                              
COMPUTE MR05/A65=;                                                              
COMPUTE MR06/A65=;                                                              
COMPUTE MR07/A65=;                                                              
COMPUTE MR08/A65=;                                                              
COMPUTE MR09/A65=;                                                              
COMPUTE MR10/A65=;                                                              
COMPUTE MR11/A65=;                                                              
COMPUTE MR12/A65=;                                                              
COMPUTE MR13/A65=;                                                              
COMPUTE MR14/A65=;                                                              
COMPUTE MR15/A65=;                                                              
COMPUTE MR16/A65=;                                                              
COMPUTE MR17/A65=;                                                              
COMPUTE MR18/A65=;                                                              
COMPUTE MR19/A65=;                                                              
COMPUTE MR20/A65=;                                                              
COMPUTE MR21/A65=;                                                              
COMPUTE MR22/A65=;                                                              
COMPUTE MR23/A65=;                                                              
COMPUTE MR24/A65=;                                                              
COMPUTE MR25/A65=;                                                              
                                                                                
COMPUTE LL01/A65=;                                                              
COMPUTE LL02/A65=;                                                              
COMPUTE LL03/A65=;                                                              
COMPUTE LL04/A65=;                                                              
COMPUTE LL05/A65=;                                                              
COMPUTE LL06/A65=;                                                              
COMPUTE LL07/A65=;                                                              
COMPUTE LL08/A65=;                                                              
COMPUTE LL09/A65=;                                                              
                                                                                
COMPUTE Err_msg / A100 ;                                                        
                                                                                
INFER RPT_INST INTO RI_Temp                                                     
INFER HIER50.ROLL_LEV INTO HSel_Stack                                           
INFER HIER50.ROLL_LEV INTO H_Temp                                               
INFER IHIER_BK INTO FSel_Stack                                                  
INFER IHIER_BK INTO S_Stack                                                     
INFER IHIER_SL INTO ISL_Stack                                                   
INFER ROLLUP INTO Roll_Stack                                                    
INFER CONTROL.CONTROL_ID INTO Cntl_Stack                                        
INFER RPT_INST.CLIENT1  INTO CNTL_CLIENT1                                       
INFER RPT_INST.CLIENT2  INTO CNTL_CLIENT2                                       
INFER RPT_INST.CLIENT3  INTO CNTL_CLIENT3                                       
INFER RPT_INST.CLIENT4  INTO CNTL_CLIENT4                                       
INFER RPT_INST.CLIENT5  INTO CNTL_CLIENT5                                       
INFER RPT_INST.CLIENT6  INTO CNTL_CLIENT6                                       
INFER RPT_INST.CLIENT7  INTO CNTL_CLIENT7                                       
INFER RPT_INST.CLIENT8  INTO CNTL_CLIENT8                                       
INFER RPT_INST.CLIENT9  INTO CNTL_CLIENT9                                       
INFER RPT_INST.CLIENT10 INTO CNTL_CLIENT10                                      
INFER RPT_INST.CLIENT11 INTO CNTL_CLIENT11                                      
INFER RPT_INST.CLIENT12 INTO CNTL_CLIENT12                                      
INFER RPT_INST.CLIENT13 INTO CNTL_CLIENT13                                      
INFER RPT_INST.CLIENT14 INTO CNTL_CLIENT14                                      
INFER RPT_INST.CLIENT15 INTO CNTL_CLIENT15                                      
INFER RPT_INST.CLIENT16 INTO CNTL_CLIENT16                                      
INFER RPT_INST.CLIENT17 INTO CNTL_CLIENT17                                      
INFER RPT_INST.CLIENT18 INTO CNTL_CLIENT18                                      
INFER RPT_INST.CLIENT19 INTO CNTL_CLIENT19                                      
INFER RPT_INST.CLIENT20 INTO CNTL_CLIENT20                                      
INFER RPT_INST.CLIENT21 INTO CNTL_CLIENT21                                      
INFER RPT_INST.CLIENT22 INTO CNTL_CLIENT22                                      
INFER RPT_INST.CLIENT23 INTO CNTL_CLIENT23                                      
INFER RPT_INST.CLIENT24 INTO CNTL_CLIENT24                                      
INFER RPT_INST.CLIENT25 INTO CNTL_CLIENT25                                      
                                                                                
INFER RPT_INST.CATG1  INTO CNTL_CAT1                                            
INFER RPT_INST.CATG2  INTO CNTL_CAT2                                            
INFER RPT_INST.CATG3  INTO CNTL_CAT3                                            
INFER RPT_INST.CATG4  INTO CNTL_CAT4                                            
INFER RPT_INST.CATG5  INTO CNTL_CAT5                                            
INFER RPT_INST.CATG6  INTO CNTL_CAT6                                            
INFER RPT_INST.CATG7  INTO CNTL_CAT7                                            
INFER RPT_INST.CATG8  INTO CNTL_CAT8                                            
INFER RPT_INST.CATG9  INTO CNTL_CAT9                                            
INFER RPT_INST.CATG10 INTO CNTL_CAT10                                           
INFER CLIENT INTO CL_STACK1                                                     
-*INFER CATEGORY INTO CA_STACK1                                                 
INFER CLIENT INTO CUR_CLIENT                                                    
INFER RPT_INST INTO CUR_CATG                                                    
INFER RPT_INST INTO SEL_TYPE                                                    
INFER I_SUMM.INST_KEY   INTO HI_STACK                                           
INFER I_SUMM.INST_KEY   INTO HIER_ORG15                                         
INFER I_SUMM.INST_KEY   INTO HI_STACK1                                          
INFER I_SUMM.INST_KEY   INTO HI_STACK2                                          
INFER I_SUMM.INST_KEY   INTO HI_STACK3                                          
INFER I_SUMM.HDES1      INTO CUR_HIER0                                          
INFER I_SUMM.HDES1      INTO CUR_HIER1                                          
INFER I_SUMM.HDES2      INTO CUR_HIER2                                          
INFER I_SUMM.HDES3      INTO CUR_HIER3                                          
INFER I_SUMM.HDES4      INTO CUR_HIER4                                          
INFER I_SUMM.HDES5      INTO CUR_HIER5                                          
INFER I_SUMM.HDES6      INTO CUR_HIER6                                          
INFER I_SUMM.HDES7      INTO CUR_HIER7                                          
INFER I_SUMM.HDES8      INTO CUR_HIER8                                          
INFER I_SUMM.HDES9      INTO CUR_HIER9                                          
INFER I_SUMM.HDES10     INTO CUR_HIER10                                         
INFER I_SUMM.HDES11     INTO CUR_HIER11                                         
INFER I_SUMM.HDES12     INTO CUR_HIER12                                         
INFER I_SUMM.HDES13     INTO CUR_HIER13                                         
INFER I_SUMM.HDES14     INTO CUR_HIER14                                         
INFER I_SUMM.HDES15     INTO CUR_HIER15                                         
INFER I_SUMM.HDES16     INTO CUR_HIER16                                         
INFER I_SUMM.HDES17     INTO CUR_HIER17                                         
INFER I_SUMM.HDES18     INTO CUR_HIER18                                         
INFER I_SUMM.HDES19     INTO CUR_HIER19                                         
INFER I_SUMM.HDES20     INTO CUR_HIER20                                         
INFER I_SUMM.HDES21     INTO CUR_HIER21                                         
INFER I_SUMM.HDES22     INTO CUR_HIER22                                         
INFER I_SUMM.HDES23     INTO CUR_HIER23                                         
INFER I_SUMM.HDES24     INTO CUR_HIER24                                         
INFER I_SUMM.HDES25     INTO CUR_HIER25                                         
                                                                                
-*INFER RPT_INST.INST_KEY I_CODE.PRT_LN1 INTO CD_STACK                          
                                                                                
REPOSITION RPT_INST.INST_KEY                                                    
STACK CLEAR CUR_CATEGORY                                                        
NEXT RPT_INST.INST_KEY INTO CUR_CATEGORY                                        
WHERE RPT_INST.CATG1 NE ' '                                                     
                                                                                
REPOSITION CLIENT.CLIST1                                                        
FOR ALL NEXT CLIENT.CLIST1 INTO CL_STACK2                                       
  WHERE CLIENT.ROLLUP_CODE EQ Cntl_Stack(1).ROLLUP_CODE                         
                                                                                
REPOSITION CATEGORY.CATLIST                                                     
FOR ALL NEXT CATEGORY.CATLIST INTO CA_STACK2                                    
                                                                                
REPOSITION RPT_INST.INST_KEY                                                    
STACK CLEAR RI_Stack                                                            
NEXT RPT_INST.INST_KEY INTO RI_Stack                                            
  WHERE RPT_INST.INST_KEY EQ Inst_Parm                                          
                                                                                
REPOSITION RPT_INST.INST_KEY                                                    
STACK CLEAR SEL_TYPE                                                            
NEXT RPT_INST.INST_KEY INTO SEL_TYPE                                            
  WHERE RPT_INST.INST_KEY EQ Inst_Parm                                          
                                                                                
REPOSITION RPT_INST.INST_KEY                                                    
STACK CLEAR CNTL_CLIENT1                                                        
NEXT RPT_INST.INST_KEY INTO CNTL_CLIENT1                                        
  WHERE RPT_INST.INST_KEY EQ Inst_Parm                                          
                                                                                
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT1                                                         
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT1                                 
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT1                              
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT2                                                         
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT2                                 
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT2                              
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT3                                                         
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT3                                 
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT3                              
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT4                                                         
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT4                                 
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT4                              
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT5                                                         
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT5                                 
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT5                              
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT5                                                         
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT5                                 
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT5                              
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT5                                                         
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT5                                 
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT5                              
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT6                                                         
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT6                                 
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT6                              
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT7                                                         
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT7                                 
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT7                              
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT8                                                         
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT8                                 
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT8                              
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT9                                                         
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT9                                 
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT9                              
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT10                                                        
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT10                                
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT10                             
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT11                                                        
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT11                                
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT11                             
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT12                                                        
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT12                                
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT12                             
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT13                                                        
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT13                                
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT13                             
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT14                                                        
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT14                                
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT14                             
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT15                                                        
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT15                                
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT15                             
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT16                                                        
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT16                                
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT16                             
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT17                                                        
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT17                                
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT17                             
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT18                                                        
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT18                                
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT18                             
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT19                                                        
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT19                                
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT19                             
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT20                                                        
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT20                                
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT20                             
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT21                                                        
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT21                                
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT21                             
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT22                                                        
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT22                                
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT22                             
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT23                                                        
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT23                                
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT23                             
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT24                                                        
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT24                                
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT24                             
REPOSITION CLIENT.CLIENT_NUM                                                    
STACK CLEAR CUR_CLIENT25                                                        
FOR ALL NEXT CLIENT.CLIENT_NUM INTO CUR_CLIENT25                                
WHERE CLIENT.CLIENT_NUM EQ CNTL_CLIENT1(1).CLIENT25                             
                                                                                
REPOSITION RPT_INST.INST_KEY                                                    
STACK CLEAR CUR_CAT1                                                            
FOR ALL NEXT RPT_INST.INST_KEY INTO CUR_CAT1                                    
 WHERE RPT_INST.INST_KEY EQ Inst_Parm                                           
                                                                                
REPOSITION RPT_INST.INST_KEY                                                    
STACK CLEAR CUR_CAT2                                                            
FOR ALL NEXT RPT_INST.INST_KEY INTO CUR_CAT2                                    
 WHERE RPT_INST.INST_KEY EQ Inst_Parm                                           
                                                                                
REPOSITION RPT_INST.INST_KEY                                                    
STACK CLEAR CUR_CAT3                                                            
FOR ALL NEXT RPT_INST.INST_KEY INTO CUR_CAT3                                    
 WHERE RPT_INST.INST_KEY EQ Inst_Parm                                           
                                                                                
REPOSITION RPT_INST.INST_KEY                                                    
STACK CLEAR CUR_CAT4                                                            
FOR ALL NEXT RPT_INST.INST_KEY INTO CUR_CAT4                                    
 WHERE RPT_INST.INST_KEY EQ Inst_Parm                                           
                                                                                
REPOSITION RPT_INST.INST_KEY                                                    
STACK CLEAR CUR_CAT5                                                            
FOR ALL NEXT RPT_INST.INST_KEY INTO CUR_CAT5                                    
 WHERE RPT_INST.INST_KEY EQ Inst_Parm                                           
                                                                                
REPOSITION RPT_INST.INST_KEY                                                    
STACK CLEAR CUR_CAT6                                                            
FOR ALL NEXT RPT_INST.INST_KEY INTO CUR_CAT6                                    
 WHERE RPT_INST.INST_KEY EQ Inst_Parm                                           
                                                                                
REPOSITION RPT_INST.INST_KEY                                                    
STACK CLEAR CUR_CAT7                                                            
FOR ALL NEXT RPT_INST.INST_KEY INTO CUR_CAT7                                    
 WHERE RPT_INST.INST_KEY EQ Inst_Parm                                           
                                                                                
REPOSITION RPT_INST.INST_KEY                                                    
STACK CLEAR CUR_CAT8                                                            
FOR ALL NEXT RPT_INST.INST_KEY INTO CUR_CAT8                                    
 WHERE RPT_INST.INST_KEY EQ Inst_Parm                                           
                                                                                
REPOSITION RPT_INST.INST_KEY                                                    
STACK CLEAR CUR_CAT9                                                            
FOR ALL NEXT RPT_INST.INST_KEY INTO CUR_CAT9                                    
 WHERE RPT_INST.INST_KEY EQ Inst_Parm                                           
                                                                                
REPOSITION RPT_INST.INST_KEY                                                    
STACK CLEAR CUR_CAT10                                                           
FOR ALL NEXT RPT_INST.INST_KEY INTO CUR_CAT10                                   
 WHERE RPT_INST.INST_KEY EQ Inst_Parm                                           
                                                                                
REPOSITION TEMPKEY.INSTANCE_ID                                                  
STACK CLEAR TK_Stack                                                            
FOR ALL NEXT RPT_INST.INST_KEY INTO TK_Stack                                    
                                                                                
REPOSITION IHIER_SL.INST_KEY                                                    
STACK CLEAR ISL_Stack                                                           
FOR ALL NEXT IHIER_SL.INST_KEY INTO ISL_Stack                                   
  WHERE IHIER_SL.INST_KEY EQ Inst_Parm                                          
                                                                                
REPOSITION HIER50.ROLL_LEV                                                      
STACK CLEAR H_Stack                                                             
FOR ALL NEXT HIER50.ROLL_LEV INTO H_Stack WHERE                                 
  (UPD_FLAG NE 'O') AND (UPD_FLAG NE 'R')                                       
                                                                                
                                                                                
COMPUTE Cnt1 = 1;                                                               
COMPUTE Hold_Roll = ' ';                                                        
STACK CLEAR H_Temp                                                              
REPEAT WHILE Cnt1 LE H_Stack.FocCount                                           
  IF H_Stack(Cnt1).ROLL_LEV NE Hold_Roll THEN                                   
  BEGIN                                                                         
    COMPUTE Hold_Roll = H_Stack(Cnt1).ROLL_LEV;                                 
    COMPUTE Cnt2 = H_Temp.FocCount + 1;                                         
    COPY FROM H_Stack(Cnt1) INTO H_Temp(Cnt2)                                   
  ENDBEGIN                                                                      
  COMPUTE Cnt1 = Cnt1 + 1;                                                      
ENDREPEAT                                                                       
                                                                                
PERFORM BASIC_DISPLAY                                                           
                                                                                
CASE BASIC_DISPLAY                                                              
IF INP_FIELD EQ 'GETCLIENT' THEN                                                
    BEGIN                                                                       
    PERFORM CL_WORK                                                             
    ENDBEGIN                                                                    
    ELSE                                                                        
IF INP_FIELD EQ 'GETHIER' THEN                                                  
    BEGIN                                                                       
    PERFORM HI_WORK                                                             
    ENDBEGIN                                                                    
    ELSE                                                                        
    BEGIN                                                                       
    PERFORM WINFORM_HIERMAIN                                                    
    ENDBEGIN                                                                    
ENDCASE                                                                         
-*PERFORM Winform_HierMain;                                                     
-*                                                                              
                                                                                
CASE CL_WORK                                                                    
WINFORM SHOW CLIENTSELECT                                                       
ENDCASE                                                                         
                                                                                
CASE HI_WORK                                                                    
WINFORM SHOW HIERDISPLAY                                                        
ENDCASE                                                                         
                                                                                
case Delete_Level                                                               
-*  WINFORM SHOW DelConfirm                                                     
-*                                                                              
-*IF (Confirm_Code EQ 'Y') AND (ISL_Stack.FocCount EQ 0) THEN                   
IF ISL_Stack.FocCount EQ 0 THEN                                                 
BEGIN                                                                           
    COMPUTE RI_Stack(1).LEV_SELECT = ' ';                                       
    COMPUTE RI_Stack(1).LEVEL_KEY = ' ';                                        
    COMPUTE RI_Stack(1).SELECT_LEV = 0;                                         
ENDBEGIN                                                                        
  FOR 1 UPDATE RPT_INST.LEVEL_KEY RPT_INST.LEV_SELECT RPT_INST.SELECT_LEV       
    From RI_Stack(1)                                                            
  COMMIT                                                                        
                                                                                
-*  IF (Confirm_Code EQ 'N') OR (ISL_Stack.FocCount EQ 0) THEN GOTO ENDCASE     
-*                                                                              
  DELETE IHIER_SL.INST_KEY FROM ISL_Stack(ISL_Stack.FocIndex)                   
  COMMIT                                                                        
  REPOSITION IHIER_SL.INST_KEY                                                  
  STACK CLEAR ISL_Stack                                                         
  FOR ALL NEXT IHIER_SL.INST_KEY INTO ISL_Stack                                 
    WHERE IHIER_SL.INST_KEY EQ Inst_Parm                                        
  IF ISL_Stack.FocCount EQ 1 THEN                                               
    COMPUTE RI_Stack(1).LEV_SELECT = ISL_Stack(1).SEL_DESC;                     
  IF ISL_Stack.Foccount EQ 0 THEN                                               
  BEGIN                                                                         
    COMPUTE RI_Stack(1).LEV_SELECT = ' ';                                       
    COMPUTE RI_Stack(1).LEVEL_KEY = ' ';                                        
    COMPUTE RI_Stack(1).SELECT_LEV = 0;                                         
  ENDBEGIN                                                                      
                                                                                
  FOR 1 UPDATE RPT_INST.LEVEL_KEY RPT_INST.LEV_SELECT RPT_INST.SELECT_LEV       
    From RI_Stack(1)                                                            
  COMMIT                                                                        
-*  WINFORM SET HierMain.EditButt.VISIBLE TO YES                                
-*                                                                              
                                                                                
endcase                                                                         
CASE GO_DELETE                                                                  
Compute Confirm_Code = 'Y';                                                     
                                                                                
  IF (Confirm_Code EQ 'Y') AND (ISL_Stack.FocCount EQ 0) THEN                   
  BEGIN                                                                         
    COMPUTE RI_Stack(1).LEV_SELECT = ' ';                                       
    COMPUTE RI_Stack(1).LEVEL_KEY = ' ';                                        
    COMPUTE RI_Stack(1).SELECT_LEV = 0;                                         
  ENDBEGIN                                                                      
  FOR 1 UPDATE RPT_INST.LEVEL_KEY RPT_INST.LEV_SELECT RPT_INST.SELECT_LEV       
    From RI_Stack(1)                                                            
  COMMIT                                                                        
                                                                                
  IF (Confirm_Code EQ 'N') OR (ISL_Stack.FocCount EQ 0) THEN GOTO ENDCASE       
  DELETE IHIER_SL.INST_KEY FROM ISL_Stack(ISL_Stack.FocIndex)                   
  COMMIT                                                                        
  REPOSITION IHIER_SL.INST_KEY                                                  
  STACK CLEAR ISL_Stack                                                         
  FOR ALL NEXT IHIER_SL.INST_KEY INTO ISL_Stack                                 
    WHERE IHIER_SL.INST_KEY EQ Inst_Parm                                        
  IF ISL_Stack.FocCount EQ 1 THEN                                               
    COMPUTE RI_Stack(1).LEV_SELECT = ISL_Stack(1).SEL_DESC;                     
  IF ISL_Stack.Foccount EQ 0 THEN                                               
  BEGIN                                                                         
    COMPUTE RI_Stack(1).LEV_SELECT = ' ';                                       
    COMPUTE RI_Stack(1).LEVEL_KEY = ' ';                                        
    COMPUTE RI_Stack(1).SELECT_LEV = 0;                                         
  ENDBEGIN                                                                      
                                                                                
  FOR 1 UPDATE RPT_INST.LEVEL_KEY RPT_INST.LEV_SELECT RPT_INST.SELECT_LEV       
    From RI_Stack(1)                                                            
  COMMIT                                                                        
-*  WINFORM SET HierMain.EditButt.VISIBLE TO YES                                
-*                                                                              
  WINFORM SET HierMain.DELButt.VISIBLE TO YES                                   
  WINFORM SET HierMain.Image2.VISIBLE TO NO                                     
  endcase                                                                       
                                                                                
case Conf_Yes                                                                   
                                                                                
Winform refresh HierMain;                                                       
                                                                                
  COMPUTE Confirm_Code = 'Y';                                                   
  WINFORM CLOSE DelConfirm                                                      
endcase                                                                         
                                                                                
case Conf_No                                                                    
  COMPUTE Confirm_Code = 'N';                                                   
  WINFORM CLOSE DelConfirm                                                      
endcase                                                                         
                                                                                
case Edit_Selects                                                               
                                                                                
-* turn off multiple selects for version 1.0                                    
-*                                                                              
  IF RI_Stack(1).LEVEL_KEY NE ' ' THEN                                          
  BEGIN                                                                         
    COMPUTE ERR_MSG =                                                           
      "Warning, you are about to remove this reports hierarchy, and will nee"|| 
"d to reselect a hierarchy";                                                    
	 WINFORM SHOW EMsgd                                                            
-*    WINFORM SET HierMain.EditButt.VISIBLE TO NO                               
-*                                                                              
    WINFORM SET HierMain.HierMainList.FOCUS TO HERE                             
    GOTO ENDCASE                                                                
  ENDBEGIN                                                                      
                                                                                
  IF RI_Stack(1).LEVEL_KEY EQ ' ' OR                                            
    RI_Stack(1).LEVEL_KEY EQ Roll_Stack(1).ROLLUP_CODE THEN                     
    BEGIN                                                                       
      COMPUTE Lev_X = 1;                                                        
      PERFORM Get_SelStack                                                      
    ENDBEGIN                                                                    
    ELSE                                                                        
    BEGIN                                                                       
      COMPUTE Target = ISL_Stack(1).SEL_KEY;                                    
      PERFORM Find_TargLev                                                      
      PERFORM Get_SelStack                                                      
    ENDBEGIN                                                                    
  PERFORM Winform_HierSel                                                       
                                                                                
-* turn off multiple selects for version 1.0                                    
-*                                                                              
  IF RI_Stack(1).LEVEL_KEY NE ' ' THEN                                          
  BEGIN                                                                         
-*    WINFORM SET HierMain.EditButt.VISIBLE TO NO                               
-*                                                                              
    WINFORM SET HierMain.HierMainList.FOCUS TO HERE                             
    GOTO ENDCASE                                                                
  ENDBEGIN                                                                      
                                                                                
endcase                                                                         
                                                                                
case Back_Level                                                                 
  IF Lev_X EQ 1 THEN                                                            
  BEGIN                                                                         
    COMPUTE ERR_MSG =                                                           
      "Can't go any higher";                                                    
	 WINFORM SHOW EMsgs                                                            
    GOTO ENDCASE                                                                
  ENDBEGIN                                                                      
  COMPUTE Lev_X = Lev_X - 1;                                                    
  IF RI_Stack.SELECT_LEV EQ Lev_X THEN                                          
  BEGIN                                                                         
-*    WINFORM SET HierSel.HierSelButt.VISIBLE TO YES                            
-*                                                                              
-*    WINFORM SET HierSel.HierBrkButt.VISIBLE TO YES                            
-*                                                                              
  ENDBEGIN                                                                      
  ELSE BEGIN                                                                    
-*    WINFORM SET HierSel.HierSelButt.VISIBLE TO NO                             
-*                                                                              
-*    WINFORM SET HierSel.HierBrkButt.VISIBLE TO NO                             
-*                                                                              
  ENDBEGIN                                                                      
  COMPUTE Target = HSel_Stack(HSel_Stack.FocIndex).ROLL_KEY;                    
  PERFORM Find_TargLev                                                          
  PERFORM Get_SelStack                                                          
  WINFORM SET HierSel.HierSelList.FOCUS TO HERE                                 
endcase                                                                         
                                                                                
case Next_Level                                                                 
  IF Lev_X EQ Lev_Y THEN                                                        
  BEGIN                                                                         
    COMPUTE ERR_MSG =                                                           
      "Can't go any lower";                                                     
	 WINFORM SHOW EMsgs                                                            
    GOTO ENDCASE                                                                
  ENDBEGIN                                                                      
  COMPUTE Target = HSel_Stack(HSel_Stack.FocIndex).ROLL_KEY;                    
  PERFORM Find_TargLev                                                          
  COMPUTE Lev_X = Lev_X + 1;                                                    
  IF RI_Stack.SELECT_LEV EQ Lev_X THEN                                          
  BEGIN                                                                         
-*    WINFORM SET HierSel.HierSelButt.VISIBLE TO YES                            
-*                                                                              
-*    WINFORM SET HierSel.HierBrkButt.VISIBLE TO YES                            
-*                                                                              
  ENDBEGIN                                                                      
  ELSE BEGIN                                                                    
-*    WINFORM SET HierSel.HierSelButt.VISIBLE TO NO                             
-*                                                                              
-*    WINFORM SET HierSel.HierBrkButt.VISIBLE TO NO                             
-*                                                                              
  ENDBEGIN                                                                      
  PERFORM Get_SelStack                                                          
  WINFORM SET HierSel.HierSelList.FOCUS TO HERE                                 
endcase                                                                         
                                                                                
CASE Find_TargLev                                                               
  COMPUTE Targ_2 = '';                                                          
  COMPUTE Targ_4 = '';                                                          
  COMPUTE Targ_6 = '';                                                          
  COMPUTE Targ_8 = '';                                                          
  COMPUTE Targ_10 = '';                                                         
  COMPUTE Targ_12 = '';                                                         
  COMPUTE Targ_14 = '';                                                         
  COMPUTE Targ_16 = '';                                                         
  COMPUTE Targ_18 = '';                                                         
  COMPUTE Targ_20 = '';                                                         
  COMPUTE Targ_22 = '';                                                         
  COMPUTE Targ_24 = '';                                                         
  COMPUTE Targ_26 = '';                                                         
  COMPUTE Targ_28 = '';                                                         
  COMPUTE Targ_30 = '';                                                         
  COMPUTE Targ_32 = '';                                                         
  COMPUTE Targ_34 = '';                                                         
  COMPUTE Targ_36 = '';                                                         
  COMPUTE Targ_38 = '';                                                         
  COMPUTE Targ_40 = '';                                                         
  COMPUTE Targ_42 = '';                                                         
  COMPUTE Targ_44 = '';                                                         
  COMPUTE Targ_46 = '';                                                         
  COMPUTE Targ_48 = '';                                                         
  COMPUTE Lev_X = 0;                                                            
  IF POSIT(Target,50,'00',2,Lev_X) EQ 3                                         
    THEN BEGIN                                                                  
      COMPUTE Targ_2 = SUBSTR(50,Target,1,2,2,Targ_2);                          
      COMPUTE Lev_X = 1;                                                        
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 5                                         
    THEN BEGIN                                                                  
      COMPUTE Targ_2 = SUBSTR(50,Target,1,2,2,Targ_2);                          
      COMPUTE Targ_4 = SUBSTR(50,Target,1,4,4,Targ_4);                          
      COMPUTE Lev_X = 2;                                                        
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 7                                         
    THEN BEGIN                                                                  
      COMPUTE Targ_4 = SUBSTR(50,Target,1,4,4,Targ_4);                          
      COMPUTE Targ_6 = SUBSTR(50,Target,1,6,6,Targ_6);                          
      COMPUTE Lev_X = 3;                                                        
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 9                                         
    THEN BEGIN                                                                  
      COMPUTE Targ_6 = SUBSTR(50,Target,1,6,6,Targ_6);                          
      COMPUTE Targ_8 = SUBSTR(50,Target,1,8,8,Targ_8);                          
      COMPUTE Lev_X = 4;                                                        
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 11                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_8 = SUBSTR(50,Target,1,8,8,Targ_8);                          
      COMPUTE Targ_10 = SUBSTR(50,Target,1,10,10,Targ_10);                      
      COMPUTE Lev_X = 5;                                                        
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 13                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_10 = SUBSTR(50,Target,1,10,10,Targ_10);                      
      COMPUTE Targ_12 = SUBSTR(50,Target,1,12,12,Targ_12);                      
      COMPUTE Lev_X = 6;                                                        
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 15                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_12 = SUBSTR(50,Target,1,12,12,Targ_12);                      
      COMPUTE Targ_14 = SUBSTR(50,Target,1,14,14,Targ_14);                      
      COMPUTE Lev_X = 7;                                                        
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 17                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_14 = SUBSTR(50,Target,1,14,14,Targ_14);                      
      COMPUTE Targ_16 = SUBSTR(50,Target,1,16,16,Targ_16);                      
      COMPUTE Lev_X = 8;                                                        
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 19                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_16 = SUBSTR(50,Target,1,16,16,Targ_16);                      
      COMPUTE Targ_18 = SUBSTR(50,Target,1,18,18,Targ_18);                      
      COMPUTE Lev_X = 9;                                                        
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 21                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_18 = SUBSTR(50,Target,1,18,18,Targ_18);                      
      COMPUTE Targ_20 = SUBSTR(50,Target,1,20,20,Targ_20);                      
      COMPUTE Lev_X = 10;                                                       
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 23                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_20 = SUBSTR(50,Target,1,20,20,Targ_20);                      
      COMPUTE Targ_22 = SUBSTR(50,Target,1,22,22,Targ_22);                      
      COMPUTE Lev_X = 11;                                                       
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 25                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_22 = SUBSTR(50,Target,1,22,22,Targ_22);                      
      COMPUTE Targ_24 = SUBSTR(50,Target,1,24,24,Targ_24);                      
      COMPUTE Lev_X = 12;                                                       
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 27                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_24 = SUBSTR(50,Target,1,24,24,Targ_24);                      
      COMPUTE Targ_26 = SUBSTR(50,Target,1,26,26,Targ_26);                      
      COMPUTE Lev_X = 13;                                                       
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 29                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_26 = SUBSTR(50,Target,1,26,26,Targ_26);                      
      COMPUTE Targ_28 = SUBSTR(50,Target,1,28,28,Targ_28);                      
      COMPUTE Lev_X = 14;                                                       
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 31                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_28 = SUBSTR(50,Target,1,28,28,Targ_28);                      
      COMPUTE Targ_30 = SUBSTR(50,Target,1,30,30,Targ_30);                      
      COMPUTE Lev_X = 15;                                                       
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 33                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_30 = SUBSTR(50,Target,1,30,30,Targ_30);                      
      COMPUTE Targ_32 = SUBSTR(50,Target,1,32,32,Targ_32);                      
      COMPUTE Lev_X = 16;                                                       
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 35                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_32 = SUBSTR(50,Target,1,32,32,Targ_32);                      
      COMPUTE Targ_34 = SUBSTR(50,Target,1,34,34,Targ_34);                      
      COMPUTE Lev_X = 17;                                                       
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 37                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_34 = SUBSTR(50,Target,1,34,34,Targ_34);                      
      COMPUTE Targ_36 = SUBSTR(50,Target,1,36,36,Targ_36);                      
      COMPUTE Lev_X = 18;                                                       
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 39                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_36 = SUBSTR(50,Target,1,36,36,Targ_36);                      
      COMPUTE Targ_38 = SUBSTR(50,Target,1,38,38,Targ_38);                      
      COMPUTE Lev_X = 19;                                                       
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 41                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_38 = SUBSTR(50,Target,1,38,38,Targ_38);                      
      COMPUTE Targ_40 = SUBSTR(50,Target,1,40,40,Targ_40);                      
      COMPUTE Lev_X = 20;                                                       
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 43                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_40 = SUBSTR(50,Target,1,40,40,Targ_40);                      
      COMPUTE Targ_42 = SUBSTR(50,Target,1,42,42,Targ_42);                      
      COMPUTE Lev_X = 21;                                                       
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 45                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_42 = SUBSTR(50,Target,1,42,42,Targ_42);                      
      COMPUTE Targ_44 = SUBSTR(50,Target,1,44,44,Targ_44);                      
      COMPUTE Lev_X = 22;                                                       
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 47                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_44 = SUBSTR(50,Target,1,44,44,Targ_44);                      
      COMPUTE Targ_46 = SUBSTR(50,Target,1,46,46,Targ_46);                      
      COMPUTE Lev_X = 23;                                                       
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
  IF POSIT(Target,50,'00',2,Lev_X) EQ 49                                        
    THEN BEGIN                                                                  
      COMPUTE Targ_46 = SUBSTR(50,Target,1,46,46,Targ_46);                      
      COMPUTE Targ_48 = SUBSTR(50,Target,1,48,48,Targ_48);                      
      COMPUTE Lev_X = 24;                                                       
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
    ELSE                                                                        
    BEGIN                                                                       
      COMPUTE Targ_48 = SUBSTR(50,Target,1,48,48,Targ_48);                      
      COMPUTE Targ_50 = Target;                                                 
      COMPUTE Lev_X = 25;                                                       
      GOTO ENDCASE                                                              
    ENDBEGIN                                                                    
endcase                                                                         
                                                                                
case Get_SelStack                                                               
STACK CLEAR HSel_Stack                                                          
  COMPUTE Cnt1 = 0;                                                             
  REPEAT WHILE Cnt1 LT H_Temp.FocCount                                          
    COMPUTE Cnt1 = Cnt1 + 1;                                                    
    IF Lev_X EQ 1 THEN                                                          
    BEGIN                                                                       
      COMPUTE Post_48 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,3,50,48,Post_48);       
      IF Post_48 EQ Zeros_48 THEN                                               
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 2 THEN                                                          
    BEGIN                                                                       
      COMPUTE Key_2 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,2,2,Key_2);             
      COMPUTE Post_46 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,5,50,46,Post_46);       
      IF (Targ_2 EQ Key_2) AND (Post_46 EQ Zeros_46) THEN                       
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 3 THEN                                                          
    BEGIN                                                                       
      COMPUTE Key_4 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,4,4,Key_4);             
      COMPUTE Post_44 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,7,50,44,Post_44);       
      IF (Targ_4 EQ Key_4) AND (Post_44 EQ Zeros_44) THEN                       
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 4 THEN                                                          
    BEGIN                                                                       
      COMPUTE Key_6 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,6,6,Key_6);             
      COMPUTE Post_42 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,9,50,42,Post_42);       
      IF (Targ_6 EQ Key_6) AND (Post_42 EQ Zeros_42) THEN                       
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 5 THEN                                                          
    BEGIN                                                                       
      COMPUTE Key_8 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,8,8,Key_8);             
      COMPUTE Post_40 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,11,50,40,Post_40);      
      IF (Targ_8 EQ Key_8) AND (Post_40 EQ Zeros_40) THEN                       
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 6 THEN                                                          
    BEGIN                                                                       
      COMPUTE Key_10 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,10,10,Key_10);         
      COMPUTE Post_38 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,13,50,38,Post_38);      
      IF (Targ_10 EQ Key_10) AND (Post_38 EQ Zeros_38) THEN                     
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 7 THEN                                                          
    BEGIN                                                                       
      COMPUTE Key_12 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,12,12,Key_12);         
      COMPUTE Post_36 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,15,50,36,Post_36);      
      IF (Targ_12 EQ Key_12) AND (Post_36 EQ Zeros_36) THEN                     
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 8 THEN                                                          
    BEGIN                                                                       
      COMPUTE Key_14 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,14,14,Key_14);         
      COMPUTE Post_34 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,17,50,34,Post_34);      
      IF (Targ_14 EQ Key_14) AND (Post_34 EQ Zeros_34) THEN                     
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 9 THEN                                                          
    BEGIN                                                                       
      COMPUTE Key_16 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,16,16,Key_16);         
      COMPUTE Post_32 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,19,50,32,Post_32);      
      IF (Targ_16 EQ Key_16) AND (Post_32 EQ Zeros_32) THEN                     
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 10 THEN                                                         
    BEGIN                                                                       
      COMPUTE Key_18 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,18,18,Key_18);         
      COMPUTE Post_30 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,21,50,30,Post_30);      
      IF (Targ_18 EQ Key_18) AND (Post_30 EQ Zeros_30) THEN                     
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 11 THEN                                                         
    BEGIN                                                                       
      COMPUTE Key_20 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,20,20,Key_20);         
      COMPUTE Post_28 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,23,50,28,Post_28);      
      IF (Targ_20 EQ Key_20) AND (Post_28 EQ Zeros_28) THEN                     
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 12 THEN                                                         
    BEGIN                                                                       
      COMPUTE Key_22 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,22,22,Key_22);         
      COMPUTE Post_26 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,25,50,26,Post_26);      
      IF (Targ_22 EQ Key_22) AND (Post_26 EQ Zeros_26) THEN                     
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 13 THEN                                                         
    BEGIN                                                                       
      COMPUTE Key_24 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,24,24,Key_24);         
      COMPUTE Post_24 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,27,50,24,Post_24);      
      IF (Targ_24 EQ Key_24) AND (Post_24 EQ Zeros_24) THEN                     
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 14 THEN                                                         
    BEGIN                                                                       
      COMPUTE Key_26 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,26,26,Key_26);         
      COMPUTE Post_22 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,29,50,22,Post_22);      
      IF (Targ_26 EQ Key_26) AND (Post_22 EQ Zeros_22) THEN                     
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 15 THEN                                                         
    BEGIN                                                                       
      COMPUTE Key_28 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,28,28,Key_28);         
      COMPUTE Post_20 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,31,50,20,Post_20);      
      IF (Targ_28 EQ Key_28) AND (Post_20 EQ Zeros_20) THEN                     
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 16 THEN                                                         
    BEGIN                                                                       
      COMPUTE Key_30 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,30,30,Key_30);         
      COMPUTE Post_18 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,33,50,18,Post_18);      
      IF (Targ_30 EQ Key_30) AND (Post_18 EQ Zeros_18) THEN                     
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 17 THEN                                                         
    BEGIN                                                                       
      COMPUTE Key_32 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,32,32,Key_32);         
      COMPUTE Post_16 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,35,50,16,Post_16);      
      IF (Targ_32 EQ Key_32) AND (Post_16 EQ Zeros_16) THEN                     
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 18 THEN                                                         
    BEGIN                                                                       
      COMPUTE Key_34 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,34,34,Key_34);         
      COMPUTE Post_14 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,37,50,14,Post_14);      
      IF (Targ_34 EQ Key_34) AND (Post_14 EQ Zeros_14) THEN                     
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 19 THEN                                                         
    BEGIN                                                                       
      COMPUTE Key_36 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,36,36,Key_36);         
      COMPUTE Post_12 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,39,50,12,Post_12);      
      IF (Targ_36 EQ Key_36) AND (Post_12 EQ Zeros_12) THEN                     
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 20 THEN                                                         
    BEGIN                                                                       
      COMPUTE Key_38 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,38,38,Key_38);         
      COMPUTE Post_10 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,41,50,10,Post_10);      
      IF (Targ_38 EQ Key_38) AND (Post_10 EQ Zeros_10) THEN                     
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 21 THEN                                                         
    BEGIN                                                                       
      COMPUTE Key_40 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,40,40,Key_40);         
      COMPUTE Post_8 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,43,50,8,Post_8);         
      IF (Targ_40 EQ Key_40) AND (Post_8 EQ Zeros_8) THEN                       
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 22 THEN                                                         
    BEGIN                                                                       
      COMPUTE Key_42 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,42,42,Key_42);         
      COMPUTE Post_6 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,45,50,6,Post_6);         
      IF (Targ_42 EQ Key_42) AND (Post_6 EQ Zeros_6) THEN                       
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 23 THEN                                                         
    BEGIN                                                                       
      COMPUTE Key_44 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,44,44,Key_44);         
      COMPUTE Post_4 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,47,50,4,Post_4);         
      IF (Targ_44 EQ Key_44) AND (Post_4 EQ Zeros_4) THEN                       
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 24 THEN                                                         
    BEGIN                                                                       
      COMPUTE Key_46 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,46,46,Key_46);         
      COMPUTE Post_2 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,49,50,2,Post_2);         
      IF (Targ_46 EQ Key_46) AND (Post_2 EQ Zeros_2) THEN                       
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
    IF Lev_X EQ 25 THEN                                                         
    BEGIN                                                                       
      COMPUTE Key_48 = SUBSTR(50,H_Temp(Cnt1).ROLL_KEY,1,48,48,Key_48);         
      IF Targ_48 EQ Key_48 THEN                                                 
      BEGIN                                                                     
        COMPUTE Cnt2 = HSel_Stack.FocCount + 1;                                 
        COPY FROM H_Temp(Cnt1) INTO HSel_Stack(Cnt2)                            
      ENDBEGIN                                                                  
      GOTO ENDREPEAT                                                            
    ENDBEGIN                                                                    
  ENDREPEAT                                                                     
  STACK SORT HSel_Stack BY ROLL_KEY                                             
  COMPUTE HSel_Stack.FocIndex = 1;                                              
  COMPUTE Pick = 1;                                                             
endcase                                                                         
                                                                                
case Disp_Breaks                                                                
  PERFORM Pop_Sorts                                                             
  IF S_Stack.FocCount EQ 0 THEN                                                 
  BEGIN                                                                         
    COMPUTE ERR_MSG =                                                           
      "A Hierarchy Level has not been selected yet";                            
	 WINFORM SHOW EMsgs                                                            
    GOTO ENDCASE                                                                
  ENDBEGIN                                                                      
  PERFORM Winform_HierSort                                                      
endcase                                                                         
                                                                                
case Pop_Sorts                                                                  
-* This case populates and initializes the Radio buttons used in conjunction    
-*                                                                              
-*   with the Sort Field selection form                                         
-*                                                                              
  REPOSITION IHIER_BK.INST_KEY                                                  
  STACK CLEAR S_Stack                                                           
  FOR ALL NEXT IHIER_BK.INST_KEY INTO S_Stack                                   
    WHERE IHIER_BK.INST_KEY EQ RI_Stack(1).INST_KEY AND                         
          IHIER_BK.SORT_SELECT EQ 'Y'                                           
  STACK SORT S_Stack BY SORT_SEQ                                                
  COMPUTE SOrd_HL(1).Rad = 'HIGH';                                              
  COMPUTE SOrd_HL(2).Rad = 'LOW';                                               
  COMPUTE PBk_YN(1).Rad = 'YES';                                                
  COMPUTE PBk_YN(2).Rad = 'NO';                                                 
  COMPUTE SkpL_YN(1).Rad = 'YES';                                               
  COMPUTE SkpL_YN(2).Rad = 'NO';                                                
  COMPUTE SOrd_HL.FocIndex = 1;                                                 
  COMPUTE PBk_YN.FocIndex = 1;                                                  
  COMPUTE SkpL_YN.FocIndex = 1;                                                 
  PERFORM SetSort_Buttons                                                       
endcase                                                                         
                                                                                
case SetSort_Buttons                                                            
  IF S_Stack.FocCount EQ 0 THEN                                                 
-* If the sort stack is empty, default the Radio buttons to Yes                 
-*                                                                              
  BEGIN                                                                         
    COMPUTE SOrd_HL.FocIndex = 1;                                               
    COMPUTE PBk_YN.FocIndex = 1;                                                
    COMPUTE SkpL_YN.FocIndex = 1;                                               
  ENDBEGIN                                                                      
  ELSE                                                                          
  BEGIN                                                                         
-* If the sort stack is not empty, set the Radio buttons according to the       
-*                                                                              
-*   flag value within the corresponding Report Field stack row                 
-*                                                                              
    COMPUTE SOrd_HL.FocIndex =                                                  
      IF S_Stack(S_Stack.FocIndex).SORT_ORDER EQ 'H' THEN 1 ELSE 2;             
    COMPUTE PBk_YN.FocIndex =                                                   
      IF S_Stack(S_Stack.FocIndex).PG_BREAK EQ 'Y' THEN 1 ELSE 2;               
    COMPUTE SkpL_YN.FocIndex =                                                  
      IF S_Stack(S_Stack.FocIndex).SKP_LINE EQ 'Y' THEN 1 ELSE 2;               
  ENDBEGIN                                                                      
endcase                                                                         
                                                                                
case ChgSort_Button                                                             
  COMPUTE S_Stack(S_Stack.FocIndex).SORT_ORDER =                                
    IF SOrd_HL.FocIndex EQ 1 THEN 'H' ELSE 'L';                                 
  COMPUTE S_Stack(S_Stack.FocIndex).PG_BREAK =                                  
    IF PBk_YN.FocIndex EQ 1 THEN 'Y' ELSE 'N';                                  
  COMPUTE S_Stack(S_Stack.FocIndex).SKP_LINE =                                  
    IF SkpL_YN.FocIndex EQ 1 THEN 'Y' ELSE 'N';                                 
  PERFORM Update_Sort                                                           
endcase                                                                         
                                                                                
case Upd_SubH                                                                   
  COMPUTE S_Stack(S_Stack.FocIndex).SUBH_SELECT =                               
    IF ((S_Stack(S_Stack.FocIndex).SUBH_TEXT1 NE ' ') OR                        
       (S_Stack(S_Stack.FocIndex).SUBH_TEXT2 NE ' ')) THEN 'Y' ELSE 'N';        
  IF (RI_Stack(RI_Stack.FocIndex).CONTROL_ID EQ 'PGM' OR                        
    RI_Stack(RI_Stack.FocIndex).CONTROL_ID EQ 'SPC') AND                        
    (Cntl_Stack(1).CONTROL_ID NE 'PGM' AND                                      
    Cntl_Stack(1).CONTROL_ID NE 'SPC') THEN                                     
  BEGIN                                                                         
    COMPUTE ERR_MSG =                                                           
      "You do not have authority to update this Instance !";                    
	 WINFORM SHOW EMsgs                                                            
    GOTO ENDCASE                                                                
  ENDBEGIN                                                                      
                                                                                
  PERFORM Update_Sort                                                           
endcase                                                                         
                                                                                
case Upd_SubF                                                                   
  COMPUTE S_Stack(S_Stack.FocIndex).SUBF_SELECT =                               
    IF ((S_Stack(S_Stack.FocIndex).SUBF_TEXT1 NE ' ') OR                        
       (S_Stack(S_Stack.FocIndex).SUBF_TEXT2 NE ' ')) THEN 'Y' ELSE 'N';        
  IF (RI_Stack(RI_Stack.FocIndex).CONTROL_ID EQ 'PGM' OR                        
    RI_Stack(RI_Stack.FocIndex).CONTROL_ID EQ 'SPC') AND                        
    (Cntl_Stack(1).CONTROL_ID NE 'PGM' AND                                      
    Cntl_Stack(1).CONTROL_ID NE 'SPC') THEN                                     
  BEGIN                                                                         
    COMPUTE ERR_MSG =                                                           
      "You do not have authority to update this Instance !";                    
	 WINFORM SHOW EMsgs                                                            
    GOTO ENDCASE                                                                
  ENDBEGIN                                                                      
                                                                                
  PERFORM Update_Sort                                                           
endcase                                                                         
                                                                                
case Upd_SubT                                                                   
  COMPUTE S_Stack(S_Stack.FocIndex).SBTOT_SELECT =                              
    IF ((S_Stack(S_Stack.FocIndex).SBTOT_TEXT1 NE ' ') OR                       
       (S_Stack(S_Stack.FocIndex).SBTOT_TEXT2 NE ' ')) THEN 'Y' ELSE 'N';       
  IF (RI_Stack(RI_Stack.FocIndex).CONTROL_ID EQ 'PGM' OR                        
    RI_Stack(RI_Stack.FocIndex).CONTROL_ID EQ 'SPC') AND                        
    (Cntl_Stack(1).CONTROL_ID NE 'PGM' AND                                      
    Cntl_Stack(1).CONTROL_ID NE 'SPC') THEN                                     
  BEGIN                                                                         
    COMPUTE ERR_MSG =                                                           
      "You do not have authority to update this Instance !";                    
	 WINFORM SHOW EMsgs                                                            
    GOTO ENDCASE                                                                
  ENDBEGIN                                                                      
                                                                                
  PERFORM Update_Sort                                                           
endcase                                                                         
                                                                                
case Clr_SubH                                                                   
IF (RI_Stack(RI_Stack.FocIndex).CONTROL_ID EQ 'PGM' OR                          
    RI_Stack(RI_Stack.FocIndex).CONTROL_ID EQ 'SPC') AND                        
   (Cntl_Stack(1).CONTROL_ID NE 'PGM' AND                                       
    Cntl_Stack(1).CONTROL_ID NE 'SPC') THEN                                     
  BEGIN                                                                         
    COMPUTE ERR_MSG =                                                           
      "You do not have authority to update this Instance !";                    
	 WINFORM SHOW EMsgs                                                            
    GOTO ENDCASE                                                                
  ENDBEGIN                                                                      
  COMPUTE S_Stack(S_Stack.FocIndex).SUBH_SELECT = 'N';                          
  COMPUTE S_Stack(S_Stack.FocIndex).SUBH_TEXT1 = ' ';                           
  COMPUTE S_Stack(S_Stack.FocIndex).SUBH_TEXT2 = ' ';                           
  PERFORM Update_Sort                                                           
  WINFORM CLOSE                                                                 
endcase                                                                         
                                                                                
case Clr_SubF                                                                   
IF (RI_Stack(RI_Stack.FocIndex).CONTROL_ID EQ 'PGM' OR                          
    RI_Stack(RI_Stack.FocIndex).CONTROL_ID EQ 'SPC') AND                        
   (Cntl_Stack(1).CONTROL_ID NE 'PGM' AND                                       
    Cntl_Stack(1).CONTROL_ID NE 'SPC') THEN                                     
  BEGIN                                                                         
    COMPUTE ERR_MSG =                                                           
      "You do not have authority to update this Instance !";                    
	 WINFORM SHOW EMsgs                                                            
    GOTO ENDCASE                                                                
  ENDBEGIN                                                                      
  COMPUTE S_Stack(S_Stack.FocIndex).SUBF_SELECT = 'N';                          
  COMPUTE S_Stack(S_Stack.FocIndex).SUBF_TEXT1 = ' ';                           
  COMPUTE S_Stack(S_Stack.FocIndex).SUBF_TEXT2 = ' ';                           
  PERFORM Update_Sort                                                           
  WINFORM CLOSE                                                                 
endcase                                                                         
                                                                                
case Clr_SubT                                                                   
IF (RI_Stack(RI_Stack.FocIndex).CONTROL_ID EQ 'PGM' OR                          
    RI_Stack(RI_Stack.FocIndex).CONTROL_ID EQ 'SPC') AND                        
   (Cntl_Stack(1).CONTROL_ID NE 'PGM' AND                                       
    Cntl_Stack(1).CONTROL_ID NE 'SPC') THEN                                     
  BEGIN                                                                         
    COMPUTE ERR_MSG =                                                           
      "You do not have authority to update this Instance !";                    
	 WINFORM SHOW EMsgs                                                            
    GOTO ENDCASE                                                                
  ENDBEGIN                                                                      
  COMPUTE S_Stack(S_Stack.FocIndex).SBTOT_SELECT = 'N';                         
  COMPUTE S_Stack(S_Stack.FocIndex).SBTOT_TEXT1 = ' ';                          
  COMPUTE S_Stack(S_Stack.FocIndex).SBTOT_TEXT2 = ' ';                          
  PERFORM Update_Sort                                                           
  WINFORM CLOSE                                                                 
endcase                                                                         
                                                                                
case Disp_SrtSH                                                                 
  COMPUTE Num_BkLev = MASK(S_Stack(S_Stack.FocIndex).FLD_NAME, '$$$$99');       
  COMPUTE Alph_BkLev = Num_BkLev;                                               
  COMPUTE Alph_BkLev = LJUST(2, Alph_BkLev, Alph_BkLev);                        
  IF S_Stack(S_Stack.FocIndex).SUBH_TEXT1 EQ ' ' THEN                           
    COMPUTE S_Stack(S_Stack.FocIndex).SUBH_TEXT1 =                              
      '[Type in your text here] <H' || Alph_BkLev || 'LEVEL_DESC';              
-* ibirj  Winform SHOW SrtSH                                                    
-*                                                                              
  PERFORM Update_Sort                                                           
endcase                                                                         
                                                                                
case Disp_SrtSF                                                                 
  COMPUTE Num_BkLev = MASK(S_Stack(S_Stack.FocIndex).FLD_NAME, '$$$$99');       
  COMPUTE Alph_BkLev = Num_BkLev;                                               
  COMPUTE Alph_BkLev = LJUST(2, Alph_BkLev, Alph_BkLev);                        
  IF S_Stack(S_Stack.FocIndex).SUBF_TEXT1 EQ ' ' THEN                           
    COMPUTE S_Stack(S_Stack.FocIndex).SUBF_TEXT1 =                              
      '[Type in your text here] <H' || Alph_BkLev || 'LEVEL_DESC';              
-* ibirj  Winform SHOW SrtSF                                                    
-*                                                                              
  PERFORM Update_Sort                                                           
endcase                                                                         
                                                                                
case Disp_SrtST                                                                 
-* ibirj  Winform SHOW SrtST                                                    
-*                                                                              
  PERFORM Update_Sort                                                           
endcase                                                                         
                                                                                
case Update_Sort                                                                
FOR 1 UPDATE                                                                    
    IHIER_BK.SUBH_SELECT IHIER_BK.SUBH_TEXT1 IHIER_BK.SUBH_TEXT2                
    IHIER_BK.SUBF_SELECT IHIER_BK.SUBF_TEXT1 IHIER_BK.SUBF_TEXT2                
    IHIER_BK.PG_BREAK IHIER_BK.SKP_LINE IHIER_BK.SORT_ORDER                     
    IHIER_BK.SBTOT_SELECT IHIER_BK.SBTOT_TEXT1 IHIER_BK.SBTOT_TEXT2             
    FROM S_Stack(S_Stack.FocIndex)                                              
  COMMIT                                                                        
endcase                                                                         
                                                                                
case Hier_Select                                                                
-* Turn off the multiple select option in v1.0                                  
-*                                                                              
-*  IF ISL_Stack.Foccount GT 0 THEN                                             
-*                                                                              
-*    BEGIN                                                                     
-*                                                                              
-*    COMPUTE ERR_MSG =                                                         
-*                                                                              
-*      "Sorry, only one selection level allowed in this version";              
-*                                                                              
-*	 WINFORM SHOW EMsgs                                                          
-*                                                                              
-*    WINFORM SET HierSel.HierSelButt.VISIBLE TO NO                             
-*                                                                              
-*    WINFORM SET HierSel.HierSelList.FOCUS TO HERE                             
-*                                                                              
-*    GOTO ENDCASE                                                              
-*                                                                              
-*  ENDBEGIN                                                                    
-*                                                                              
-*                                                                              
-*                                                                              
  IF ISL_Stack.Foccount EQ 0 THEN                                               
  BEGIN                                                                         
    PERFORM Remove_IHier                                                        
    COMPUTE Target = HSel_Stack(Pick).ROLL_KEY;                                 
    COMPUTE RI_Stack(1).LEVEL_KEY = Target;                                     
    COMPUTE RI_Stack(1).LEV_SELECT = HSel_Stack(Pick).LEVEL_DESC;               
    COMPUTE RI_Stack(1).SELECT_LEV = Lev_X;                                     
    PERFORM Find_TargLev                                                        
    PERFORM Break_50                                                            
    ENDBEGIN                                                                    
  ELSE                                                                          
  BEGIN                                                                         
-*    COMPUTE RI_Stack(1).LEVEL_KEY = 'MULTIPLE';                               
-*                                                                              
-*    COMPUTE RI_Stack(1).LEV_SELECT = 'MULTIPLE';                              
    COMPUTE RI_Stack(1).SELECT_LEV = HSel_Stack(Pick).LEVEL_DESC;               
-*wlt    COMPUTE RI_Stack(1).SELECT_LEV = 1;                                    
    COMPUTE RI_Stack(1).LEVEL_KEY = Target;                                     
                                                                                
    COMPUTE RI_Stack(1).LEV_SELECT = HSel_Stack(Pick).LEVEL_DESC;               
    COMPUTE RI_Stack(1).SELECT_LEV = Lev_X;                                     
                                                                                
    PERFORM Find_TargLev                                                        
  ENDBEGIN                                                                      
  COMPUTE Cnt1 = ISL_Stack.FocCount;                                            
  COMPUTE ISL_Stack(Cnt1).INST_KEY = RI_Stack(1).INST_KEY;                      
  COMPUTE ISL_Stack(Cnt1).SEL_KEY = HSel_Stack(Pick).ROLL_KEY;                  
  COMPUTE ISL_Stack(Cnt1).SEL_DESC = HSel_Stack(Pick).LEVEL_DESC;               
  COMPUTE ISL_Stack(Cnt1).ROL_LEVEL = HSel_Stack(Pick).ROLL_LEV;                
  COMPUTE ISL_Stack(Cnt1).SEL_LEVEL = RI_Stack(1).SELECT_LEV;                   
  REPOSITION IHIER_SL.INST_KEY                                                  
  FOR 1 INCLUDE IHIER_SL.INST_KEY FROM ISL_Stack(Cnt1)                          
  FOR 1 UPDATE RPT_INST.LEVEL_KEY RPT_INST.LEV_SELECT RPT_INST.SELECT_LEV       
    From RI_Stack(1)                                                            
  COMMIT                                                                        
-*  PERFORM Disp_Breaks                                                         
-*                                                                              
-* Turn off the multiple select option in v1.0                                  
-*                                                                              
  WINFORM SET HierSel.HierSelButt.VISIBLE TO NO                                 
  WINFORM SET HierSel.HierSelList.FOCUS TO HERE                                 
  WINFORM CLOSE HIERSEL                                                         
endcase                                                                         
                                                                                
case Upd_LevDesc                                                                
  FOR 1 UPDATE RPT_INST.LEV_SELECT FROM RI_Stack(1)                             
  COMMIT                                                                        
endcase                                                                         
                                                                                
CASE Remove_IHier                                                               
  REPOSITION IHIER_BK.INST_KEY                                                  
  STACK CLEAR S_Stack                                                           
  FOR ALL NEXT IHIER_BK.INST_KEY INTO S_Stack                                   
   WHERE IHIER_BK.INST_KEY EQ RI_Stack(1).INST_KEY                              
  FOR ALL DELETE IHIER_BK.INST_KEY FROM S_Stack                                 
  FOR ALL DELETE IHIER_SL.INST_KEY FROM ISL_Stack                               
  COMMIT                                                                        
endcase                                                                         
                                                                                
CASE Break_50                                                                   
  STACK CLEAR S_Stack                                                           
  COMPUTE Cnt1 = 1;                                                             
  REPEAT WHILE Cnt1 LE Lev_Y                                                    
    COMPUTE S_Stack(Cnt1).INST_KEY = RI_Stack(1).INST_KEY;                      
    COMPUTE Sub_Start = (Cnt1 * 2) - 1;                                         
    COMPUTE Sub_Stop = Cnt1 * 2;                                                
    COMPUTE Snag_Hold = SUBSTR(50,Target,Sub_Start,Sub_Stop,2,Snag_Hold);       
    COMPUTE S_Stack(Cnt1).HIER_LEVEL =                                          
      IF Cnt1 GT Lev_X THEN EDIT(Cnt1) ELSE Snag_Hold;                          
    COMPUTE S_Stack(Cnt1).SORT_SEQ = Cnt1;                                      
    PERFORM Snag_Break                                                          
    COMPUTE S_Stack(Cnt1).FLD_DESC = Snag_Targ;                                 
    COMPUTE S_Stack(Cnt1).SORT_OPTION = 'Y';                                    
    COMPUTE S_Stack(Cnt1).SORT_SELECT =                                         
      IF Cnt1 LT Lev_X THEN 'N' ELSE 'Y';                                       
    COMPUTE S_Stack(Cnt1).SORT_ORDER = 'L';                                     
    COMPUTE S_Stack(Cnt1).PG_BREAK = 'N';                                       
    COMPUTE S_Stack(Cnt1).SKP_LINE = 'N';                                       
    COMPUTE S_Stack(Cnt1).SUBH_SELECT = 'N';                                    
    COMPUTE S_Stack(Cnt1).SUBF_SELECT = 'N';                                    
    COMPUTE S_Stack(Cnt1).SBTOT_SELECT = 'N';                                   
    COMPUTE Cnt1 = Cnt1 + 1;                                                    
  ENDREPEAT                                                                     
  REPOSITION IHIER_BK.INST_KEY                                                  
  FOR ALL INCLUDE IHIER_BK.INST_KEY FROM S_Stack                                
  COMMIT                                                                        
endcase                                                                         
                                                                                
CASE Snag_Break                                                                 
  IF Cnt1 EQ 1 THEN BEGIN                                                       
    COMPUTE Snag_Targ = 'BREAK LEVEL 1';                                        
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV01';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 2 THEN BEGIN                                                       
    COMPUTE Snag_Targ = 'BREAK LEVEL 2';                                        
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV02';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 3 THEN BEGIN                                                       
    COMPUTE Snag_Targ = 'BREAK LEVEL 3';                                        
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV03';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 4 THEN BEGIN                                                       
    COMPUTE Snag_Targ = 'BREAK LEVEL 4';                                        
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV04';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 5 THEN BEGIN                                                       
    COMPUTE Snag_Targ = 'BREAK LEVEL 5';                                        
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV05';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 6 THEN BEGIN                                                       
    COMPUTE Snag_Targ = 'BREAK LEVEL 6';                                        
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV06';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 7 THEN BEGIN                                                       
    COMPUTE Snag_Targ = 'BREAK LEVEL 7';                                        
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV07';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 8 THEN BEGIN                                                       
    COMPUTE Snag_Targ = 'BREAK LEVEL 8';                                        
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV08';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 9 THEN BEGIN                                                       
    COMPUTE Snag_Targ = 'BREAK LEVEL 9';                                        
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV09';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 10 THEN BEGIN                                                      
    COMPUTE Snag_Targ = 'BREAK LEVEL 10';                                       
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV10';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 11 THEN BEGIN                                                      
    COMPUTE Snag_Targ = 'BREAK LEVEL 11';                                       
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV11';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 12 THEN BEGIN                                                      
    COMPUTE Snag_Targ = 'BREAK LEVEL 12';                                       
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV12';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 13 THEN BEGIN                                                      
    COMPUTE Snag_Targ = 'BREAK LEVEL 13';                                       
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV13';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 14 THEN BEGIN                                                      
    COMPUTE Snag_Targ = 'BREAK LEVEL 14';                                       
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV14';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 15 THEN BEGIN                                                      
    COMPUTE Snag_Targ = 'BREAK LEVEL 15';                                       
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV15';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 16 THEN BEGIN                                                      
    COMPUTE Snag_Targ = 'BREAK LEVEL 16';                                       
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV16';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 17 THEN BEGIN                                                      
    COMPUTE Snag_Targ = 'BREAK LEVEL 17';                                       
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV17';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 18 THEN BEGIN                                                      
    COMPUTE Snag_Targ = 'BREAK LEVEL 18';                                       
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV18';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 19 THEN BEGIN                                                      
    COMPUTE Snag_Targ = 'BREAK LEVEL 19';                                       
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV19';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 20 THEN BEGIN                                                      
    COMPUTE Snag_Targ = 'BREAK LEVEL 20';                                       
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV20';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 21 THEN BEGIN                                                      
    COMPUTE Snag_Targ = 'BREAK LEVEL 21';                                       
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV21';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 22 THEN BEGIN                                                      
    COMPUTE Snag_Targ = 'BREAK LEVEL 22';                                       
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV22';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 23 THEN BEGIN                                                      
    COMPUTE Snag_Targ = 'BREAK LEVEL 23';                                       
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV23';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 24 THEN BEGIN                                                      
    COMPUTE Snag_Targ = 'BREAK LEVEL 24';                                       
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV24';                                  
  ENDBEGIN                                                                      
  IF Cnt1 EQ 25 THEN BEGIN                                                      
    COMPUTE Snag_Targ = 'BREAK LEVEL 25';                                       
    COMPUTE S_Stack(Cnt1).FLD_NAME = 'HLEV25';                                  
  ENDBEGIN                                                                      
endcase                                                                         
                                                                                
case Pick_Hier                                                                  
COMPUTE Pick = HSel_Stack.FocIndex ;                                            
endcase                                                                         
                                                                                
CASE HierMain_Off                                                               
-*  WINFORM SET HierMain.EditButt.VISIBLE TO NO                                 
-*                                                                              
  WINFORM SET HierMain.DelButt.VISIBLE TO YES                                   
  WINFORM SET HierMain.ExtButt.VISIBLE TO NO                                    
endcase                                                                         
                                                                                
CASE HierMain_On                                                                
-*  WINFORM SET HierMain.EditButt.VISIBLE TO YES                                
-*                                                                              
  WINFORM SET HierMain.DelButt.VISIBLE TO YES                                   
  WINFORM SET HierMain.ExtButt.VISIBLE TO YES                                   
endcase                                                                         
                                                                                
CASE HierSel_Off                                                                
  WINFORM SET HierSel.HierSelButt.VISIBLE TO NO                                 
  WINFORM SET HierSel.HBack.VISIBLE TO NO                                       
  WINFORM SET HierSel.HNext.VISIBLE TO NO                                       
  WINFORM SET HierSel.HExt.VISIBLE TO NO                                        
endcase                                                                         
                                                                                
CASE HierSel_On                                                                 
  WINFORM SET HierSel.HierSelButt.VISIBLE TO YES                                
  WINFORM SET HierSel.HBack.VISIBLE TO YES                                      
  WINFORM SET HierSel.HNext.VISIBLE TO YES                                      
  WINFORM SET HierSel.HExt.VISIBLE TO YES                                       
endcase                                                                         
                                                                                
CASE Push_EditButt                                                              
  PERFORM HierMain_Off                                                          
  PERFORM Edit_Selects                                                          
  PERFORM HierMain_On                                                           
endcase                                                                         
                                                                                
CASE Push_DelButt                                                               
  PERFORM HierMain_Off                                                          
  PERFORM Delete_Level                                                          
  PERFORM HierMain_On                                                           
  WINFORM SET HierMain.DelButt.VISIBLE TO YES                                   
endcase                                                                         
                                                                                
CASE Push_DelOK                                                                 
  PERFORM HierMain_Off                                                          
  PERFORM Go_Delete                                                             
  PERFORM HierMain_On                                                           
endcase                                                                         
                                                                                
CASE Push_HierSelButt                                                           
  PERFORM HierSel_Off                                                           
  PERFORM Hier_Select                                                           
  PERFORM HierSel_On                                                            
endcase                                                                         
                                                                                
CASE Push_HBack                                                                 
  PERFORM HierSel_Off                                                           
  PERFORM Back_Level                                                            
  PERFORM HierSel_On                                                            
endcase                                                                         
                                                                                
CASE Push_HNext                                                                 
  PERFORM HierSel_Off                                                           
  PERFORM Next_Level                                                            
  PERFORM HierSel_On                                                            
endcase                                                                         
case Winform_HierSel                                                            
   Winform show HierSel                                                         
endcase                                                                         
case Winform_HierSort                                                           
-* ibirj   Winform show HierSort                                                
-*                                                                              
endcase                                                                         
case Winform_SrtSH                                                              
-* ibirj   Winform show SrtSH                                                   
-*                                                                              
endcase                                                                         
case Winform_SrtSF                                                              
-* ibirj   Winform show SrtSF                                                   
-*                                                                              
endcase                                                                         
case Winform_SrtST                                                              
-* ibirj   Winform show SrtST                                                   
-*                                                                              
endcase                                                                         
case Winform_HierMain                                                           
   Winform show HierMain                                                        
endcase                                                                         
case Winform_DelConfirm                                                         
   Winform show DelConfirm                                                      
endcase                                                                         
                                                                                
CASE CLEAR_CLIENT                                                               
    COMPUTE RI_Stack(1).CLIENT1  = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT2  = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT3  = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT4  = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT5  = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT6  = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT7  = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT8  = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT9  = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT10 = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT11 = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT12 = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT13 = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT14 = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT15 = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT16 = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT17 = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT18 = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT19 = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT20 = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT21 = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT22 = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT23 = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT24 = ' ';                                         
    COMPUTE RI_Stack(1).CLIENT25 = ' ';                                         
    COMPUTE RI_Stack(1).CATG1  = ' ';                                           
    COMPUTE RI_Stack(1).CATG2  = ' ';                                           
    COMPUTE RI_Stack(1).CATG3  = ' ';                                           
    COMPUTE RI_Stack(1).CATG4  = ' ';                                           
    COMPUTE RI_Stack(1).CATG5  = ' ';                                           
    COMPUTE RI_Stack(1).CATG6  = ' ';                                           
    COMPUTE RI_Stack(1).CATG7  = ' ';                                           
    COMPUTE RI_Stack(1).CATG8  = ' ';                                           
    COMPUTE RI_Stack(1).CATG9  = ' ';                                           
    COMPUTE RI_Stack(1).CATG10 = ' ';                                           
    COMPUTE RI_STACK(1).CLSEL = ' ';                                            
    COMPUTE RI_STACK(1).CASEL = ' ';                                            
                                                                                
FOR 1 UPDATE RPT_INST.CLIENT1 RPT_INST.CLIENT2 RPT_INST.CLIENT3                 
RPT_INST.CLIENT4 RPT_INST.CLIENT5                                               
RPT_INST.CLIENT6 RPT_INST.CLIENT7 RPT_INST.CLIENT8 RPT_INST.CLIENT9             
RPT_INST.CLIENT10 RPT_INST.CLIENT11 RPT_INST.CLIENT12 RPT_INST.CLIENT13         
RPT_INST.CLIENT14 RPT_INST.CLIENT15 RPT_INST.CLIENT16 RPT_INST.CLIENT17         
RPT_INST.CLIENT18 RPT_INST.CLIENT19 RPT_INST.CLIENT20 RPT_INST.CLIENT21         
RPT_INST.CLIENT22 RPT_INST.CLIENT23 RPT_INST.CLIENT24 RPT_INST.CLIENT25         
RPT_INST.CATG1 RPT_INST.CATG2 RPT_INST.CATG3 RPT_INST.CATG4 RPT_INST.CATG5      
RPT_INST.CATG6 RPT_INST.CATG7 RPT_INST.CATG8 RPT_INST.CATG9 RPT_INST.CATG10     
RPT_INST.CLSEL                                                                  
FROM RI_STACK(1)                                                                
  COMMIT                                                                        
ENDCASE                                                                         
                                                                                
-*CASE CLEAR_CODE                                                               
-*COMPUTE CD_STACK.CL_OM1 = ' ' ;                                               
-*COMPUTE CD_STACK.CL_OM2 = ' ' ;                                               
-*COMPUTE CD_STACK.CL_OM3 = ' ' ;                                               
-*COMPUTE CD_STACK.CL_OM4 = ' ' ;                                               
-*COMPUTE CD_STACK.CA_OM1 = ' ' ;                                               
-*COMPUTE CD_STACK.CA_OM2 = ' ' ;                                               
-*COMPUTE CD_STACK.CA_OM3 = ' ' ;                                               
-*COMPUTE CD_STACK.CA_OM4 = ' ' ;                                               
-*FOR 1 UPDATE RPT_INST.CL_OM1 RPT_INST.CL_OM2 RPT_INST.CL_OM3 RPT_INST.CL_OM4  
-*             RPT_INST.CA_OM1 RPT_INST.CA_OM2 RPT_INST.CA_OM3 RPT_INST.CA_OM4  
-*FROM CD_STACK(1);                                                             
-*ENDCASE                                                                       
                                                                                
CASE CHK_CLIENT                                                                 
COMPUTE CK01 = IF CL_STACK4(1).CLIST1  NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK02 = IF CL_STACK4(2).CLIST1  NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK03 = IF CL_STACK4(3).CLIST1  NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK04 = IF CL_STACK4(4).CLIST1  NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK05 = IF CL_STACK4(5).CLIST1  NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK06 = IF CL_STACK4(6).CLIST1  NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK07 = IF CL_STACK4(7).CLIST1  NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK08 = IF CL_STACK4(8).CLIST1  NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK09 = IF CL_STACK4(9).CLIST1  NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK10 = IF CL_STACK4(10).CLIST1 NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK11 = IF CL_STACK4(11).CLIST1 NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK12 = IF CL_STACK4(12).CLIST1 NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK13 = IF CL_STACK4(13).CLIST1 NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK14 = IF CL_STACK4(14).CLIST1 NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK15 = IF CL_STACK4(15).CLIST1 NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK16 = IF CL_STACK4(16).CLIST1 NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK17 = IF CL_STACK4(17).CLIST1 NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK18 = IF CL_STACK4(18).CLIST1 NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK19 = IF CL_STACK4(19).CLIST1 NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK20 = IF CL_STACK4(20).CLIST1 NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK21 = IF CL_STACK4(21).CLIST1 NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK22 = IF CL_STACK4(22).CLIST1 NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK23 = IF CL_STACK4(23).CLIST1 NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK24 = IF CL_STACK4(24).CLIST1 NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK25 = IF CL_STACK4(25).CLIST1 NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE CK26 = IF CL_STACK4(26).CLIST1 NE ' ' THEN 1 ELSE 0 ;                   
COMPUTE TT01 = CK01+CK02+CK03+CK04+CK05+CK06+CK07+CK08+CK09+CK10                
             + CK11+CK12+CK13+CK14+CK15+CK16+CK17+CK18+CK19+CK20                
             + CK21+CK22+CK23+CK24+CK25+CK26 ;                                  
IF TT01 GT 25 THEN                                                              
  BEGIN                                                                         
    WINFORM SHOW CLERROR                                                        
    GOTO ENDCASE                                                                
ENDBEGIN                                                                        
ENDCASE                                                                         
                                                                                
                                                                                
CASE CHK_CAT                                                                    
COMPUTE CK27= IF CA_STACK4(1).CATLIST  NE ' ' THEN 1 ELSE 0;                    
COMPUTE CK28= IF CA_STACK4(2).CATLIST  NE ' ' THEN 1 ELSE 0;                    
COMPUTE CK29= IF CA_STACK4(3).CATLIST  NE ' ' THEN 1 ELSE 0;                    
COMPUTE CK30= IF CA_STACK4(4).CATLIST  NE ' ' THEN 1 ELSE 0;                    
COMPUTE CK31= IF CA_STACK4(5).CATLIST  NE ' ' THEN 1 ELSE 0;                    
COMPUTE CK32= IF CA_STACK4(6).CATLIST  NE ' ' THEN 1 ELSE 0;                    
COMPUTE CK33= IF CA_STACK4(7).CATLIST  NE ' ' THEN 1 ELSE 0;                    
COMPUTE CK34= IF CA_STACK4(8).CATLIST  NE ' ' THEN 1 ELSE 0;                    
COMPUTE CK35= IF CA_STACK4(9).CATLIST  NE ' ' THEN 1 ELSE 0;                    
COMPUTE CK36= IF CA_STACK4(10).CATLIST NE ' ' THEN 1 ELSE 0;                    
COMPUTE CK37= IF CA_STACK4(11).CATLIST NE ' ' THEN 1 ELSE 0;                    
COMPUTE TT02 = CK27+CK28+CK29+CK30+CK31+CK32+CK33+CK34+CK35+CK36+CK37;          
ENDCASE                                                                         
                                                                                
CASE CL_FEED                                                                    
COMPUTE CL01=MASK(CL_STACK4(1).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$');  
COMPUTE CL02=MASK(CL_STACK4(2).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$');  
COMPUTE CL03=MASK(CL_STACK4(3).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$');  
COMPUTE CL04=MASK(CL_STACK4(4).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$');  
COMPUTE CL05=MASK(CL_STACK4(5).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$');  
COMPUTE CL06=MASK(CL_STACK4(6).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$');  
COMPUTE CL07=MASK(CL_STACK4(7).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$');  
COMPUTE CL08=MASK(CL_STACK4(8).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$');  
COMPUTE CL09=MASK(CL_STACK4(9).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$');  
COMPUTE CL10=MASK(CL_STACK4(10).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$')  
;                                                                               
COMPUTE CL11=MASK(CL_STACK4(11).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$')  
;                                                                               
COMPUTE CL12=MASK(CL_STACK4(12).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$')  
;                                                                               
COMPUTE CL13=MASK(CL_STACK4(13).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$')  
;                                                                               
COMPUTE CL14=MASK(CL_STACK4(14).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$')  
;                                                                               
COMPUTE CL15=MASK(CL_STACK4(15).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$')  
;                                                                               
COMPUTE CL16=MASK(CL_STACK4(16).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$')  
;                                                                               
COMPUTE CL17=MASK(CL_STACK4(17).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$')  
;                                                                               
COMPUTE CL18=MASK(CL_STACK4(18).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$')  
;                                                                               
COMPUTE CL19=MASK(CL_STACK4(19).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$')  
;                                                                               
COMPUTE CL20=MASK(CL_STACK4(20).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$')  
;                                                                               
COMPUTE CL21=MASK(CL_STACK4(21).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$')  
;                                                                               
COMPUTE CL22=MASK(CL_STACK4(22).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$')  
;                                                                               
COMPUTE CL23=MASK(CL_STACK4(23).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$')  
;                                                                               
COMPUTE CL24=MASK(CL_STACK4(24).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$')  
;                                                                               
COMPUTE CL25=MASK(CL_STACK4(25).CLIST1,'$$999999$$$$$$$$$$$$$$$$$$$$$$$$$$$$')  
;                                                                               
                                                                                
COMPUTE RI_STACK(1).CLIENT1=CL01;                                               
COMPUTE RI_STACK(1).CLIENT2=CL02;                                               
COMPUTE RI_STACK(1).CLIENT3=CL03;                                               
COMPUTE RI_STACK(1).CLIENT4=CL04;                                               
COMPUTE RI_STACK(1).CLIENT5=CL05;                                               
COMPUTE RI_STACK(1).CLIENT6=CL06;                                               
COMPUTE RI_STACK(1).CLIENT7=CL07;                                               
COMPUTE RI_STACK(1).CLIENT8=CL08;                                               
COMPUTE RI_STACK(1).CLIENT9=CL09;                                               
COMPUTE RI_STACK(1).CLIENT10=CL10;                                              
COMPUTE RI_STACK(1).CLIENT11=CL11;                                              
COMPUTE RI_STACK(1).CLIENT12=CL12;                                              
COMPUTE RI_STACK(1).CLIENT13=CL13;                                              
COMPUTE RI_STACK(1).CLIENT14=CL14;                                              
COMPUTE RI_STACK(1).CLIENT15=CL15;                                              
COMPUTE RI_STACK(1).CLIENT16=CL16;                                              
COMPUTE RI_STACK(1).CLIENT17=CL17;                                              
COMPUTE RI_STACK(1).CLIENT18=CL18;                                              
COMPUTE RI_STACK(1).CLIENT19=CL19;                                              
COMPUTE RI_STACK(1).CLIENT20=CL20;                                              
COMPUTE RI_STACK(1).CLIENT21=CL21;                                              
COMPUTE RI_STACK(1).CLIENT22=CL22;                                              
COMPUTE RI_STACK(1).CLIENT23=CL23;                                              
COMPUTE RI_STACK(1).CLIENT24=CL24;                                              
COMPUTE RI_STACK(1).CLIENT25=CL25;                                              
                                                                                
COMPUTE RI_STACK(1).CATG1=CA_STACK4(1).CATLIST;                                 
COMPUTE RI_STACK(1).CATG2=CA_STACK4(2).CATLIST;                                 
COMPUTE RI_STACK(1).CATG3=CA_STACK4(3).CATLIST;                                 
COMPUTE RI_STACK(1).CATG4=CA_STACK4(4).CATLIST;                                 
COMPUTE RI_STACK(1).CATG5=CA_STACK4(5).CATLIST;                                 
COMPUTE RI_STACK(1).CATG6=CA_STACK4(6).CATLIST;                                 
COMPUTE RI_STACK(1).CATG7=CA_STACK4(7).CATLIST;                                 
COMPUTE RI_STACK(1).CATG8=CA_STACK4(8).CATLIST;                                 
COMPUTE RI_STACK(1).CATG9=CA_STACK4(9).CATLIST;                                 
COMPUTE RI_STACK(1).CATG10=CA_STACK4(10).CATLIST;                               
COMPUTE RI_STACK(1).CLSEL=XCLSEL;                                               
COMPUTE RI_STACK(1).CASEL=XCASEL;                                               
                                                                                
FOR 1 UPDATE RPT_INST.CLIENT1 RPT_INST.CLIENT2 RPT_INST.CLIENT3                 
RPT_INST.CLIENT4 RPT_INST.CLIENT5                                               
RPT_INST.CLIENT6 RPT_INST.CLIENT7 RPT_INST.CLIENT8 RPT_INST.CLIENT9             
RPT_INST.CLIENT10 RPT_INST.CLIENT11 RPT_INST.CLIENT12 RPT_INST.CLIENT13         
RPT_INST.CLIENT14 RPT_INST.CLIENT15 RPT_INST.CLIENT16 RPT_INST.CLIENT17         
RPT_INST.CLIENT18 RPT_INST.CLIENT19 RPT_INST.CLIENT20 RPT_INST.CLIENT21         
RPT_INST.CLIENT22 RPT_INST.CLIENT23 RPT_INST.CLIENT24 RPT_INST.CLIENT25         
RPT_INST.CATG1 RPT_INST.CATG2 RPT_INST.CATG3 RPT_INST.CATG4 RPT_INST.CATG5      
RPT_INST.CATG6 RPT_INST.CATG7 RPT_INST.CATG8 RPT_INST.CATG9 RPT_INST.CATG10     
RPT_INST.CLSEL RPT_INST.CASEL                                                   
FROM RI_STACK(1)                                                                
COMMIT                                                                          
EXEC BUILDCR AT REPORTS                                                         
PERFORM UPDATE_TKEY                                                             
ENDCASE                                                                         
                                                                                
CASE DELETE_TKEY                                                                
FOR ALL DELETE TEMPKEY.INSTANCE_ID FROM TK_STACK                                
PERFORM UPDATE_TKEY                                                             
ENDCASE                                                                         
                                                                                
CASE UPDATE_TKEY                                                                
FOR 1 INCLUDE TEMPKEY.INSTANCE_ID FROM RI_STACK(1)                              
PERFORM BUILDIT                                                                 
ENDCASE                                                                         
                                                                                
CASE BUILDIT                                                                    
EXEC BUILDCL AT REPORTS                                                         
ENDCASE                                                                         
                                                                                
CASE HIER_FEED                                                                  
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER1                                                           
FOR ALL NEXT I_SUMM.HDES1 INTO CUR_HIER1                                        
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER2                                                           
FOR ALL NEXT I_SUMM.HDES2 INTO CUR_HIER2                                        
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER3                                                           
FOR ALL NEXT I_SUMM.HDES3 INTO CUR_HIER3                                        
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER4                                                           
FOR ALL NEXT I_SUMM.HDES4 INTO CUR_HIER4                                        
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER5                                                           
FOR ALL NEXT I_SUMM.HDES5 INTO CUR_HIER5                                        
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER6                                                           
FOR ALL NEXT I_SUMM.HDES6 INTO CUR_HIER6                                        
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER7                                                           
FOR ALL NEXT I_SUMM.HDES7 INTO CUR_HIER7                                        
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER8                                                           
FOR ALL NEXT I_SUMM.HDES8 INTO CUR_HIER8                                        
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER9                                                           
FOR ALL NEXT I_SUMM.HDES9 INTO CUR_HIER9                                        
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER10                                                          
FOR ALL NEXT I_SUMM.HDES10 INTO CUR_HIER10                                      
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER11                                                          
FOR ALL NEXT I_SUMM.HDES11 INTO CUR_HIER11                                      
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER12                                                          
FOR ALL NEXT I_SUMM.HDES12 INTO CUR_HIER12                                      
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER13                                                          
FOR ALL NEXT I_SUMM.HDES13 INTO CUR_HIER13                                      
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER14                                                          
FOR ALL NEXT I_SUMM.HDES14 INTO CUR_HIER14                                      
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER15                                                          
FOR ALL NEXT I_SUMM.HDES15 INTO CUR_HIER15                                      
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER16                                                          
FOR ALL NEXT I_SUMM.HDES16 INTO CUR_HIER16                                      
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER17                                                          
FOR ALL NEXT I_SUMM.HDES17 INTO CUR_HIER17                                      
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER18                                                          
FOR ALL NEXT I_SUMM.HDES18 INTO CUR_HIER18                                      
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER19                                                          
FOR ALL NEXT I_SUMM.HDES19 INTO CUR_HIER19                                      
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER20                                                          
FOR ALL NEXT I_SUMM.HDES20 INTO CUR_HIER20                                      
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER21                                                          
FOR ALL NEXT I_SUMM.HDES21 INTO CUR_HIER21                                      
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER22                                                          
FOR ALL NEXT I_SUMM.HDES22 INTO CUR_HIER22                                      
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER23                                                          
FOR ALL NEXT I_SUMM.HDES23 INTO CUR_HIER23                                      
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER24                                                          
FOR ALL NEXT I_SUMM.HDES24 INTO CUR_HIER24                                      
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
REPOSITION I_SUMM.INST_KEY                                                      
STACK CLEAR CUR_HIER25                                                          
FOR ALL NEXT I_SUMM.HDES25 INTO CUR_HIER25                                      
  WHERE I_SUMM.INST_KEY EQ Inst_Parm                                            
                                                                                
BEGIN                                                                           
IF CUR_HIER1(1).HSEL1 EQ ' ' THEN                                               
COMPUTE CUR_HIER0(1).HDES1 = "NONE SELECTED" ;                                  
ELSE                                                                            
COMPUTE CUR_HIER0(1).HDES1 = CUR_HIER1(1).HDES1 ;                               
COMPUTE CUR_HIER0(2).HDES1 = CUR_HIER2(1).HDES2 ;                               
COMPUTE CUR_HIER0(3).HDES1 = CUR_HIER3(1).HDES3 ;                               
COMPUTE CUR_HIER0(4).HDES1 = CUR_HIER4(1).HDES4 ;                               
COMPUTE CUR_HIER0(5).HDES1 = CUR_HIER5(1).HDES5 ;                               
COMPUTE CUR_HIER0(6).HDES1 = CUR_HIER6(1).HDES6 ;                               
COMPUTE CUR_HIER0(7).HDES1 = CUR_HIER7(1).HDES7 ;                               
COMPUTE CUR_HIER0(8).HDES1 = CUR_HIER8(1).HDES8 ;                               
COMPUTE CUR_HIER0(9).HDES1 = CUR_HIER9(1).HDES9 ;                               
COMPUTE CUR_HIER0(10).HDES1 = CUR_HIER10(1).HDES10 ;                            
COMPUTE CUR_HIER0(11).HDES1 = CUR_HIER11(1).HDES11 ;                            
COMPUTE CUR_HIER0(12).HDES1 = CUR_HIER12(1).HDES12 ;                            
COMPUTE CUR_HIER0(13).HDES1 = CUR_HIER13(1).HDES13 ;                            
COMPUTE CUR_HIER0(14).HDES1 = CUR_HIER14(1).HDES14 ;                            
COMPUTE CUR_HIER0(15).HDES1 = CUR_HIER15(1).HDES15 ;                            
COMPUTE CUR_HIER0(16).HDES1 = CUR_HIER16(1).HDES16 ;                            
COMPUTE CUR_HIER0(17).HDES1 = CUR_HIER17(1).HDES17 ;                            
COMPUTE CUR_HIER0(18).HDES1 = CUR_HIER18(1).HDES18 ;                            
COMPUTE CUR_HIER0(19).HDES1 = CUR_HIER19(1).HDES19 ;                            
COMPUTE CUR_HIER0(20).HDES1 = CUR_HIER20(1).HDES20 ;                            
COMPUTE CUR_HIER0(21).HDES1 = CUR_HIER21(1).HDES21 ;                            
COMPUTE CUR_HIER0(22).HDES1 = CUR_HIER22(1).HDES22 ;                            
COMPUTE CUR_HIER0(23).HDES1 = CUR_HIER23(1).HDES23 ;                            
COMPUTE CUR_HIER0(24).HDES1 = CUR_HIER24(1).HDES24 ;                            
COMPUTE CUR_HIER0(25).HDES1 = CUR_HIER25(1).HDES25 ;                            
ENDBEGIN                                                                        
ENDCASE                                                                         
                                                                                
CASE CUR_FEED                                                                   
BEGIN                                                                           
IF RPT_INST.CLIENT1 EQ ' ' THEN                                                 
COMPUTE CUR_CLIENT(1).CLIST1 = "NONE SELECTED" ;                                
ELSE                                                                            
COMPUTE CUR_CLIENT(1).CLIST1  = CUR_CLIENT1(1).CLIST1 ;                         
COMPUTE CUR_CLIENT(2).CLIST1  = CUR_CLIENT2(1).CLIST1 ;                         
COMPUTE CUR_CLIENT(3).CLIST1  = CUR_CLIENT3(1).CLIST1 ;                         
COMPUTE CUR_CLIENT(4).CLIST1  = CUR_CLIENT4(1).CLIST1 ;                         
COMPUTE CUR_CLIENT(5).CLIST1  = CUR_CLIENT5(1).CLIST1 ;                         
COMPUTE CUR_CLIENT(6).CLIST1  = CUR_CLIENT6(1).CLIST1 ;                         
COMPUTE CUR_CLIENT(7).CLIST1  = CUR_CLIENT7(1).CLIST1 ;                         
COMPUTE CUR_CLIENT(8).CLIST1  = CUR_CLIENT8(1).CLIST1 ;                         
COMPUTE CUR_CLIENT(9).CLIST1  = CUR_CLIENT9(1).CLIST1 ;                         
COMPUTE CUR_CLIENT(10).CLIST1 = CUR_CLIENT10(1).CLIST1 ;                        
COMPUTE CUR_CLIENT(11).CLIST1 = CUR_CLIENT11(1).CLIST1 ;                        
COMPUTE CUR_CLIENT(12).CLIST1 = CUR_CLIENT12(1).CLIST1 ;                        
COMPUTE CUR_CLIENT(13).CLIST1 = CUR_CLIENT13(1).CLIST1 ;                        
COMPUTE CUR_CLIENT(14).CLIST1 = CUR_CLIENT14(1).CLIST1 ;                        
COMPUTE CUR_CLIENT(15).CLIST1 = CUR_CLIENT15(1).CLIST1 ;                        
COMPUTE CUR_CLIENT(16).CLIST1 = CUR_CLIENT16(1).CLIST1 ;                        
COMPUTE CUR_CLIENT(17).CLIST1 = CUR_CLIENT17(1).CLIST1 ;                        
COMPUTE CUR_CLIENT(18).CLIST1 = CUR_CLIENT18(1).CLIST1 ;                        
COMPUTE CUR_CLIENT(19).CLIST1 = CUR_CLIENT19(1).CLIST1 ;                        
COMPUTE CUR_CLIENT(20).CLIST1 = CUR_CLIENT20(1).CLIST1 ;                        
COMPUTE CUR_CLIENT(21).CLIST1 = CUR_CLIENT21(1).CLIST1 ;                        
COMPUTE CUR_CLIENT(22).CLIST1 = CUR_CLIENT22(1).CLIST1 ;                        
COMPUTE CUR_CLIENT(23).CLIST1 = CUR_CLIENT23(1).CLIST1 ;                        
COMPUTE CUR_CLIENT(24).CLIST1 = CUR_CLIENT24(1).CLIST1 ;                        
COMPUTE CUR_CLIENT(25).CLIST1 = CUR_CLIENT25(1).CLIST1 ;                        
ENDBEGIN                                                                        
BEGIN                                                                           
IF RPT_INST.CATG1 EQ ' ' THEN                                                   
COMPUTE CUR_CATG(1).CATG1 = "NONE SELECTED" ;                                   
ELSE                                                                            
COMPUTE CUR_CATG(1).CATG1  = CUR_CAT1(1).CATG1 ;                                
COMPUTE CUR_CATG(2).CATG1  = CUR_CAT2(1).CATG2 ;                                
COMPUTE CUR_CATG(3).CATG1  = CUR_CAT3(1).CATG3 ;                                
COMPUTE CUR_CATG(4).CATG1  = CUR_CAT4(1).CATG4 ;                                
COMPUTE CUR_CATG(5).CATG1  = CUR_CAT5(1).CATG5 ;                                
COMPUTE CUR_CATG(6).CATG1  = CUR_CAT6(1).CATG6 ;                                
COMPUTE CUR_CATG(7).CATG1  = CUR_CAT7(1).CATG7 ;                                
COMPUTE CUR_CATG(8).CATG1  = CUR_CAT8(1).CATG8 ;                                
COMPUTE CUR_CATG(9).CATG1  = CUR_CAT9(1).CATG9 ;                                
COMPUTE CUR_CATG(10).CATG1 = CUR_CAT10(1).CATG10 ;                              
ENDBEGIN                                                                        
ENDCASE                                                                         
                                                                                
CASE HIER_PARSE                                                                 
COMPUTE XS01=GETTOK(HIER_ORG5A(1).DESCRIPTION,60 ,1 ,')',17,XS01);              
COMPUTE HS01=GETTOK(HIER_ORG11(1).DEPTNAME,60 ,1 ,')',17,HS01);                 
COMPUTE HS02=GETTOK(HIER_ORG11(2).DEPTNAME,60 ,1 ,')',17,HS02);                 
COMPUTE HS03=GETTOK(HIER_ORG11(3).DEPTNAME,60 ,1 ,')',17,HS03);                 
COMPUTE HS04=GETTOK(HIER_ORG11(4).DEPTNAME,60 ,1 ,')',17,HS04);                 
COMPUTE HS05=GETTOK(HIER_ORG11(5).DEPTNAME,60 ,1 ,')',17,HS05);                 
COMPUTE HS06=GETTOK(HIER_ORG11(6).DEPTNAME,60 ,1 ,')',17,HS06);                 
COMPUTE HS07=GETTOK(HIER_ORG11(7).DEPTNAME,60 ,1 ,')',17,HS07);                 
COMPUTE HS08=GETTOK(HIER_ORG11(8).DEPTNAME,60 ,1 ,')',17,HS08);                 
COMPUTE HS09=GETTOK(HIER_ORG11(9).DEPTNAME,60 ,1 ,')',17,HS09);                 
COMPUTE HS10=GETTOK(HIER_ORG11(10).DEPTNAME,60 ,1 ,')',17,HS10);                
COMPUTE HS11=GETTOK(HIER_ORG11(11).DEPTNAME,60 ,1 ,')',17,HS11);                
COMPUTE HS12=GETTOK(HIER_ORG11(12).DEPTNAME,60 ,1 ,')',17,HS12);                
COMPUTE HS13=GETTOK(HIER_ORG11(13).DEPTNAME,60 ,1 ,')',17,HS13);                
COMPUTE HS14=GETTOK(HIER_ORG11(14).DEPTNAME,60 ,1 ,')',17,HS14);                
COMPUTE HS15=GETTOK(HIER_ORG11(15).DEPTNAME,60 ,1 ,')',17,HS15);                
COMPUTE HS16=GETTOK(HIER_ORG11(16).DEPTNAME,60 ,1 ,')',17,HS16);                
COMPUTE HS17=GETTOK(HIER_ORG11(17).DEPTNAME,60 ,1 ,')',17,HS17);                
COMPUTE HS18=GETTOK(HIER_ORG11(18).DEPTNAME,60 ,1 ,')',15,HS18);                
COMPUTE HS19=GETTOK(HIER_ORG11(19).DEPTNAME,60 ,1 ,')',17,HS19);                
COMPUTE HS20=GETTOK(HIER_ORG11(20).DEPTNAME,60 ,1 ,')',17,HS20);                
COMPUTE HS21=GETTOK(HIER_ORG11(21).DEPTNAME,60 ,1 ,')',17,HS21);                
COMPUTE HS22=GETTOK(HIER_ORG11(22).DEPTNAME,60 ,1 ,')',17,HS22);                
COMPUTE HS23=GETTOK(HIER_ORG11(23).DEPTNAME,60 ,1 ,')',17,HS23);                
COMPUTE HS24=GETTOK(HIER_ORG11(24).DEPTNAME,60 ,1 ,')',17,HS24);                
COMPUTE HS25=GETTOK(HIER_ORG11(25).DEPTNAME,60 ,1 ,')',17,HS25);                
COMPUTE HI_STACK(1).HSEL1=MASK(HS01,'$999999999999999$$');                      
COMPUTE HI_STACK(2).HSEL2=MASK(HS02,'$999999999999999$$');                      
COMPUTE HI_STACK(3).HSEL3=MASK(HS03,'$999999999999999$$');                      
COMPUTE HI_STACK(4).HSEL4=MASK(HS04,'$999999999999999$$');                      
COMPUTE HI_STACK(5).HSEL5=MASK(HS05,'$999999999999999$$');                      
COMPUTE HI_STACK(6).HSEL6=MASK(HS06,'$999999999999999$$');                      
COMPUTE HI_STACK(7).HSEL7=MASK(HS07,'$999999999999999$$');                      
COMPUTE HI_STACK(8).HSEL8=MASK(HS08,'$999999999999999$$');                      
COMPUTE HI_STACK(9).HSEL9=MASK(HS09,'$999999999999999$$');                      
COMPUTE HI_STACK(10).HSEL10=MASK(HS10,'$999999999999999$$');                    
COMPUTE HI_STACK(11).HSEL11=MASK(HS11,'$999999999999999$$');                    
COMPUTE HI_STACK(12).HSEL12=MASK(HS12,'$999999999999999$$');                    
COMPUTE HI_STACK(13).HSEL13=MASK(HS13,'$999999999999999$$');                    
COMPUTE HI_STACK(14).HSEL14=MASK(HS14,'$999999999999999$$');                    
COMPUTE HI_STACK(15).HSEL15=MASK(HS15,'$999999999999999$$');                    
COMPUTE HI_STACK(16).HSEL16=MASK(HS16,'$999999999999999$$');                    
COMPUTE HI_STACK(17).HSEL17=MASK(HS17,'$999999999999999$$');                    
COMPUTE HI_STACK(18).HSEL18=MASK(HS18,'$999999999999999$$');                    
COMPUTE HI_STACK(19).HSEL19=MASK(HS19,'$999999999999999$$');                    
COMPUTE HI_STACK(20).HSEL20=MASK(HS20,'$999999999999999$$');                    
COMPUTE HI_STACK(21).HSEL21=MASK(HS21,'$999999999999999$$');                    
COMPUTE HI_STACK(22).HSEL22=MASK(HS22,'$999999999999999$$');                    
COMPUTE HI_STACK(23).HSEL23=MASK(HS23,'$999999999999999$$');                    
COMPUTE HI_STACK(24).HSEL24=MASK(HS24,'$999999999999999$$');                    
COMPUTE HI_STACK(25).HSEL25=MASK(HS25,'$999999999999999$$');                    
COMPUTE HI_STACK1(1).INST_KEY = RI_STACK(1).INST_KEY ;                          
COMPUTE HI_STACK1(1).HSEL1 = HI_STACK(1).HSEL1;                                 
COMPUTE HI_STACK1(1).HDES1 = HIER_ORG11(1).DEPTNAME;                            
COMPUTE HI_STACK1(1).HSEL2 = HI_STACK(2).HSEL2;                                 
COMPUTE HI_STACK1(1).HDES2 = HIER_ORG11(2).DEPTNAME;                            
COMPUTE HI_STACK1(1).HSEL3 = HI_STACK(3).HSEL3;                                 
COMPUTE HI_STACK1(1).HDES3 = HIER_ORG11(3).DEPTNAME;                            
COMPUTE HI_STACK1(1).HSEL4 = HI_STACK(4).HSEL4;                                 
COMPUTE HI_STACK1(1).HDES4 = HIER_ORG11(4).DEPTNAME;                            
COMPUTE HI_STACK1(1).HSEL5 = HI_STACK(5).HSEL5;                                 
COMPUTE HI_STACK1(1).HDES5 = HIER_ORG11(5).DEPTNAME;                            
COMPUTE HI_STACK1(1).HSEL6 = HI_STACK(6).HSEL6;                                 
COMPUTE HI_STACK1(1).HDES6 = HIER_ORG11(6).DEPTNAME;                            
COMPUTE HI_STACK1(1).HSEL7 = HI_STACK(7).HSEL7;                                 
COMPUTE HI_STACK1(1).HDES7 = HIER_ORG11(7).DEPTNAME;                            
COMPUTE HI_STACK1(1).HSEL8 = HI_STACK(8).HSEL8;                                 
COMPUTE HI_STACK1(1).HDES8 = HIER_ORG11(8).DEPTNAME;                            
COMPUTE HI_STACK1(1).HSEL9 = HI_STACK(9).HSEL9;                                 
COMPUTE HI_STACK1(1).HDES9 = HIER_ORG11(9).DEPTNAME;                            
COMPUTE HI_STACK1(1).HSEL10 = HI_STACK(10).HSEL10;                              
COMPUTE HI_STACK1(1).HDES10 = HIER_ORG11(10).DEPTNAME;                          
COMPUTE HI_STACK1(1).HSEL11 = HI_STACK(11).HSEL11;                              
COMPUTE HI_STACK1(1).HDES11 = HIER_ORG11(11).DEPTNAME;                          
COMPUTE HI_STACK1(1).HSEL12 = HI_STACK(12).HSEL12;                              
COMPUTE HI_STACK1(1).HDES12 = HIER_ORG11(12).DEPTNAME;                          
COMPUTE HI_STACK1(1).HSEL13 = HI_STACK(13).HSEL13;                              
COMPUTE HI_STACK1(1).HDES13 = HIER_ORG11(13).DEPTNAME;                          
COMPUTE HI_STACK1(1).HSEL14 = HI_STACK(14).HSEL14;                              
COMPUTE HI_STACK1(1).HDES14 = HIER_ORG11(14).DEPTNAME;                          
COMPUTE HI_STACK1(1).HSEL15 = HI_STACK(15).HSEL15;                              
COMPUTE HI_STACK1(1).HDES15 = HIER_ORG11(15).DEPTNAME;                          
COMPUTE HI_STACK1(1).HSEL16 = HI_STACK(16).HSEL16;                              
COMPUTE HI_STACK1(1).HDES16 = HIER_ORG11(16).DEPTNAME;                          
COMPUTE HI_STACK1(1).HSEL17 = HI_STACK(17).HSEL17;                              
COMPUTE HI_STACK1(1).HDES17 = HIER_ORG11(17).DEPTNAME;                          
COMPUTE HI_STACK1(1).HSEL18 = HI_STACK(18).HSEL18;                              
COMPUTE HI_STACK1(1).HDES18 = HIER_ORG11(18).DEPTNAME;                          
COMPUTE HI_STACK1(1).HSEL19 = HI_STACK(19).HSEL19;                              
COMPUTE HI_STACK1(1).HDES19 = HIER_ORG11(19).DEPTNAME;                          
COMPUTE HI_STACK1(1).HSEL20 = HI_STACK(20).HSEL20;                              
COMPUTE HI_STACK1(1).HDES20 = HIER_ORG11(20).DEPTNAME;                          
COMPUTE HI_STACK1(1).HSEL21 = HI_STACK(21).HSEL21;                              
COMPUTE HI_STACK1(1).HDES21 = HIER_ORG11(21).DEPTNAME;                          
COMPUTE HI_STACK1(1).HSEL22 = HI_STACK(22).HSEL22;                              
COMPUTE HI_STACK1(1).HDES22= HIER_ORG11(22).DEPTNAME;                           
COMPUTE HI_STACK1(1).HSEL23 = HI_STACK(23).HSEL23;                              
COMPUTE HI_STACK1(1).HDES23 = HIER_ORG11(23).DEPTNAME;                          
COMPUTE HI_STACK1(1).HSEL24 = HI_STACK(24).HSEL24;                              
COMPUTE HI_STACK1(1).HDES24 = HIER_ORG11(24).DEPTNAME;                          
COMPUTE HI_STACK1(1).HSEL25 = HI_STACK(25).HSEL25;                              
COMPUTE HI_STACK1(1).HDES25 = HIER_ORG11(25).DEPTNAME;                          
COMPUTE HI_STACK1(1).SCREEN = XSCREEN;                                          
COMPUTE HI_STACK1(1).LEVEL=MASK(XS01,'$99$$$$$$$$$$$$$$$');                     
                                                                                
FOR 1 UPDATE    I_SUMM.HSEL1    I_SUMM.HDES1    I_SUMM.HSEL2    I_SUMM.HDES2    
                I_SUMM.HSEL3    I_SUMM.HDES3    I_SUMM.HSEL4    I_SUMM.HDES4    
                I_SUMM.HSEL5    I_SUMM.HDES5    I_SUMM.HSEL6    I_SUMM.HDES6    
                I_SUMM.HSEL7    I_SUMM.HDES7    I_SUMM.HSEL8    I_SUMM.HDES8    
                I_SUMM.HSEL9    I_SUMM.HDES9    I_SUMM.HSEL10   I_SUMM.HDES10   
                I_SUMM.HSEL11   I_SUMM.HDES11   I_SUMM.HSEL12   I_SUMM.HDES12   
                I_SUMM.HSEL13   I_SUMM.HDES13   I_SUMM.HSEL14   I_SUMM.HDES14   
                I_SUMM.HSEL15   I_SUMM.HDES15   I_SUMM.HSEL15   I_SUMM.HDES15   
                I_SUMM.HSEL16   I_SUMM.HDES16   I_SUMM.HSEL16   I_SUMM.HDES16   
                I_SUMM.HSEL17   I_SUMM.HDES17   I_SUMM.HSEL18   I_SUMM.HDES18   
                I_SUMM.HSEL19   I_SUMM.HDES19   I_SUMM.HSEL20   I_SUMM.HDES20   
                I_SUMM.HSEL21   I_SUMM.HDES21   I_SUMM.HSEL22   I_SUMM.HDES22   
                I_SUMM.HSEL23   I_SUMM.HDES23   I_SUMM.HSEL24   I_SUMM.HDES24   
                I_SUMM.HSEL25   I_SUMM.HDES25   I_SUMM.SCREEN   I_SUMM.LEVEL    
FROM HI_STACK1(1)                                                               
COMMIT                                                                          
                                                                                
ENDCASE                                                                         
                                                                                
CASE CLEAR_HIER                                                                 
    COMPUTE HIER_ORG15(1).INST_KEY = RI_STACK(1).INST_KEY ;                     
    COMPUTE HIER_ORG15(1).HSEL1   = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL2   = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL3   = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL4   = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL5   = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL6   = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL7   = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL8   = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL9   = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL10  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL11  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL12  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL13  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL14  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL15  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL16  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL17  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL18  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL19  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL20  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL21  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL22  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL23  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL24  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSEL25  = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES1   = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES2   = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES3   = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES4   = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES5   = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES6   = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES7   = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES8   = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES9   = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES10  = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES11  = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES12  = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES13  = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES14  = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES15  = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES16  = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES17  = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES18  = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES19  = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES20  = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES21  = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES22  = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES23  = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES24  = ' ';                                        
    COMPUTE HIER_ORG15(1).HDES25  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSIF01  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSIF02  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSIF03  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSIF04  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSIF05  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSIF06  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSIF07  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSIF08  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSIF09  = ' ';                                        
    COMPUTE HIER_ORG15(1).HSIF10  = ' ';                                        
    COMPUTE HIER_ORG15(1).SELECT  = ' ';                                        
    COMPUTE HIER_ORG15(1).SCREEN  = ' ';                                        
                                                                                
FOR 1 UPDATE    I_SUMM.HSEL1    I_SUMM.HDES1    I_SUMM.HSEL2    I_SUMM.HDES2    
                I_SUMM.HSEL3    I_SUMM.HDES3    I_SUMM.HSEL4    I_SUMM.HDES4    
                I_SUMM.HSEL5    I_SUMM.HDES5    I_SUMM.HSEL6    I_SUMM.HDES6    
                I_SUMM.HSEL7    I_SUMM.HDES7    I_SUMM.HSEL8    I_SUMM.HDES8    
                I_SUMM.HSEL9    I_SUMM.HDES9    I_SUMM.HSEL10   I_SUMM.HDES10   
                I_SUMM.HSEL11   I_SUMM.HDES11   I_SUMM.HSEL12   I_SUMM.HDES12   
                I_SUMM.HSEL13   I_SUMM.HDES13   I_SUMM.HSEL14   I_SUMM.HDES14   
                I_SUMM.HSEL15   I_SUMM.HDES15   I_SUMM.HSEL15   I_SUMM.HDES15   
                I_SUMM.HSEL16   I_SUMM.HDES16   I_SUMM.HSEL16   I_SUMM.HDES16   
                I_SUMM.HSEL17   I_SUMM.HDES17   I_SUMM.HSEL18   I_SUMM.HDES18   
                I_SUMM.HSEL19   I_SUMM.HDES19   I_SUMM.HSEL20   I_SUMM.HDES20   
                I_SUMM.HSEL21   I_SUMM.HDES21   I_SUMM.HSEL22   I_SUMM.HDES22   
                I_SUMM.HSEL23   I_SUMM.HDES23   I_SUMM.HSEL24   I_SUMM.HDES24   
                I_SUMM.HSEL25   I_SUMM.HDES25   I_SUMM.HSIF01   I_SUMM.HSIF02   
                I_SUMM.HSIF03   I_SUMM.HSIF04   I_SUMM.HSIF05   I_SUMM.HSIF06   
                I_SUMM.HSIF07   I_SUMM.HSIF08   I_SUMM.HSIF09   I_SUMM.HSIF10   
                I_SUMM.SELECT   I_SUMM.SCREEN                                   
FROM HIER_ORG15(1)                                                              
COMMIT                                                                          
ENDCASE                                                                         
                                                                                
CASE HS_ALL                                                                     
STACK CLEAR HI_STACK                                                            
COMPUTE XSELECT='X';                                                            
COMPUTE XS01=GETTOK(HIER_ORG5A(1).DESCRIPTION,60 ,1 ,')',17,XS01);              
COMPUTE HI_STACK(1).INST_KEY = RI_STACK(1).INST_KEY ;                           
COMPUTE HI_STACK(1).HSEL1=MASK(XS01,'$999999999999999$$');                      
COMPUTE HI_STACK(1).SELECT =XSELECT;                                            
COMPUTE HI_STACK(1).HDES1 = HIER_ORG5A(1).DESCRIPTION||' - '||'ALL SELECTED';   
FOR 1 UPDATE    I_SUMM.HSEL1 I_SUMM.HDES1 I_SUMM.SELECT I_SUMM.LEVEL            
FROM HI_STACK(1)                                                                
COMMIT                                                                          
ENDCASE                                                                         
                                                                                
CASE GEN_CODE                                                                   
REPOSITION I_SUMM.INST_KEY ;                                                    
FOR 1 NEXT I_SUMM.INST_KEY INTO HI_STACK2                                       
   WHERE I_SUMM.INST_KEY EQ Inst_Parm ;                                         
                                                                                
COMPUTE LEVELA=MASK(HI_STACK2.LEVEL,'99$$$$$$$$$$$$$');                         
COMPUTE LEVELB=MASK(HI_STACK2.LEVEL,'$9$$$$$$$$$$$$$');                         
COMPUTE LEVELC=MASK(HI_STACK2.LEVEL,'9$$$$$$$$$$$$$$');                         
COMPUTE HI_STACK2.LEVEL=IF LEVELC EQ '0' THEN LEVELB ELSE LEVELA;               
                                                                                
COMPUTE XR01 = IF HI_STACK2.HSEL1  NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR02 = IF HI_STACK2.HSEL2  NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR03 = IF HI_STACK2.HSEL3  NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR04 = IF HI_STACK2.HSEL4  NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR05 = IF HI_STACK2.HSEL5  NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR06 = IF HI_STACK2.HSEL6  NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR07 = IF HI_STACK2.HSEL7  NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR08 = IF HI_STACK2.HSEL8  NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR09 = IF HI_STACK2.HSEL9  NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR10 = IF HI_STACK2.HSEL10 NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR11 = IF HI_STACK2.HSEL11 NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR12 = IF HI_STACK2.HSEL12 NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR13 = IF HI_STACK2.HSEL13 NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR14 = IF HI_STACK2.HSEL14 NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR15 = IF HI_STACK2.HSEL15 NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR16 = IF HI_STACK2.HSEL16 NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR17 = IF HI_STACK2.HSEL17 NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR18 = IF HI_STACK2.HSEL18 NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR19 = IF HI_STACK2.HSEL19 NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR20 = IF HI_STACK2.HSEL20 NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR21 = IF HI_STACK2.HSEL21 NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR22 = IF HI_STACK2.HSEL22 NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR23 = IF HI_STACK2.HSEL23 NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR24 = IF HI_STACK2.HSEL24 NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR25 = IF HI_STACK2.HSEL25 NE ' ' THEN 1 ELSE 0 ;                       
COMPUTE XR26 = XR01+XR02+XR03+XR04+XR05+XR06+XR07+XR08                          
             + XR09+XR10+XR11+XR12+XR13+XR14+XR15+XR16                          
             + XR17+XR18+XR19+XR20+XR21+XR22+XR23+XR24+XR25;                    
COMPUTE SPR0 = '\'';                                                            
COMPUTE SPR1  = SPR0||SPR0||HI_STACK2.HSEL1||SPR0||SPR0;                        
COMPUTE SPR2  = SPR0||SPR0||HI_STACK2.HSEL2||SPR0||SPR0;                        
COMPUTE SPR3  = SPR0||SPR0||HI_STACK2.HSEL3||SPR0||SPR0;                        
COMPUTE SPR4  = SPR0||SPR0||HI_STACK2.HSEL4||SPR0||SPR0;                        
COMPUTE SPR5  = SPR0||SPR0||HI_STACK2.HSEL5||SPR0||SPR0;                        
COMPUTE SPR6  = SPR0||SPR0||HI_STACK2.HSEL6||SPR0||SPR0;                        
COMPUTE SPR7  = SPR0||SPR0||HI_STACK2.HSEL7||SPR0||SPR0;                        
COMPUTE SPR8  = SPR0||SPR0||HI_STACK2.HSEL8||SPR0||SPR0;                        
COMPUTE SPR9  = SPR0||SPR0||HI_STACK2.HSEL9||SPR0||SPR0;                        
COMPUTE SPR10 = SPR0||SPR0||HI_STACK2.HSEL10||SPR0||SPR0;                       
COMPUTE SPR11 = SPR0||SPR0||HI_STACK2.HSEL11||SPR0||SPR0;                       
COMPUTE SPR12 = SPR0||SPR0||HI_STACK2.HSEL12||SPR0||SPR0;                       
COMPUTE SPR13 = SPR0||SPR0||HI_STACK2.HSEL13||SPR0||SPR0;                       
COMPUTE SPR14 = SPR0||SPR0||HI_STACK2.HSEL14||SPR0||SPR0;                       
COMPUTE SPR15 = SPR0||SPR0||HI_STACK2.HSEL15||SPR0||SPR0;                       
COMPUTE SPR16 = SPR0||SPR0||HI_STACK2.HSEL16||SPR0||SPR0;                       
COMPUTE SPR17 = SPR0||SPR0||HI_STACK2.HSEL17||SPR0||SPR0;                       
COMPUTE SPR18 = SPR0||SPR0||HI_STACK2.HSEL18||SPR0||SPR0;                       
COMPUTE SPR19 = SPR0||SPR0||HI_STACK2.HSEL19||SPR0||SPR0;                       
COMPUTE SPR20 = SPR0||SPR0||HI_STACK2.HSEL20||SPR0||SPR0;                       
COMPUTE SPR21 = SPR0||SPR0||HI_STACK2.HSEL21||SPR0||SPR0;                       
COMPUTE SPR22 = SPR0||SPR0||HI_STACK2.HSEL22||SPR0||SPR0;                       
COMPUTE SPR23 = SPR0||SPR0||HI_STACK2.HSEL23||SPR0||SPR0;                       
COMPUTE SPR24 = SPR0||SPR0||HI_STACK2.HSEL24||SPR0||SPR0;                       
COMPUTE SPR25 = SPR0||SPR0||HI_STACK2.HSEL25||SPR0||SPR0;                       
                                                                                
COMPUTE XL01 = IF HI_STACK2.SCREEN EQ 'I' THEN 'EQ ' ELSE                       
               IF HI_STACK2.SCREEN EQ 'E' THEN 'NE ' ;                          
COMPUTE XL02 = 'IF AROLL_LEV'||HI_STACK2.LEVEL||(' '|XL01) ;                    
COMPUTE XL03 = 'OR';                                                            
                                                                                
COMPUTE PR01 = XL02||(' '|SPR1) ;                                               
COMPUTE PR02 = XL02||(' '|SPR1)||(' '|'OR')||(' '|SPR2) ;                       
COMPUTE PR03 = XL02||(' '|SPR1)||(' '|'OR')||(' '|SPR2)||                       
               (' '|'OR')||(' '|SPR3);                                          
COMPUTE PR04 = (' '|'OR')||(' '|SPR4);                                          
COMPUTE PR05 = (' '|'OR')||(' '|SPR5);                                          
COMPUTE PR06 = (' '|'OR')||(' '|SPR6);                                          
COMPUTE PR07 = (' '|'OR')||(' '|SPR7);                                          
COMPUTE PR08 = (' '|'OR')||(' '|SPR8);                                          
COMPUTE PR09 = (' '|'OR')||(' '|SPR9);                                          
COMPUTE PR10 = (' '|'OR')||(' '|SPR10);                                         
COMPUTE PR11 = (' '|'OR')||(' '|SPR11);                                         
COMPUTE PR12 = (' '|'OR')||(' '|SPR12);                                         
COMPUTE PR13 = (' '|'OR')||(' '|SPR13);                                         
COMPUTE PR14 = (' '|'OR')||(' '|SPR14);                                         
COMPUTE PR15 = (' '|'OR')||(' '|SPR15);                                         
COMPUTE PR16 = (' '|'OR')||(' '|SPR16);                                         
COMPUTE PR17 = (' '|'OR')||(' '|SPR17);                                         
COMPUTE PR18 = (' '|'OR')||(' '|SPR18);                                         
COMPUTE PR19 = (' '|'OR')||(' '|SPR19);                                         
COMPUTE PR20 = (' '|'OR')||(' '|SPR20);                                         
COMPUTE PR21 = (' '|'OR')||(' '|SPR21);                                         
COMPUTE PR22 = (' '|'OR')||(' '|SPR22);                                         
COMPUTE PR23 = (' '|'OR')||(' '|SPR23);                                         
COMPUTE PR24 = (' '|'OR')||(' '|SPR24);                                         
COMPUTE PR25 = (' '|'OR')||(' '|SPR25);                                         
                                                                                
COMPUTE MR04 = PR04 ;                                                           
COMPUTE MR05 = PR04||PR05;                                                      
COMPUTE MR06 = PR04||PR05||PR06;                                                
COMPUTE MR07 = PR07 ;                                                           
COMPUTE MR08 = PR07||PR08;                                                      
COMPUTE MR09 = PR07||PR08||PR09;                                                
COMPUTE MR10 = PR10 ;                                                           
COMPUTE MR11 = PR10||PR11;                                                      
COMPUTE MR12 = PR10||PR11||PR12;                                                
COMPUTE MR13 = PR13 ;                                                           
COMPUTE MR14 = PR13||PR14;                                                      
COMPUTE MR15 = PR13||PR14||PR15;                                                
COMPUTE MR16 = PR16 ;                                                           
COMPUTE MR17 = PR16||PR17;                                                      
COMPUTE MR18 = PR16||PR17||PR18;                                                
COMPUTE MR19 = PR19 ;                                                           
COMPUTE MR20 = PR19||PR20;                                                      
COMPUTE MR21 = PR19||PR20||PR21;                                                
COMPUTE MR22 = PR22 ;                                                           
COMPUTE MR23 = PR22||PR23;                                                      
COMPUTE MR24 = PR22||PR23||PR24;                                                
COMPUTE MR25 = PR25;                                                            
                                                                                
COMPUTE LL01 = IF XR26 =  01 THEN PR01 ELSE                                     
               IF XR26 =  02 THEN PR02 ELSE                                     
               IF XR26 =  03 THEN PR03 ELSE                                     
               IF XR26 GT 03 THEN PR03 ELSE ' ';                                
COMPUTE LL02 = IF XR26 =  04 THEN MR04 ELSE                                     
               IF XR26 =  05 THEN MR05 ELSE                                     
               IF XR26 =  06 THEN MR06 ELSE                                     
               IF XR26 GT 06 THEN MR06 ELSE ' ';                                
COMPUTE LL03 = IF XR26 =  07 THEN MR07 ELSE                                     
               IF XR26 =  08 THEN MR08 ELSE                                     
               IF XR26 =  09 THEN MR09 ELSE                                     
               IF XR26 GT 09 THEN MR09 ELSE ' ';                                
COMPUTE LL04 = IF XR26 =  10 THEN MR10 ELSE                                     
               IF XR26 =  11 THEN MR11 ELSE                                     
               IF XR26 =  12 THEN MR12 ELSE                                     
               IF XR26 GT 12 THEN MR12 ELSE ' ';                                
COMPUTE LL05 = IF XR26 =  13 THEN MR13 ELSE                                     
               IF XR26 =  14 THEN MR14 ELSE                                     
               IF XR26 =  15 THEN MR15 ELSE                                     
               IF XR26 GT 15 THEN MR15 ELSE ' ';                                
COMPUTE LL06 = IF XR26 =  16 THEN MR16 ELSE                                     
               IF XR26 =  17 THEN MR17 ELSE                                     
               IF XR26 =  18 THEN MR18 ELSE                                     
               IF XR26 GT 18 THEN MR18 ELSE ' ';                                
COMPUTE LL07 = IF XR26 =  19 THEN MR19 ELSE                                     
               IF XR26 =  20 THEN MR20 ELSE                                     
               IF XR26 =  21 THEN MR21 ELSE                                     
               IF XR26 GT 21 THEN MR21 ELSE ' ';                                
COMPUTE LL08 = IF XR26 =  22 THEN MR22 ELSE                                     
               IF XR26 =  23 THEN MR23 ELSE                                     
               IF XR26 =  24 THEN MR24 ELSE                                     
               IF XR26 GT 24 THEN MR24 ELSE ' ';                                
COMPUTE LL09 = IF XR26 =  25 THEN MR25 ELSE ' ';                                
                                                                                
COMPUTE LINE01=LL01;                                                            
COMPUTE LINE02=LL02;                                                            
COMPUTE LINE03=LL03;                                                            
COMPUTE LINE04=LL04;                                                            
COMPUTE LINE05=LL05;                                                            
COMPUTE LINE06=LL06;                                                            
COMPUTE LINE07=LL07;                                                            
COMPUTE LINE08=LL08;                                                            
COMPUTE LINE09=LL09;                                                            
                                                                                
COMPUTE HI_STACK3(1).INST_KEY = HI_STACK2(1).INST_KEY ;                         
COMPUTE HI_STACK3(1).HSIF01 = LINE01;                                           
COMPUTE HI_STACK3(1).HSIF02 = LINE02;                                           
COMPUTE HI_STACK3(1).HSIF03 = LINE03;                                           
COMPUTE HI_STACK3(1).HSIF04 = LINE04;                                           
COMPUTE HI_STACK3(1).HSIF05 = LINE05;                                           
COMPUTE HI_STACK3(1).HSIF06 = LINE06;                                           
COMPUTE HI_STACK3(1).HSIF07 = LINE07;                                           
COMPUTE HI_STACK3(1).HSIF07 = LINE08;                                           
COMPUTE HI_STACK3(1).HSIF07 = LINE09;                                           
                                                                                
FOR 1 UPDATE I_SUMM.HSIF01 I_SUMM.HSIF02 I_SUMM.HSIF03 I_SUMM.HSIF04            
             I_SUMM.HSIF05 I_SUMM.HSIF06 I_SUMM.HSIF07 I_SUMM.HSIF08            
             I_SUMM.HSIF09                                                      
FROM HI_STACK3                                                                  
COMMIT                                                                          
ENDCASE                                                                         
                                                                                
CASE CHK_HIER                                                                   
COMPUTE HK01 = IF HIER_ORG11(1).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                 
COMPUTE HK02 = IF HIER_ORG11(2).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                 
COMPUTE HK03 = IF HIER_ORG11(3).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                 
COMPUTE HK04 = IF HIER_ORG11(4).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                 
COMPUTE HK05 = IF HIER_ORG11(5).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                 
COMPUTE HK06 = IF HIER_ORG11(6).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                 
COMPUTE HK07 = IF HIER_ORG11(7).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                 
COMPUTE HK08 = IF HIER_ORG11(8).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                 
COMPUTE HK09 = IF HIER_ORG11(9).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                 
COMPUTE HK10 = IF HIER_ORG11(10).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                
COMPUTE HK11 = IF HIER_ORG11(11).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                
COMPUTE HK12 = IF HIER_ORG11(12).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                
COMPUTE HK13 = IF HIER_ORG11(13).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                
COMPUTE HK14 = IF HIER_ORG11(14).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                
COMPUTE HK15 = IF HIER_ORG11(15).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                
COMPUTE HK16 = IF HIER_ORG11(16).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                
COMPUTE HK17 = IF HIER_ORG11(17).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                
COMPUTE HK18 = IF HIER_ORG11(18).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                
COMPUTE HK19 = IF HIER_ORG11(19).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                
COMPUTE HK20 = IF HIER_ORG11(20).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                
COMPUTE HK21 = IF HIER_ORG11(21).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                
COMPUTE HK22 = IF HIER_ORG11(22).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                
COMPUTE HK23 = IF HIER_ORG11(23).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                
COMPUTE HK24 = IF HIER_ORG11(24).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                
COMPUTE HK25 = IF HIER_ORG11(25).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                
COMPUTE HK26 = IF HIER_ORG11(26).DEPTNAME NE ' ' THEN 1 ELSE 0 ;                
COMPUTE HTOT = HK01+HK02+HK03+HK04+HK05+HK06+HK07+HK08+HK09+HK10                
             + HK11+HK12+HK13+HK14+HK15+HK16+HK17+HK18+HK19+HK20                
             + HK21+HK22+HK23+HK24+HK25+HK26 ;                                  
IF HTOT GT 25 THEN                                                              
  BEGIN                                                                         
    WINFORM SHOW HIERERROR                                                      
  GOTO ENDCASE                                                                  
ENDBEGIN                                                                        
ENDCASE                                                                         
                                                                                
Case StackVariables                                                             
Infer client.CLIENT.CLIENT_NUM into CL_STACK3;                                  
Infer client.CLIENT.CLIENT_NUM into CL_STACK4;                                  
Infer category.CATEGORY.CATLIST into CA_STACK3;                                 
Infer category.CATEGORY.CATLIST into CA_STACK4;                                 
EndCase                                                                         
                                                                                
CASE ORGANIZE                                                                   
STACK CLEAR HIER_ORG1                                                           
STACK CLEAR HIER_ORG2                                                           
STACK CLEAR HIER_ORG3                                                           
                                                                                
INFER hierorg.ROLLUP.ROLLUP_CODE hierorg.LEVEL.LEVEL hierorg.DEPT.ROLL_LEV INTO 
HIER_ORG1;                                                                      
INFER hierorg.ROLLUP.ROLLUP_CODE hierorg.LEVEL.LEVEL hierorg.DEPT.ROLL_LEV INTO 
HIER_ORG2;                                                                      
INFER hierorg.ROLLUP.ROLLUP_CODE hierorg.LEVEL.LEVEL hierorg.DEPT.ROLL_LEV INTO 
HIER_ORG3;                                                                      
                                                                                
INFER hierorg.ROLLUP.ROLLUP_CODE                       INTO HIER_ORG4           
INFER hierorg.LEVEL.LEVEL                              INTO HIER_ORG5;          
INFER hierorg.LEVEL.LEVEL                              INTO HIER_ORG5A;         
INFER hierorg.LEVEL.LEVEL                              INTO HIER_ORG5B;         
                                                                                
INFER hierorg.ROLLUP.ROLLUP_CODE hierorg.DEPT.ROLL_LEV INTO HIER_ORG6;          
-*INFER hierorg.level.level                              INTO HIER_ORG6;        
                                                                                
INFER hierorg.ROLLUP.ROLLUP_CODE                       INTO HIER_ORG7           
INFER hierorg.ROLLUP.ROLLUP_CODE hierorg.LEVEL.LEVEL   INTO HIER_ORG8;          
INFER hierorg.ROLLUP.ROLLUP_CODE hierorg.DEPT.ROLL_LEV INTO HIER_ORG9;          
INFER hierorg.DEPT.ROLL_LEV                            INTO HIER_ORG10;         
INFER hierorg.DEPT.ROLL_LEV                            INTO HIER_ORG11;         
INFER hierorg.DEPT.ROLL_LEV                            INTO HIER_ORG12;         
INFER hierorg.ROLLUP.ROLLUP_CODE hierorg.DEPT.ROLL_LEV INTO HIER_ORG13;         
                                                                                
                                                                                
REPOSITION hierorg.ROLLUP.ROLLUP_CODE HIERORG.LEVEL.LEVEL HIERORG.DEPT          
.ROLL_LEV;                                                                      
NEXT HIERORG.ROLLUP.ROLLUP_CODE HIERORG.LEVEL.LEVEL HIERORG.DEPT.ROLL_LEV INTO  
HIER_ORG1;                                                                      
                                                                                
REPOSITION HIERORG.ROLLUP_CODE                                                  
                                                                                
FOR 1 NEXT HIERORG.ROLLUP.ROLLUP_CODE HIERORG.LEVEL.LEVEL HIERORG.DEPT.ROLL_LEV 
INTO HIER_ORG1                                                                  
  WHERE HIERORG.ROLLUP_CODE EQ Cntl_Stack(1).ROLLUP_CODE;                       
                                                                                
REPOSITION HIERORG.ROLLUP_CODE                                                  
                                                                                
FOR ALL NEXT HIERORG.ROLLUP.ROLLUP_CODE HIERORG.LEVEL.LEVEL INTO HIER_ORG2      
  WHERE HIERORG.ROLLUP_CODE EQ Cntl_Stack(1).ROLLUP_CODE;                       
                                                                                
REPOSITION HIERORG.ROLLUP_CODE                                                  
                                                                                
FOR ALL NEXT HIERORG.ROLLUP.ROLLUP_CODE HIERORG.DEPT.ROLL_LEV INTO HIER_ORG3    
  WHERE HIERORG.ROLLUP_CODE EQ Cntl_Stack(1).ROLLUP_CODE;                       
                                                                                
ENDCASE                                                                         
                                                                                
END                                                                             
