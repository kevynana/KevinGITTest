-* File INST_A50.FEX
-*
-*****   This routine updates the Hierarchy Keys in the Report Instance
-*****     profiles, following changes made to the Hierarchy Profile that
-*****     required new ROLL_KEYs to be generated.
-*****     This is the 25 level (HIER50) version.
-*****   AUTHOR:  Dave Kuzanek
-*****   PRODUCTION DATE:
-***********************************************************************
-* DATE          NAME                DESCRIPTION
-* 8/29/00     IBISTL-KR             MODIFIED CODE TO REFLECT FIXED
-*                                   KEY LENGTH OF 50.
-*                                   CHANGED XHIER18 TO XHIER50,
-*                                           HIER18 TO HIER50.
-* 10/20/00     KASSOC-DK            MODIFIED CODE TO SET UPD_STAT FLAG
-*                                   INDICATING AN UPDATE HAS FINISHED
-*                                   AND REPORTS CAN CONTINUE EXECUTION
-***********************************************************************

MAINTAIN FILE ROLLUP AND CONTROL AND XHIER50 AND IHIER_SL AND
  RPT_INST AND HIER50

COMPUTE Cnt1/I6 = ;
COMPUTE Cnt2/I6 = ;
COMPUTE Cnt3/I6 = ;
COMPUTE Eff_Hold/YYMD = ;

  COMPUTE S1Stat/A8 = ;
  COMPUTE S2Stat/A8 = ;
  COMPUTE S3Stat/A8 = ;
  COMPUTE S4Stat/A8 = ;
  COMPUTE S5Stat/A8 = ;
  COMPUTE S6Stat/A8 = ;
  COMPUTE S7Stat/A8 = ;
  COMPUTE S8Stat/A8 = ;
  COMPUTE S9Stat/A8 = ;
  COMPUTE S1A/I6 = ;
  COMPUTE S1B/I6 = ;
  COMPUTE S2A/I6 = ;
  COMPUTE S2B/I6 = ;
  COMPUTE S2C/I6 = ;
  COMPUTE S2D/I6 = ;
  COMPUTE S3A/I6 = ;
  COMPUTE S3B/I6 = ;
  COMPUTE S3C/I6 = ;
  COMPUTE S3D/I6 = ;
  COMPUTE S4A/I6 = ;
  COMPUTE S4B/I6 = ;
  COMPUTE S4C/I6 = ;
  COMPUTE S4D/I6 = ;
  COMPUTE S5A/I6 = ;
  COMPUTE S5B/I6 = ;
  COMPUTE S5C/I6 = ;
  COMPUTE S5D/I6 = ;
  COMPUTE S6A/I6 = ;
  COMPUTE S6B/I6 = ;
  COMPUTE S7A/I6 = ;
  COMPUTE S7B/I6 = ;
  COMPUTE S8A/I6 = ;
  COMPUTE S8B/I6 = ;
  COMPUTE S9A/I6 = ;
  COMPUTE S9B/I6 = ;
  COMPUTE S9C/I6 = ;
  COMPUTE S9D/I6 = ;

INFER ROLLUP.ROLLUP_CODE INTO RStack
INFER CONTROL.CONTROL_ID INTO Cntl_Stack
INFER XHIER50.ROLL_LEV INTO HStack
INFER HIER50.ROLL_LEV INTO MH_Stack
INFER RPT_INST.INST_KEY INTO RI_Stack
INFER IHIER_SL.INST_KEY INTO IH_Stack
INFER IHIER_SL.INST_KEY INTO IH2_Stack

REPOSITION CONTROL.CONTROL_ID
FOR ALL NEXT CONTROL.CONTROL_ID INTO Cntl_Stack

REPOSITION ROLLUP.ROLLUP_CODE
NEXT ROLLUP.ROLLUP_CODE INTO RStack(1) WHERE
  ROLLUP.ROLLUP_CODE EQ Cntl_Stack(1).ROLLUP_CODE

REPOSITION XHIER50.ROLL_LEV
FOR ALL NEXT XHIER50.ROLL_LEV INTO HStack

REPOSITION HIER50.ROLL_LEV
FOR ALL NEXT HIER50.ROLL_LEV INTO MHStack
COMPUTE Cnt1 = 1;
REPEAT WHILE Cnt1 LE MHStack.FocCount
  IF MHStack(Cnt1).EFF_DATE GT Eff_Hold THEN
    COMPUTE Eff_Hold = MHStack(Cnt1).EFF_DATE;
  COMPUTE Cnt1 = Cnt1 + 1;
ENDREPEAT
BEGIN
PERFORM Upd_Inst_Desc
ENDBEGIN
IF Eff_Hold GT RStack(1).INST_EFF THEN
BEGIN
  PERFORM Inst_Upd
-*  PERFORM Upd_Inst_Desc
  PERFORM Clear_Look
-*  PERFORM Winform_InstTag
ENDBEGIN
-***********************************************************************
-* 10/20/00     KASSOC-DK            MODIFIED CODE TO RE-SET UPD_STAT FLAG
-*                                   INDICATING AN UPDATE HAS FINISHED
-*                                   AND REPORTS CAN CONTINUE EXECUTION
-***********************************************************************
COMPUTE RStack(1).UPD_STAT = ' ';
UPDATE ROLLUP.UPD_STAT FROM RStack(1)
COMMIT
GOTO END

CASE Inst_Upd
PERFORM Stat_Init
-* WINFORM SHOW_INACTIVE HIERSTAT
COMPUTE Cnt1 = 1;
COMPUTE S9D = HStack.FocCount;
REPEAT WHILE Cnt1 LE HStack.FocCount
  COMPUTE S9C = Cnt1;
  REPOSITION RPT_INST.INST_KEY
  STACK CLEAR RI_Stack
  FOR ALL NEXT RPT_INST.INST_KEY INTO RI_Stack
    WHERE (RPT_INST.LEVEL_KEY EQ HStack(Cnt1).OLD_KEY) AND
          (RPT_INST.ROLLUP_CODE EQ Cntl_Stack(1).ROLLUP_CODE) AND
          (RPT_INST.RPT_LOOK NE 'xxxxxxxx')
  COMPUTE S9B = RI_Stack.FocCount;
  COMPUTE Cnt2 = 1;
  REPEAT WHILE Cnt2 LE RI_Stack.FocCount
    COMPUTE S9A = Cnt2;
-*    WINFORM REFRESH HIERSTAT
    COMPUTE RI_Stack(Cnt2).LEVEL_KEY = HStack(Cnt1).ROLL_KEY;
    COMPUTE RI_Stack(Cnt2).LEV_SELECT = HStack(Cnt1).LEVEL_DESC;
    COMPUTE RI_Stack(Cnt2).RPT_LOOK = 'xxxxxxxx';
    REPOSITION IHIER_SL.INST_KEY
    STACK CLEAR IH_Stack
    NEXT IHIER_SL.INST_KEY INTO IH_Stack(1)
      WHERE IHIER_SL.INST_KEY EQ RI_Stack(Cnt2).INST_KEY
    IF IH_Stack.FocCount GT 0 THEN
    BEGIN
      STACK CLEAR IH2_Stack
      STACK COPY FROM IH_Stack INTO IH2_Stack
      COMPUTE IH2_Stack(1).SEL_KEY = HStack(Cnt1).ROLL_KEY;
      COMPUTE IH2_Stack(1).SEL_DESC = HStack(Cnt1).LEVEL_DESC;
      DELETE IHIER_SL.INST_KEY FROM IH_Stack(1)
      COMMIT
      REPOSITION IHIER_SL.INST_KEY
      INCLUDE IHIER_SL.INST_KEY FROM IH2_Stack(1)
      COMMIT
    ENDBEGIN
    COMPUTE Cnt2 = Cnt2 + 1;
  ENDREPEAT
  FOR ALL UPDATE RPT_INST.LEVEL_KEY RPT_INST.LEV_SELECT
    RPT_INST.RPT_LOOK FROM RI_Stack
  COMMIT
  COMPUTE Cnt1 = Cnt1 + 1;
ENDREPEAT

REPOSITION RPT_INST.INST_KEY
STACK CLEAR RI_Stack
FOR ALL NEXT RPT_INST.INST_KEY INTO RI_Stack
  WHERE (RPT_INST.LEVEL_KEY EQ 'MULTIPLE') AND
        (RPT_INST.ROLLUP_CODE EQ Cntl_Stack(1).ROLLUP_CODE)
COMPUTE Cnt1 = 1;
REPEAT WHILE Cnt1 LE RI_Stack.FocCount
  REPOSITION IHIER_SL.INST_KEY
  STACK CLEAR IH_Stack
  FOR ALL NEXT IHIER_SL.INST_KEY INTO IH_Stack
    WHERE IHIER_SL.INST_KEY EQ RI_Stack(Cnt1).INST_KEY
  STACK CLEAR IH2_Stack
  STACK COPY FROM IH_Stack INTO IH2_Stack
  COMPUTE Cnt2 = 1;
  REPEAT WHILE Cnt2 LE IH_Stack.FocCount
    REPOSITION XHIER50.ROLL_LEV
    STACK CLEAR HStack
    NEXT XHIER50.ROLL_LEV INTO HStack
      WHERE XHIER50.OLD_KEY EQ IH_Stack(Cnt2).SEL_KEY
    IF HStack.FocCount GT 0 THEN
    BEGIN
      COMPUTE IH2_Stack(Cnt2).SEL_KEY = HStack(1).ROLL_KEY;
      COMPUTE IH2_Stack(Cnt2).SEL_DESC = HStack(1).LEVEL_DESC;
    ENDBEGIN
    COMPUTE Cnt2 = Cnt2 + 1;
  ENDREPEAT
  FOR ALL DELETE IHIER_SL.INST_KEY FROM IH_Stack
  COMMIT
  REPOSITION IHIER_SL.INST_KEY
  FOR ALL INCLUDE IHIER_SL.INST_KEY FROM IH2_Stack
  COMMIT
  COMPUTE Cnt1 = Cnt1 + 1;
ENDREPEAT

COMPUTE RStack(1).INST_EFF = Eff_Hold;
UPDATE ROLLUP.INST_EFF FROM RStack(1)
COMMIT
-* WINFORM CLOSE
ENDCASE

CASE Upd_Inst_Desc
  REPOSITION RPT_INST.INST_KEY
  STACK CLEAR RI_Stack
  FOR ALL NEXT RPT_INST.INST_KEY INTO RI_Stack WHERE
    (RPT_INST.ROLLUP_CODE EQ RStack.ROLLUP_CODE) AND
    (RPT_INST.RPT_LOOK NE 'xxxxxxxx')
  COMPUTE Cnt1 = 1;
  REPEAT WHILE Cnt1 LE RI_Stack.FocCount
    REPOSITION HIER50.LEVEL_DESC
    STACK CLEAR MH_Stack
    NEXT HIER50.LEVEL_DESC INTO MH_Stack WHERE
      HIER50.ROLL_KEY EQ RI_Stack(Cnt1).LEVEL_KEY
    REPOSITION IHIER_SL.INST_KEY
    STACK CLEAR IH_Stack
    FOR ALL NEXT IHIER_SL.INST_KEY INTO IH_Stack WHERE
      IHIER_SL.INST_KEY EQ RI_Stack(Cnt1).INST_KEY
    COMPUTE Cnt2 = 1;
    REPEAT WHILE Cnt2 LE IH_Stack.FocCount
      COMPUTE IH_Stack(Cnt2).SEL_DESC = MH_Stack(1).LEVEL_DESC;
      COMPUTE Cnt2 = Cnt2 + 1;
    ENDREPEAT
    FOR ALL UPDATE IHIER_SL.SEL_DESC FROM IH_Stack
    COMPUTE RI_Stack(Cnt1).LEV_SELECT = MH_Stack(1).LEVEL_DESC;
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDREPEAT
  FOR ALL UPDATE RPT_INST.LEV_SELECT FROM RI_Stack
  COMMIT
endcase

CASE Clear_Look
  REPOSITION RPT_INST.INST_KEY
  STACK CLEAR RI_Stack
  FOR ALL NEXT RPT_INST.INST_KEY INTO RI_Stack WHERE
    (RPT_INST.ROLLUP_CODE EQ RStack.ROLLUP_CODE) AND
    (RPT_INST.RPT_LOOK EQ 'xxxxxxxx')
  COMPUTE Cnt1 = 1;
  REPEAT WHILE Cnt1 LE RI_Stack.FocCount
    COMPUTE RI_Stack(Cnt1).RPT_LOOK = ' ';
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDREPEAT
  FOR ALL UPDATE RPT_INST.RPT_LOOK FROM RI_Stack
  COMMIT
ENDCASE

CASE Stat_Init
  COMPUTE S1Stat = 'Completed';
  COMPUTE S2Stat = 'Completed';
  COMPUTE S3Stat = 'Completed';
  COMPUTE S4Stat = 'Completed';
  COMPUTE S5Stat = 'Completed';
  COMPUTE S6Stat = 'Completed';
  COMPUTE S7Stat = 'Completed';
  COMPUTE S8Stat = 'Completed';
  COMPUTE S9Stat = 'Working';
endcase
case Winform_HierStat
-*   Winform show HierStat
endcase
case Winform_InstTag
-*   Winform show InstTag
endcase




END
