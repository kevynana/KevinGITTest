-* File HP50LOAD.FEX
-*
-*****   This routine walks through the HIERMAP database to update the
-*****     HIERPROF database.  This routine checks for a change in the boss
-*****     level for a given level code, and if such a change occurs, writes
-*****     a new HIERPROF record, leaving the old history entry intact.
-*****   AUTHOR:  Dave Kuzanek
-*****   PRODUCTION DATE:

MAINTAIN FILES Hiermap AND Hier50
  COMPUTE Cnt1/I3 = 1;
  COMPUTE Cnt2/I3 = 1;
  COMPUTE Seed/A2 = '00';
  COMPUTE HighLim/A50 =;
  COMPUTE ZLoc/I2;
  COMPUTE Sub2/A2;
  COMPUTE Sub4/A4;
  COMPUTE Sub6/A6;
  COMPUTE Sub8/A8;
  COMPUTE Sub10/A10;
  COMPUTE Sub12/A12;
  COMPUTE Sub14/A14;
  COMPUTE Sub16/A16;
  COMPUTE Sub18/A18;
  COMPUTE Sub20/A20;
  COMPUTE Sub22/A22;
  COMPUTE Sub24/A24;
  COMPUTE Sub26/A26;
  COMPUTE Sub28/A28;
  COMPUTE Sub30/A30;
  COMPUTE Sub32/A32;
  COMPUTE Sub34/A34;
  COMPUTE Sub36/A36;
  COMPUTE Sub38/A38;
  COMPUTE Sub40/A40;
  COMPUTE Sub42/A42;
  COMPUTE Sub44/A44;
  COMPUTE Sub46/A46;
  COMPUTE Sub48/A48;

  COMPUTE S1Stat/A8 = ;
  COMPUTE S2Stat/A8 = ;
  COMPUTE S3Stat/A8 = ;
  COMPUTE S4Stat/A8 = ;
  COMPUTE S5Stat/A8 = ;
  COMPUTE S6Stat/A8 = ;
  COMPUTE S7Stat/A8 = ;
  COMPUTE S8Stat/A8 = ;
  COMPUTE S9Stat/A8 = ;
  COMPUTE S1A/I6 = ;
  COMPUTE S1B/I6 = ;
  COMPUTE S2A/I6 = ;
  COMPUTE S2B/I6 = ;
  COMPUTE S2C/I6 = ;
  COMPUTE S2D/I6 = ;
  COMPUTE S3A/I6 = ;
  COMPUTE S3B/I6 = ;
  COMPUTE S3C/I6 = ;
  COMPUTE S3D/I6 = ;
  COMPUTE S4A/I6 = ;
  COMPUTE S4B/I6 = ;
  COMPUTE S4C/I6 = ;
  COMPUTE S4D/I6 = ;
  COMPUTE S5A/I6 = ;
  COMPUTE S5B/I6 = ;
  COMPUTE S5C/I6 = ;
  COMPUTE S5D/I6 = ;
  COMPUTE S6A/I6 = ;
  COMPUTE S6B/I6 = ;
  COMPUTE S7A/I6 = ;
  COMPUTE S7B/I6 = ;
  COMPUTE S8A/I6 = ;
  COMPUTE S8B/I6 = ;
  COMPUTE S9A/I6 = ;
  COMPUTE S9B/I6 = ;
  COMPUTE S9C/I6 = ;
  COMPUTE S9D/I6 = ;

  INFER Hier50.Roll_Lev INTO OStack
  INFER Hier50.Roll_Lev INTO HStack
  INFER Hier50.ROLL_LEV INTO NStack
  INFER Hier50.ROLL_LEV INTO QStack
  INFER Hier50.ROLL_LEV INTO XStack
  INFER Hiermap.Level_code INTO MStack

-* This loop resets the Update flag in the Hierarchy Profile to blank

  PERFORM Stat_Init
-*  WINFORM SHOW_INACTIVE HierStat

  REPOSITION Hier50.ROLL_LEV
  FOR ALL NEXT Hier50.Roll_Lev INTO HStack
  COMPUTE Cnt1 = 1;
  REPEAT WHILE Cnt1 LE HStack.FocCount
    COMPUTE HStack(Cnt1).UPD_FLAG =
      IF (HStack(Cnt1).UPD_FLAG EQ 'O') OR (HStack(Cnt1).UPD_FLAG EQ 'R')
        THEN HStack(Cnt1).UPD_FLAG ELSE ' ';
    COMPUTE HStack(Cnt1).OLD_KEY = HStack(Cnt1).ROLL_KEY;
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDREPEAT
  FOR ALL UPDATE Hier50.UPD_FLAG Hier50.OLD_KEY FROM HStack
  COMMIT
  STACK CLEAR HStack

-* This loop walks through the HIERMAP DB one record at a time
  REPOSITION HIERMAP.LEVEL_CODE
  STACK CLEAR MStack
  FOR ALL NEXT HIERMAP.LEVEL_CODE INTO MStack
  COMPUTE Cnt1 = 1;
  COMPUTE S1B = MStack.FocCount;
  REPEAT WHILE Cnt1 LE MStack.FocCount
    COMPUTE S1A = Cnt1;
-*    WINFORM REFRESH HierStat
    REPOSITION HIER50.ROLL_LEV
    NEXT HIER50.ROLL_LEV INTO HStack(1)
      WHERE ((HIER50.ROLL_LEV EQ MStack(Cnt1).LEVEL_CODE) AND
             (HIER50.UPD_FLAG NE 'N'))
    IF HStack.FocCount EQ 0 THEN PERFORM New_Prof
      ELSE PERFORM Old_Prof
    STACK CLEAR HStack OStack QStack NStack
    COMPUTE Cnt1 = Cnt1 + 1;
  ENDREPEAT
  PERFORM Zero_R
-*  WINFORM CLOSE
  GOTO END

  CASE New_Prof
    COMPUTE HStack(1).Roll_Lev = MStack(Cnt1).Level_Code;
    COMPUTE HStack(1).Eff_Date = MStack(Cnt1).EDate;
    COMPUTE HStack(1).Level_Desc = MStack(Cnt1).Level_Desc;
    COMPUTE HStack(1).Level_Boss = MStack(Cnt1).Level_Boss;
    COMPUTE HStack(1).Old_Key = ' ';
    IF MStack(Cnt1).Level_Boss EQ ' ' THEN
      BEGIN
        PERFORM Next_Seed
        COMPUTE HStack(1).Roll_Key = 
        Seed | '000000000000000000000000000000000000000000000000';
      ENDBEGIN
      ELSE COMPUTE HStack(1).Roll_Key = 
        '00000000000000000000000000000000000000000000000000';
-* Flag N indicates a New Hierarchy entry
    COMPUTE HStack(1).Upd_Flag = 'N';
    REPOSITION Hier50.Roll_Lev
    INCLUDE Hier50.Roll_Lev FROM HStack(1)
    COMMIT
endcase

  CASE Old_Prof
    IF HStack(1).Level_Boss EQ MStack(Cnt1).Level_Boss THEN
      BEGIN
        COMPUTE HStack(1).Level_Desc = MStack(Cnt1).Level_Desc;
        IF MStack(Cnt1).Level_Boss EQ ' ' THEN
          BEGIN
            PERFORM Next_Seed
            COMPUTE HStack(1).Roll_Key = 
          Seed | '000000000000000000000000000000000000000000000000';
          ENDBEGIN
          ELSE BEGIN
            COMPUTE HStack(1).Roll_Key = 
         '00000000000000000000000000000000000000000000000000';
          ENDBEGIN
-* Flag U indicates an Update Hierarchy entry
        COMPUTE HStack(1).Upd_Flag = 'U';
        UPDATE Hier50.Level_Desc Hier50.Roll_Key
          Hier50.Upd_Flag FROM HStack(1)
        COMMIT
      ENDBEGIN
    ELSE
      BEGIN
        COMPUTE OStack(1).Roll_Lev = HStack(1).Roll_Lev;
        COMPUTE OStack(1).Eff_Date = HStack(1).Eff_Date;
        COMPUTE OStack(1).Level_Desc = HStack(1).Level_Desc;
        COMPUTE OStack(1).Level_Boss = HStack(1).Level_Boss;
        COMPUTE OStack(1).Old_Key = HStack(1).Old_Key;
        COMPUTE OStack(1).Roll_Key = HStack(1).Roll_Key;
        COMPUTE OStack(1).Upd_Flag = HStack(1).Upd_Flag;
        COMPUTE HStack(1).Roll_Key = 
        '00000000000000000000000000000000000000000000000000';
-* Flag R indicates the Root level of an Old Hierarchy entry
        COMPUTE HStack(1).Upd_Flag = 'R';
        UPDATE Hier50.Roll_Key Hier50.Upd_Flag FROM HStack(1)
        COMMIT
        COMPUTE HStack(1).Roll_Lev = MStack(Cnt1).Level_Code;
        COMPUTE HStack(1).Level_Desc = MStack(Cnt1).Level_Desc;
        COMPUTE HStack(1).Eff_Date = MStack(Cnt1).EDate;
        COMPUTE HStack(1).Level_Boss = MStack(Cnt1).Level_Boss;
-*
        STACK CLEAR XStack
        REPOSITION HIER50.ROLL_LEV
        FOR ALL NEXT HIER50.ROLL_LEV INTO XStack WHERE
          (HIER50.ROLL_LEV EQ MStack(Cnt1).Level_Code) AND
          (HIER50.EFF_DATE NE MStack(Cnt1).EDate)
        STACK SORT XStack BY HIGHEST EFF_DATE
        COMPUTE HStack(1).OLD_KEY = XStack(1).OLD_KEY;
-*
        IF MStack(Cnt1).Level_Boss EQ ' ' THEN
          BEGIN
            PERFORM Next_Seed
            COMPUTE HStack(1).Roll_Key = 
          Seed | '000000000000000000000000000000000000000000000000';
          ENDBEGIN
          ELSE BEGIN
            COMPUTE HStack(1).Roll_Key = 
            '00000000000000000000000000000000000000000000000000';
          ENDBEGIN
-* Flag N indicates a New Hierarchy entry
        COMPUTE HStack(1).Upd_Flag = 'N';
        REPOSITION Hier50.Roll_Lev
        REVISE Hier50.Level_Desc Hier50.Level_Boss Hier50.Old_Key
          Hier50.Upd_Flag Hier50.Roll_Key FROM HStack(1)
        COMMIT
        PERFORM Adjust_Limbs
      ENDBEGIN
endcase

  CASE Adjust_Limbs
-*  This case adjusts the hierarchy limbs hanging from an old hierarchy key
    REPOSITION Hier50.Roll_Lev
    PERFORM Comp_HighLim
    STACK CLEAR QStack
    FOR ALL NEXT Hier50.ROLL_LEV INTO QStack
      WHERE (Hier50.OLD_KEY GT OStack(1).OLD_KEY) AND
            (Hier50.OLD_KEY LE HighLim)
    STACK CLEAR NStack
    STACK COPY FROM QStack INTO NStack
    COMPUTE Cnt2 = 1;

    FOR ALL DELETE HIER50.ROLL_KEY FROM QStack
    COMMIT
    REPEAT WHILE Cnt2 LE NStack.FocCount
      IF NStack(Cnt2).UPD_FLAG NE ' ' THEN
      BEGIN
        COMPUTE NStack(Cnt2).ROLL_KEY = 
        '00000000000000000000000000000000000000000000000000';
      ENDBEGIN
      ELSE BEGIN
        COMPUTE NStack(Cnt2).UPD_FLAG = 'O';
        COMPUTE NStack(Cnt2).ROLL_KEY = 
        '00000000000000000000000000000000000000000000000000';
        COMPUTE NStack(Cnt2).EFF_DATE = OStack.EFF_DATE;
      ENDBEGIN
      COMPUTE Cnt2 = Cnt2 + 1;
    ENDREPEAT
    REPOSITION Hier50.ROLL_KEY
    FOR ALL REVISE HIER50.ROLL_KEY HIER50.UPD_FLAG HIER50.OLD_KEY
      FROM NStack
    COMMIT

    COMPUTE Cnt2 = 1;
    REPEAT WHILE Cnt2 LE NStack.FocCount
      IF NStack(Cnt2).UPD_FLAG EQ ' ' THEN
      BEGIN
        COMPUTE NStack(Cnt2).UPD_FLAG = 'N';
        COMPUTE NStack(Cnt2).ROLL_KEY = 
        '00000000000000000000000000000000000000000000000000';
        COMPUTE NStack(Cnt2).OLD_KEY = ' ';
        COMPUTE NStack(Cnt2).Eff_Date = MStack(Cnt1).EDate;
      ENDBEGIN
      COMPUTE Cnt2 = Cnt2 + 1;
    ENDREPEAT
    REPOSITION Hier50.ROLL_KEY
    FOR ALL REVISE Hier50.UPD_FLAG Hier50.ROLL_KEY Hier50.OLD_KEY 
      FROM NStack
    COMMIT
endcase

CASE Zero_R
    STACK CLEAR QStack
    REPOSITION Hier50.Roll_Lev
    FOR ALL NEXT Hier50.ROLL_LEV INTO QStack
      WHERE (Hier50.LEVEL_BOSS NE ' ') AND
            (Hier50.ROLL_KEY NE 
       '00000000000000000000000000000000000000000000000000')
    COMPUTE Cnt2 = 1;
    REPEAT WHILE Cnt2 LE QStack.FocCount
      COMPUTE QStack(Cnt2).ROLL_KEY = 
      '00000000000000000000000000000000000000000000000000';
      COMPUTE Cnt2 = Cnt2 + 1;
    ENDREPEAT
    FOR ALL UPDATE Hier50.ROLL_KEY FROM QStack
    COMMIT
endcase

CASE Comp_HighLim
  COMPUTE ZLoc = POSIT(OStack(1).Roll_Key,50,'0',1,ZLoc);
  IF ZLoc EQ 3 THEN
  BEGIN
    COMPUTE Sub2 = SUBSTR(50,OStack(1).Roll_Key,1,2,2,Sub2);
    COMPUTE HighLim = 
      Sub2 || 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 5 THEN
  BEGIN
    COMPUTE Sub4 = SUBSTR(50,OStack(1).Roll_Key,1,4,4,Sub4);
    COMPUTE HighLim = 
      Sub4 || 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 7 THEN
  BEGIN
    COMPUTE Sub6 = SUBSTR(50,OStack(1).Roll_Key,1,6,6,Sub6);
    COMPUTE HighLim = 
      Sub6 || 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 9 THEN
  BEGIN
    COMPUTE Sub8 = SUBSTR(50,OStack(1).Roll_Key,1,8,8,Sub8);
    COMPUTE HighLim = 
      Sub8 || 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 11 THEN
  BEGIN
    COMPUTE Sub10 = SUBSTR(50,OStack(1).Roll_Key,1,10,10,Sub10);
    COMPUTE HighLim = 
      Sub10 || 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 13 THEN
  BEGIN
    COMPUTE Sub12 = SUBSTR(50,OStack(1).Roll_Key,1,12,12,Sub12);
    COMPUTE HighLim = 
      Sub12 || 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 15 THEN
  BEGIN
    COMPUTE Sub14 = SUBSTR(50,OStack(1).Roll_Key,1,14,14,Sub14);
    COMPUTE HighLim = 
      Sub14 || 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 17 THEN
  BEGIN
    COMPUTE Sub16 = SUBSTR(50,OStack(1).Roll_Key,1,16,16,Sub16);
    COMPUTE HighLim = 
      Sub16 || 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 19 THEN
  BEGIN
    COMPUTE Sub18 = SUBSTR(50,OStack(1).Roll_Key,1,18,18,Sub18);
    COMPUTE HighLim = 
      Sub18 || 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 21 THEN
  BEGIN
    COMPUTE Sub20 = SUBSTR(50,OStack(1).Roll_Key,1,20,20,Sub20);
    COMPUTE HighLim = 
      Sub20 || 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 23 THEN
  BEGIN
    COMPUTE Sub22 = SUBSTR(50,OStack(1).Roll_Key,1,22,22,Sub22);
    COMPUTE HighLim = 
      Sub22 || 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 25 THEN
  BEGIN
    COMPUTE Sub24 = SUBSTR(50,OStack(1).Roll_Key,1,24,24,Sub24);
    COMPUTE HighLim = 
      Sub24 || 'ZZZZZZZZZZZZZZZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 27 THEN
  BEGIN
    COMPUTE Sub26 = SUBSTR(50,OStack(1).Roll_Key,1,26,26,Sub26);
    COMPUTE HighLim = 
      Sub26 || 'ZZZZZZZZZZZZZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 29 THEN
  BEGIN
    COMPUTE Sub28 = SUBSTR(50,OStack(1).Roll_Key,1,28,28,Sub28);
    COMPUTE HighLim = 
      Sub28 || 'ZZZZZZZZZZZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 31 THEN
  BEGIN
    COMPUTE Sub30 = SUBSTR(50,OStack(1).Roll_Key,1,30,30,Sub30);
    COMPUTE HighLim = 
      Sub30 || 'ZZZZZZZZZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 33 THEN
  BEGIN
    COMPUTE Sub32 = SUBSTR(50,OStack(1).Roll_Key,1,32,32,Sub32);
    COMPUTE HighLim = 
      Sub32 || 'ZZZZZZZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 35 THEN
  BEGIN
    COMPUTE Sub34 = SUBSTR(50,OStack(1).Roll_Key,1,34,34,Sub34);
    COMPUTE HighLim = 
      Sub34 || 'ZZZZZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 37 THEN
  BEGIN
    COMPUTE Sub36 = SUBSTR(50,OStack(1).Roll_Key,1,36,36,Sub36);
    COMPUTE HighLim = 
      Sub36 || 'ZZZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 39 THEN
  BEGIN
    COMPUTE Sub38 = SUBSTR(50,OStack(1).Roll_Key,1,38,38,Sub38);
    COMPUTE HighLim = 
      Sub38 || 'ZZZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 41 THEN
  BEGIN
    COMPUTE Sub40 = SUBSTR(50,OStack(1).Roll_Key,1,40,40,Sub40);
    COMPUTE HighLim = 
      Sub40 || 'ZZZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 43 THEN
  BEGIN
    COMPUTE Sub42 = SUBSTR(50,OStack(1).Roll_Key,1,42,42,Sub42);
    COMPUTE HighLim = 
      Sub42 || 'ZZZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 45 THEN
  BEGIN
    COMPUTE Sub44 = SUBSTR(50,OStack(1).Roll_Key,1,44,44,Sub44);
    COMPUTE HighLim = 
      Sub44 || 'ZZZZZZ';
  ENDBEGIN
  IF ZLoc EQ 47 THEN
  BEGIN
    COMPUTE Sub46 = SUBSTR(50,OStack(1).Roll_Key,1,46,46,Sub46);
    COMPUTE HighLim = 
      Sub46 || 'ZZZZ';
  ENDBEGIN
  IF ZLoc EQ 49 THEN
  BEGIN
    COMPUTE Sub48 = SUBSTR(50,OStack(1).Roll_Key,1,48,48,Sub48);
    COMPUTE HighLim = Sub48 || 'ZZ';
  ENDBEGIN
endcase

  CASE Next_Seed
    IF Seed EQ '00' THEN
      BEGIN
        COMPUTE Seed = 'AA';
        GOTO ENDCASE
      ENDBEGIN
    IF Seed EQ 'AA' THEN
      BEGIN
        COMPUTE Seed = 'BB';
        GOTO ENDCASE
      ENDBEGIN
    IF Seed EQ 'BB' THEN
      BEGIN
        COMPUTE Seed = 'CC';
        GOTO ENDCASE
      ENDBEGIN
    IF Seed EQ 'CC' THEN
      BEGIN
        COMPUTE Seed = 'DD';
        GOTO ENDCASE
      ENDBEGIN
    IF Seed EQ 'DD' THEN
      BEGIN
        COMPUTE Seed = 'EE';
        GOTO ENDCASE
      ENDBEGIN
    IF Seed EQ 'EE' THEN
      BEGIN
        COMPUTE Seed = 'FF';
        GOTO ENDCASE
      ENDBEGIN
    IF Seed EQ 'FF' THEN
      BEGIN
        COMPUTE Seed = 'GG';
        GOTO ENDCASE
      ENDBEGIN
    IF Seed EQ 'GG' THEN
      BEGIN
        COMPUTE Seed = 'HH';
        GOTO ENDCASE
      ENDBEGIN
    IF Seed EQ 'HH' THEN
      BEGIN
        COMPUTE Seed = 'II';
        GOTO ENDCASE
      ENDBEGIN
    IF Seed EQ 'II' THEN
      BEGIN
        COMPUTE Seed = 'JJ';
        GOTO ENDCASE
      ENDBEGIN
    IF Seed EQ 'JJ' THEN
      BEGIN
        COMPUTE Seed = 'KK';
        GOTO ENDCASE
      ENDBEGIN
    IF Seed EQ 'KK' THEN
      BEGIN
        COMPUTE Seed = 'LL';
        GOTO ENDCASE
      ENDBEGIN
    IF Seed EQ 'LL' THEN
      BEGIN
        COMPUTE Seed = 'MM';
        GOTO ENDCASE
      ENDBEGIN
    IF Seed EQ 'MM' THEN
      BEGIN
        COMPUTE Seed = 'NN';
        GOTO ENDCASE
      ENDBEGIN
    IF Seed EQ 'NN' THEN
      BEGIN
        COMPUTE Seed = 'OO';
        GOTO ENDCASE
      ENDBEGIN
    IF Seed EQ 'OO' THEN
      BEGIN
        COMPUTE Seed = 'PP';
        GOTO ENDCASE
      ENDBEGIN
endcase

CASE Stat_Init
  COMPUTE S1Stat = 'Working';
  COMPUTE S2Stat = 'Pending';
  COMPUTE S3Stat = 'Pending';
  COMPUTE S4Stat = 'Pending';
  COMPUTE S5Stat = 'Pending';
  COMPUTE S6Stat = 'Pending';
  COMPUTE S7Stat = 'Pending';
  COMPUTE S8Stat = 'Pending';
  COMPUTE S9Stat = 'Pending';
ENDCASE

case Winform_HierStat
-*   Winform show HierStat
endcase

END
