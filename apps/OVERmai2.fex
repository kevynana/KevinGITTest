-*****************THIS HEADER REPRESENTS THE 80 CHARACTER MAXIUM FOR PROGRAMS**

-* File OVERMAI2.FEX
MAINTAIN FILES OV1_MAIN AND TKT_TYPO

INFER OV1_MAIN.CATEGORY INTO E_STACK
INFER TKT_TYPO.CDM1NET_AMT INTO TYPO_STACK

COMPUTE E_STACK(1).CATEGORY = 'Air';
        E_STACK(2).CATEGORY = 'Air';
        E_STACK(3).CATEGORY = 'Air';
        E_STACK(4).CATEGORY = 'Performance';
        E_STACK(5).CATEGORY = 'Performance';
        E_STACK(6).CATEGORY = 'Performance';
        E_STACK(1).ROW_LABEL = 'Domestic';
        E_STACK(2).ROW_LABEL = 'International';
        E_STACK(3).ROW_LABEL = 'Total';
        E_STACK(4).ROW_LABEL = 'Domestic';
        E_STACK(5).ROW_LABEL = 'International';
        E_STACK(6).ROW_LABEL = 'Total';
        E_STACK(1).CAT_ORDER = '1';
        E_STACK(2).CAT_ORDER = '1';
        E_STACK(3).CAT_ORDER = '1';
        E_STACK(4).CAT_ORDER = '2';
        E_STACK(5).CAT_ORDER = '2';
        E_STACK(6).CAT_ORDER = '2';
        E_STACK(1).ROW_ORDER = '1'; -* THESE NEED TO BE PARAMETERS
        E_STACK(2).ROW_ORDER = '2'; -* SO THAT WE CAN SORT HOWEVER 
        E_STACK(3).ROW_ORDER = '3'; -* THE CLIENT WOULD LIKE TO SEE
        E_STACK(4).ROW_ORDER = '1';
        E_STACK(5).ROW_ORDER = '2';
        E_STACK(6).ROW_ORDER = '3';
        CNT1/I2 = 0;


-* IF A_STACK.FOCCOUNT EQ 0 THEN GOTO EXITREPEAT

COMPUTE CNT1 = 1;
-* REPEAT WHILE CNT1 LE A_STACK.FOCCOUNT

REPEAT ALL
 STACK CLEAR TYPO_STACK
 NEXT TKT_TYPO.CDM1NET_AMT INTO TYPO_STACK
 
TYPE "LOADING STACKS"
 IF TYPO_STACK.FOCCOUNT EQ 0 THEN GOTO EXITREPEAT

-*NEW CASES   
    PERFORM NET_VOLUME
    PERFORM TKT_ISS
    PERFORM SAVINGS
    PERFORM LOST_SAVE

ENDREPEAT

FOR ALL INCLUDE OV1_MAIN.VOL_CURR FROM E_STACK
COMMIT
-****************************
CASE NET_VOLUME

TYPE "NET_VOLUME"
-* DOMESTIC CALCULATIONS FOR NET VOLUME COLUMNS

COMPUTE 
 E_STACK(1).VOL_CURR = E_STACK(1).VOL_CURR
                       + (TYPO_STACK(CNT1).CDM1NET_AMT); 
                                              
 E_STACK(1).VOL_PRIOR = E_STACK(1).VOL_PRIOR
                        + (TYPO_STACK(CNT1).PDM1NET_AMT); 
                                        

-* INTERNATIONAL CALCULATIONS FOR NET VOLUME COLUMNS

E_STACK(2).VOL_CURR = E_STACK(2).VOL_CURR
                      + (TYPO_STACK(CNT1).CIM1NET_AMT); 
                                              
E_STACK(2).VOL_PRIOR = E_STACK(2).VOL_PRIOR
                       + (TYPO_STACK(CNT1).PIM1NET_AMT); 
                                              
-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR NET VOLUME COLUMNS

E_STACK(3).VOL_CURR = E_STACK(1).VOL_CURR + E_STACK(2).VOL_CURR;
E_STACK(3).VOL_PRIOR = E_STACK(1).VOL_PRIOR + E_STACK(2).VOL_PRIOR;

ENDCASE
-****************************

CASE TKT_ISS
TYPE "TKT_ISS"


-* DOMESTIC CALCULATIONS FOR NET TICKETS COLUMNS

COMPUTE 
 E_STACK(1).TKT_CURR = E_STACK(1).TKT_CURR
                       + TYPO_STACK(CNT1).CDM1TKT_ISS; 
                       
 E_STACK(1).TKT_PRIOR = E_STACK(1).TKT_PRIOR
                        + TYPO_STACK(CNT1).PDM1TKT_ISS;                          
 
-* INTERNATIONAL CALCULATIONS FOR TICKETS ISSUED COLUMNS

E_STACK(2).TKT_CURR = E_STACK(2).TKT_CURR
                      + TYPO_STACK(CNT1).CIM1TKT_ISS; 

E_STACK(2).TKT_PRIOR = E_STACK(2).TKT_PRIOR
                       + TYPO_STACK(CNT1).PIM1TKT_ISS; 

-* DOMESTIC AND INTERNATIONAL CALCULATIONS FOR TICKETS ISSUED COLUMNS

E_STACK(3).TKT_CURR = E_STACK(1).TKT_CURR + E_STACK(2).TKT_CURR;
E_STACK(3).TKT_PRIOR = E_STACK(1).TKT_PRIOR + E_STACK(2).TKT_PRIOR;

ENDCASE
-******************************************************
 CASE SAVINGS
 TYPE "SAVINGS"

-* DOMESTIC CURRENT AND PRIOR SAVINGS CALCULATIONS

COMPUTE
E_STACK(4).VOL_CURR = E_STACK(4).VOL_CURR
                      + TYPO_STACK(CNT1).CDM1SAV_AMT; 
E_STACK(4).VOL_PRIOR = E_STACK(4).VOL_PRIOR
                      + TYPO_STACK(CNT1).PDM1SAV_AMT;

-* INTERNATIONAL CURRENT AND PRIOR SAVINGS CALCULATIONS

E_STACK(5).VOL_CURR = E_STACK(5).VOL_CURR
                      + TYPO_STACK(CNT1).CIM1SAV_AMT; 
E_STACK(5).VOL_PRIOR = E_STACK(5).VOL_PRIOR
                      + TYPO_STACK(CNT1).PIM1SAV_AMT;

-* TOTAL CURRENT AND PRIOR SAVINGS CALCULATIONS

E_STACK(6).VOL_CURR = E_STACK(4).VOL_CURR + E_STACK(5).VOL_CURR; 
E_STACK(6).VOL_PRIOR = E_STACK(4).VOL_PRIOR + E_STACK(5).VOL_PRIOR;
                      
ENDCASE

-*****************************************************************

CASE LOST_SAVE
TYPE "LOST SAVINGS"

-* DOMESTIC CURRENT AND PRIOR LOST SAVINGS CALCULATIONS

COMPUTE 
E_STACK(4).TKT_CURR = E_STACK(4).TKT_CURR
                      + TYPO_STACK(CNT1).CDM1LOS_AMT;
E_STACK(4).TKT_PRIOR = E_STACK(4).TKT_PRIOR
                      + TYPO_STACK(CNT1).PDM1LOS_AMT;

-* INTERNATIONAL CURRENT AND PRIOR LOST SAVINGS CALCULATIONS

E_STACK(5).TKT_CURR = E_STACK(5).TKT_CURR
                      + TYPO_STACK(CNT1).CIM1LOS_AMT;
E_STACK(5).TKT_PRIOR = E_STACK(5).TKT_PRIOR
                      + TYPO_STACK(CNT1).PIM1LOS_AMT;

-* TOTAL CURRENT AND PRIOR LOST SAVINGS CALCULATIONS

E_STACK(6).TKT_CURR = E_STACK(4).TKT_CURR + E_STACK(5).TKT_CURR;
E_STACK(6).TKT_PRIOR = E_STACK(4).TKT_PRIOR + E_STACK(6).TKT_PRIOR;

ENDCASE

     
-* 

END

