-****************************************************************************
-* This program is used to REBUILD RPT_FLDS database. Before rebuilding, the
-* temp file RPTFLDS2 needs to be created, and initialized.  At the end of
-* program execution, COPY RPTFLDS2.foc to RPT_FLDS.foc.
-*
-* RPTFLDS2.mas should be identical to RPT_FLDS.mas.
-*
-* Date: Nov. 25, 2003
-* Note: The program was tested on Nov 25, 2003 and it worked.
-* LS - 02/20/2004 Updated for Total Company Reporting.
-* LS - 07/13/2004 global currency changes as well as trip_code and nhtl_code
-* LS - 06/16/2005 added trvlsmry segment
-* LS - 11/20/2006 added booking types, georegion, country and state
-* REJ  04/12/2010 updated program.  (Adding Limo fields to RPT_FLDS for QR)
-****************************************************************************
-INCLUDE SETECHO
 
-GOTO AA;
 
-*SET TEMPERASE = OFF
-DOS COPY D:\TNT\TTracker\SUDATA\DUMMY.FOC D:\TNT\TTracker\SUDATA\RPTFLDS2.FOC
-RUN
 
USE CLEAR *
 
-*WHENCE RPTFLDS2 FOCUS
-*WHENCE RPT_FLDS FOCUS
-*-RUN
-*-EXIT
-RUN
CREATE FILE HRPTFLDS
CREATE FILE RPTFLDS2
-RUN
 
MAINTAIN FILE RPT_FLDS AND RPTFLDS2
 
CASE Top
COMPUTE CNT/I7=;
 
-*SEG 1
INFER RPTFLDS2.INST_KEY INTO CopyTo1;
 
STACK CLEAR CPYTEMP1 CopyTo1;
REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.CURRENCY_CODE INTO CPYTEMP1;
STACK SORT CPYTEMP1 BY INST_KEY;
 
COMPUTE CNT = 1;
REPEAT WHILE CNT LE CPYTEMP1.FOCCOUNT
  CopyTo1(CNT).INST_KEY = CPYTEMP1(CNT).INST_KEY;
  CopyTo1(CNT).CURRENCY_CODE = CPYTEMP1(CNT).CURRENCY_CODE;
 
  CopyTo1(CNT).BOOKTYPE_A = CPYTEMP1(CNT).BOOKTYPE_A;
  CopyTo1(CNT).BOOKTYPE_AE = CPYTEMP1(CNT).BOOKTYPE_AE;
  CopyTo1(CNT).BOOKTYPE_O = CPYTEMP1(CNT).BOOKTYPE_O;
  CopyTo1(CNT).BOOKTYPE_OE = CPYTEMP1(CNT).BOOKTYPE_OE;
  CopyTo1(CNT).BOOKTYPE_W = CPYTEMP1(CNT).BOOKTYPE_W;
  CopyTo1(CNT).BOOKTYPE_WE = CPYTEMP1(CNT).BOOKTYPE_WE;
  CopyTo1(CNT).BOOKTYPE_AW = CPYTEMP1(CNT).BOOKTYPE_AW;
  CopyTo1(CNT).BOOKTYPE_AWE = CPYTEMP1(CNT).BOOKTYPE_AWE;
  CopyTo1(CNT).BOOKTYPE_E = CPYTEMP1(CNT).BOOKTYPE_E;
  CopyTo1(CNT).BOOKTYPE_EE = CPYTEMP1(CNT).BOOKTYPE_EE;
  CopyTo1(CNT).BOOKTYPE_C = CPYTEMP1(CNT).BOOKTYPE_C;
  CopyTo1(CNT).BOOKTYPE_CE = CPYTEMP1(CNT).BOOKTYPE_CE;
 
ENDREPEAT CNT = CNT + 1;
 
REPOSITION RPTFLDS2.INST_KEY;
FOR ALL INCLUDE RPTFLDS2.INST_KEY FROM CopyTo1;
COMMIT;
STACK CLEAR CPYTEMP1 CopyTo1;
 
-*SEG 2
INFER RPT_FLDS.INST_KEY RPT_FLDS.COMMON1.INCL1   INTO CPYTEMP2 ;
INFER RPTFLDS2.INST_KEY RPTFLDS2.COMMON1.INCL1   INTO CopyTo2 ;
 
STACK CLEAR CPYTEMP2 CopyTo2;
REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.COMMON1.INCL1 INTO CPYTEMP2;
 
COMPUTE CNT = 1;
REPEAT WHILE CNT LE CPYTEMP2.FOCCOUNT
  CopyTo2(CNT).INST_KEY = CPYTEMP2(CNT).INST_KEY;
  CopyTo2(CNT).INCL1 = CPYTEMP2(CNT).INCL1;
  CopyTo2(CNT).INCL2 = CPYTEMP2(CNT).INCL2;
  CopyTo2(CNT).INCL3 = CPYTEMP2(CNT).INCL3;
  CopyTo2(CNT).INCL4 = CPYTEMP2(CNT).INCL4;
  CopyTo2(CNT).INCL5 = CPYTEMP2(CNT).INCL5;
  CopyTo2(CNT).INCLL4 = CPYTEMP2(CNT).INCLL4;
  CopyTo2(CNT).INCLGEO = CPYTEMP2(CNT).INCLGEO;
ENDREPEAT CNT = CNT + 1;
 
REPOSITION RPTFLDS2.INST_KEY
FOR ALL INCLUDE RPTFLDS2.INST_KEY RPTFLDS2.COMMON1.INCL1
    RPTFLDS2.COMMON1.INCL2 RPTFLDS2.COMMON1.INCL3
    RPTFLDS2.COMMON1.INCL4 RPTFLDS2.COMMON1.INCL5
    RPTFLDS2.COMMON1.INCLL4 RPTFLDS2.COMMON1.INCLGEO FROM CopyTo2;
COMMIT;
STACK CLEAR CPYTEMP2 CopyTo2;
 
-*SEG 3
INFER RPT_FLDS.INST_KEY RPT_FLDS.COMMON2.SEQ_NO    INTO CPYTEMP3 ;
INFER RPTFLDS2.INST_KEY RPTFLDS2.COMMON2.SEQ_NO    INTO CopyTo3 ;
STACK CLEAR CPYTEMP3 CopyTo3;
 
REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.COMMON2.SEQ_NO INTO CPYTEMP3;
 
COMPUTE CNT = 1;
REPEAT WHILE CNT LE CPYTEMP3.FOCCOUNT
COMPUTE CopyTo3(CNT).INST_KEY        = CPYTEMP3(CNT).INST_KEY;
COMPUTE CopyTo3(CNT).SEQ_NO           = CPYTEMP3(CNT).SEQ_NO;
COMPUTE CopyTo3(CNT).ID_LEVEL1        = CPYTEMP3(CNT).ID_LEVEL1;
COMPUTE CopyTo3(CNT).ID_LEVEL2        = CPYTEMP3(CNT).ID_LEVEL2;
COMPUTE CopyTo3(CNT).ID_LEVEL3        = CPYTEMP3(CNT).ID_LEVEL3;
COMPUTE CopyTo3(CNT).ID_LEVEL4        = CPYTEMP3(CNT).ID_LEVEL4;
COMPUTE CopyTo3(CNT).REGION_CODE     = CPYTEMP3(CNT).REGION_CODE;
COMPUTE CopyTo3(CNT).COUNTRY_CODE    = CPYTEMP3(CNT).COUNTRY_CODE;
COMPUTE CopyTo3(CNT).STATE_CODE      = CPYTEMP3(CNT).STATE_CODE;
 
REPOSITION RPTFLDS2.RPT_INST.INST_KEY
FOR 1 INCLUDE RPTFLDS2.INST_KEY RPTFLDS2.COMMON2.SEQ_NO
RPTFLDS2.COMMON2.ID_LEVEL1 RPTFLDS2.COMMON2.ID_LEVEL2
RPTFLDS2.COMMON2.ID_LEVEL3 RPTFLDS2.COMMON2.ID_LEVEL4 FROM CopyTo3(CNT);
COMMIT;
ENDREPEAT CNT = CNT + 1;
STACK CLEAR CPYTEMP3 CopyTo3;
 
PERFORM UPDAIR;
PERFORM UPDCAR;
PERFORM UPDHTL;
PERFORM UPDCLIENT;
PERFORM UPDROLL;
PERFORM UPDTrvlSmry;
PERFORM UPDQtrReview;
PERFORM UPDQtrReview2;
PERFORM UPDDVR;
PERFORM UPDUDID;
 
ENDCASE
 
CASE UPDAIR
INFER RPT_FLDS.INST_KEY RPT_FLDS.AIR.INCL1         INTO CPYTEMP4 ;
INFER RPTFLDS2.INST_KEY RPTFLDS2.AIR.INCL1         INTO CopyTo4 ;
 
STACK CLEAR CPYTEMP4 CopyTo4;
REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.AIR.INCL1 INTO CPYTEMP4;
 
COMPUTE CNT = 1;
REPEAT WHILE CNT LE CPYTEMP4.FOCCOUNT
COMPUTE CopyTo4(CNT).INST_KEY   = CPYTEMP4(CNT).INST_KEY ;
COMPUTE CopyTo4(CNT).ID         = CPYTEMP4(CNT).ID;
COMPUTE CopyTo4(CNT).INCL1       = CPYTEMP4(CNT).INCL1;
COMPUTE CopyTo4(CNT).INCL2       = CPYTEMP4(CNT).INCL2;
COMPUTE CopyTo4(CNT).INCL3       = CPYTEMP4(CNT).INCL3;
COMPUTE CopyTo4(CNT).INCL4       = CPYTEMP4(CNT).INCL4;
COMPUTE CopyTo4(CNT).INCL5       = CPYTEMP4(CNT).INCL5;
COMPUTE CopyTo4(CNT).INCL6       = CPYTEMP4(CNT).INCL6;
COMPUTE CopyTo4(CNT).INCL7       = CPYTEMP4(CNT).INCL7;
COMPUTE CopyTo4(CNT).INCL8       = CPYTEMP4(CNT).INCL8;
COMPUTE CopyTo4(CNT).INCL9       = CPYTEMP4(CNT).INCL9;
COMPUTE CopyTo4(CNT).INCL10      = CPYTEMP4(CNT).INCL10;
 
COMPUTE CopyTo4(CNT).INCL11      = CPYTEMP4(CNT).INCL11;
COMPUTE CopyTo4(CNT).INCL12      = CPYTEMP4(CNT).INCL12;
 
COMPUTE CopyTo4(CNT).INTDOMT     = CPYTEMP4(CNT).INTDOMT;
COMPUTE CopyTo4(CNT).INTDOMS     = CPYTEMP4(CNT).INTDOMS;
COMPUTE CopyTo4(CNT).RANKBYTOP1  = CPYTEMP4(CNT).RANKBYTOP1;
COMPUTE CopyTo4(CNT).RANKMETHOD  = CPYTEMP4(CNT).RANKMETHOD;
COMPUTE CopyTo4(CNT).CLASSCAT_A  = CPYTEMP4(CNT).CLASSCAT_A;
COMPUTE CopyTo4(CNT).CLASSCAT_F  = CPYTEMP4(CNT).CLASSCAT_F;
COMPUTE CopyTo4(CNT).CLASSCAT_B  = CPYTEMP4(CNT).CLASSCAT_B;
COMPUTE CopyTo4(CNT).CLASSCAT_C  = CPYTEMP4(CNT).CLASSCAT_C;
COMPUTE CopyTo4(CNT).CLASSCAT_D  = CPYTEMP4(CNT).CLASSCAT_D;
COMPUTE CopyTo4(CNT).TRANS_TYPE_S    = CPYTEMP4(CNT).TRANS_TYPE_S;
COMPUTE CopyTo4(CNT).TRANS_TYPE_E    = CPYTEMP4(CNT).TRANS_TYPE_E;
COMPUTE CopyTo4(CNT).TRANS_TYPE_R    = CPYTEMP4(CNT).TRANS_TYPE_R;
COMPUTE CopyTo4(CNT).TRANS_TYPE_V    = CPYTEMP4(CNT).TRANS_TYPE_V;
COMPUTE CopyTo4(CNT).ADV_PUR_A       = CPYTEMP4(CNT).ADV_PUR_A;
COMPUTE CopyTo4(CNT).ADV_PUR_0       = CPYTEMP4(CNT).ADV_PUR_0;
COMPUTE CopyTo4(CNT).ADV_PUR_7       = CPYTEMP4(CNT).ADV_PUR_7;
COMPUTE CopyTo4(CNT).ADV_PUR_14      = CPYTEMP4(CNT).ADV_PUR_14;
COMPUTE CopyTo4(CNT).ADV_PUR_21      = CPYTEMP4(CNT).ADV_PUR_21;
COMPUTE CopyTo4(CNT).RANKBYTOP2      = CPYTEMP4(CNT).RANKBYTOP2;
COMPUTE CopyTo4(CNT).CITYPAIRFLD     = CPYTEMP4(CNT).CITYPAIRFLD;
 
REPOSITION RPTFLDS2.RPT_INST.INST_KEY
FOR 1 INCLUDE RPTFLDS2.INST_KEY
RPTFLDS2.AIR.ID RPTFLDS2.AIR.INCL1 RPTFLDS2.AIR.INCL2 RPTFLDS2.AIR.INCL3
RPTFLDS2.AIR.INCL4 RPTFLDS2.AIR.INCL5 RPTFLDS2.AIR.INCL6
RPTFLDS2.AIR.INCL7 RPTFLDS2.AIR.INCL8
RPTFLDS2.AIR.INTDOMT RPTFLDS2.AIR.INTDOMS
RPTFLDS2.AIR.RANKBYTOP1
RPTFLDS2.AIR.RANKMETHOD
RPTFLDS2.AIR.CLASSCAT_A
RPTFLDS2.AIR.CLASSCAT_F
RPTFLDS2.AIR.CLASSCAT_B
RPTFLDS2.AIR.CLASSCAT_C
RPTFLDS2.AIR.CLASSCAT_D
RPTFLDS2.AIR.TRANS_TYPE_S
RPTFLDS2.AIR.TRANS_TYPE_E
RPTFLDS2.AIR.TRANS_TYPE_R
RPTFLDS2.AIR.TRANS_TYPE_V
RPTFLDS2.AIR.ADV_PUR_A
RPTFLDS2.AIR.ADV_PUR_0
RPTFLDS2.AIR.ADV_PUR_7
RPTFLDS2.AIR.ADV_PUR_14
RPTFLDS2.AIR.ADV_PUR_21
RPTFLDS2.AIR.RANKBYTOP2
RPTFLDS2.AIR.CITYPAIRFLD
FROM CopyTo4(CNT)
COMMIT;
ENDREPEAT CNT = CNT + 1;
STACK CLEAR CPYTEMP4 CopyTo4;
 
INFER RPT_FLDS.INST_KEY RPT_FLDS.AIRFLDS.SEQ_NO    INTO CPYTEMP5 ;
INFER RPTFLDS2.INST_KEY RPTFLDS2.AIRFLDS.SEQ_NO    INTO CopyTo5 ;
STACK CLEAR CPYTEMP5 CopyTo5;
REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
FOR ALL NEXT RPT_FLDS.INST_KEY  RPT_FLDS.AIRFLDS.SEQ_NO INTO CPYTEMP5;
 
COMPUTE CNT = 1;
REPEAT WHILE CNT LE CPYTEMP5.FOCCOUNT
COMPUTE CopyTo5(CNT).INST_KEY      = CPYTEMP5(CNT).INST_KEY;
COMPUTE CopyTo5(CNT).SEQ_NO        = CPYTEMP5(CNT).SEQ_NO;
COMPUTE CopyTo5(CNT).PASSENGER     = CPYTEMP5(CNT).PASSENGER;
COMPUTE CopyTo5(CNT).TICKET_NO     = CPYTEMP5(CNT).TICKET_NO;
COMPUTE CopyTo5(CNT).DPT_AIRPORT   = CPYTEMP5(CNT).DPT_AIRPORT;
COMPUTE CopyTo5(CNT).RTE_AIRPORT   = CPYTEMP5(CNT).RTE_AIRPORT;
COMPUTE CopyTo5(CNT).VAL_AIR       = CPYTEMP5(CNT).VAL_AIR;
COMPUTE CopyTo5(CNT).FLOWN_AIR     = CPYTEMP5(CNT).FLOWN_AIR;
COMPUTE CopyTo5(CNT).REFUSE_CODE   = CPYTEMP5(CNT).REFUSE_CODE;
COMPUTE CopyTo5(CNT).CP_AIRPORT    = CPYTEMP5(CNT).CP_AIRPORT;
COMPUTE CopyTo5(CNT).TRIP_CODE     = CPYTEMP5(CNT).TRIP_CODE;
COMPUTE CopyTo5(CNT).NHTL_CODE     = CPYTEMP5(CNT).NHTL_CODE;
 
 
COMPUTE CopyTo5(CNT).ORG_APC     = CPYTEMP5(CNT).ORG_APC;
COMPUTE CopyTo5(CNT).DST_APC     = CPYTEMP5(CNT).DST_APC;
 
REPOSITION RPTFLDS2.RPT_INST.INST_KEY
FOR ALL INCLUDE RPTFLDS2.INST_KEY
RPTFLDS2.AIRFLDS.SEQ_NO
RPTFLDS2.AIRFLDS.PASSENGER
RPTFLDS2.AIRFLDS.TICKET_NO
RPTFLDS2.AIRFLDS.DPT_AIRPORT
RPTFLDS2.AIRFLDS.RTE_AIRPORT
RPTFLDS2.AIRFLDS.VAL_AIR
RPTFLDS2.AIRFLDS.FLOWN_AIR
RPTFLDS2.AIRFLDS.REFUSE_CODE
RPTFLDS2.AIRFLDS.CP_AIRPORT
RPTFLDS2.AIRFLDS.TRIP_CODE
RPTFLDS2.AIRFLDS.NHTL_CODE
RPTFLDS2.AIRFLDS.ORG_APC
RPTFLDS2.AIRFLDS.DST_APC
FROM CopyTo5(CNT)
COMMIT;
ENDREPEAT CNT = CNT + 1;
STACK CLEAR CPYTEMP5 CopyTo5;
 
ENDCASE
 
CASE UPDCAR
INFER RPT_FLDS.INST_KEY RPT_FLDS.CAR.INCL1 INTO CPYTEMP6 ;
INFER RPTFLDS2.INST_KEY RPTFLDS2.CAR.INCL1 INTO CopyTo6 ;
 
STACK CLEAR CPYTEMP6 CopyTo6;
REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.CAR.INCL1 INTO CPYTEMP6;
 
COMPUTE CNT = 1;
REPEAT WHILE CNT LE CPYTEMP6.FOCCOUNT
COMPUTE CopyTo6(CNT).INST_KEY     = CPYTEMP6(CNT).INST_KEY;
COMPUTE CopyTo6(CNT).ID           = CPYTEMP6(CNT).ID;
COMPUTE CopyTo6(CNT).INCL1        = CPYTEMP6(CNT).INCL1;
COMPUTE CopyTo6(CNT).INCL2        = CPYTEMP6(CNT).INCL2;
COMPUTE CopyTo6(CNT).INCL3        = CPYTEMP6(CNT).INCL3;
COMPUTE CopyTo6(CNT).INCL4        = CPYTEMP6(CNT).INCL4;
COMPUTE CopyTo6(CNT).INCL5        = CPYTEMP6(CNT).INCL5;
COMPUTE CopyTo6(CNT).INCL6        = CPYTEMP6(CNT).INCL6;
COMPUTE CopyTo6(CNT).RANKBYTOP    = CPYTEMP6(CNT).RANKBYTOP;
COMPUTE CopyTo6(CNT).RANKMETHOD   = CPYTEMP6(CNT).RANKMETHOD;
COMPUTE CopyTo6(CNT).RATEALL      = CPYTEMP6(CNT).RATEALL;
COMPUTE CopyTo6(CNT).RATE1        = CPYTEMP6(CNT).RATE1;
COMPUTE CopyTo6(CNT).RATE2        = CPYTEMP6(CNT).RATE2;
COMPUTE CopyTo6(CNT).RATE3        = CPYTEMP6(CNT).RATE3;
COMPUTE CopyTo6(CNT).RATE4        = CPYTEMP6(CNT).RATE4;
COMPUTE CopyTo6(CNT).RATE5        = CPYTEMP6(CNT).RATE5;
COMPUTE CopyTo6(CNT).RATE6        = CPYTEMP6(CNT).RATE6;
COMPUTE CopyTo6(CNT).INTDOMC      = CPYTEMP6(CNT).INTDOMC;
 
REPOSITION RPTFLDS2.RPT_INST.INST_KEY
FOR ALL INCLUDE RPTFLDS2.INST_KEY
RPTFLDS2.CAR.ID RPTFLDS2.CAR.INCL1 RPTFLDS2.CAR.INCL2
RPTFLDS2.CAR.INCL3
RPTFLDS2.CAR.INCL4
RPTFLDS2.CAR.INCL5
RPTFLDS2.CAR.INCL6
RPTFLDS2.CAR.RANKBYTOP
RPTFLDS2.CAR.RANKMETHOD
RPTFLDS2.CAR.RATEALL
RPTFLDS2.CAR.RATE1
RPTFLDS2.CAR.RATE2
RPTFLDS2.CAR.RATE3
RPTFLDS2.CAR.RATE4
RPTFLDS2.CAR.RATE5
RPTFLDS2.CAR.RATE6
RPTFLDS2.CAR.INTDOMC FROM CopyTo6(CNT);
COMMIT;
ENDREPEAT CNT = CNT + 1;
STACK CLEAR CPYTEMP6 CopyTo6;
 
 
INFER RPTFLDS2.INST_KEY RPTFLDS2.CARFLDS.SEQ_NO    INTO CopyTo7 ;
STACK CLEAR CPYTEMP7 CopyTo7;
 
REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.CARFLDS.SEQ_NO INTO CPYTEMP7;
 
COMPUTE CNT = 1;
REPEAT WHILE CNT LE CPYTEMP7.FOCCOUNT
COMPUTE CopyTo7(CNT).INST_KEY     = CPYTEMP7(CNT).INST_KEY;
COMPUTE CopyTo7(CNT).SEQ_NO       = CPYTEMP7(CNT).SEQ_NO;
COMPUTE CopyTo7(CNT).PASSENGER    = CPYTEMP7(CNT).PASSENGER;
COMPUTE CopyTo7(CNT).VENDOR_CODE  = CPYTEMP7(CNT).VENDOR_CODE;
COMPUTE CopyTo7(CNT).REFUSE_CODE  = CPYTEMP7(CNT).REFUSE_CODE;
COMPUTE CopyTo7(CNT).PICKUP_CITY  = CPYTEMP7(CNT).PICKUP_CITY;
COMPUTE CopyTo7(CNT).DROPOFF_CITY = CPYTEMP7(CNT).DROPOFF_CITY;
COMPUTE CopyTo7(CNT).CAR_TYPE     = CPYTEMP7(CNT).CAR_TYPE;
 
REPOSITION RPTFLDS2.RPT_INST.INST_KEY
FOR ALL INCLUDE RPTFLDS2.INST_KEY
RPTFLDS2.CARFLDS.SEQ_NO
RPTFLDS2.CARFLDS.PASSENGER
RPTFLDS2.CARFLDS.VENDOR_CODE
RPTFLDS2.CARFLDS.REFUSE_CODE
RPTFLDS2.CARFLDS.PICKUP_CITY
RPTFLDS2.CARFLDS.DROPOFF_CITY
RPTFLDS2.CARFLDS.CAR_TYPE FROM CopyTo7(CNT);
ENDREPEAT CNT = CNT + 1;
COMMIT;
STACK CLEAR CPYTEMP7 CopyTo7;
ENDCASE
 
CASE UPDHTL
INFER RPT_FLDS.INST_KEY RPT_FLDS.HTL.INCL1 INTO CPYTEMP8 ;
INFER RPTFLDS2.INST_KEY RPTFLDS2.HTL.INCL1 INTO CopyTo8 ;
stack clear CPYTEMP8 CopyTo8;
 
REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.HTL.INCL1 INTO CPYTEMP8;
 
COMPUTE CNT=1;
REPEAT WHILE CNT LE CPYTEMP8.FOCCOUNT
COMPUTE CopyTo8(CNT).INST_KEY     = CPYTEMP8(CNT).INST_KEY ;
COMPUTE CopyTo8(CNT).ID           = CPYTEMP8(CNT).ID ;
COMPUTE CopyTo8(CNT).INCL1        = CPYTEMP8(CNT).INCL1 ;
COMPUTE CopyTo8(CNT).INCL2        = CPYTEMP8(CNT).INCL2 ;
COMPUTE CopyTo8(CNT).INCL3        = CPYTEMP8(CNT).INCL3 ;
COMPUTE CopyTo8(CNT).INCL4        = CPYTEMP8(CNT).INCL4 ;
COMPUTE CopyTo8(CNT).RANKBYTOP1   = CPYTEMP8(CNT).RANKBYTOP1 ;
COMPUTE CopyTo8(CNT).RANKMETHOD   = CPYTEMP8(CNT).RANKMETHOD ;
COMPUTE CopyTo8(CNT).RANKBYTOP2   = CPYTEMP8(CNT).RANKBYTOP2 ;
COMPUTE CopyTo8(CNT).INTDOMH      = CPYTEMP8(CNT).INTDOMH ;
 
REPOSITION RPTFLDS2.RPT_INST.INST_KEY
FOR ALL INCLUDE RPTFLDS2.INST_KEY
RPTFLDS2.HTL.ID
RPTFLDS2.HTL.INCL1
RPTFLDS2.HTL.INCL2
RPTFLDS2.HTL.INCL3
RPTFLDS2.HTL.INCL4
RPTFLDS2.HTL.RANKBYTOP1
RPTFLDS2.HTL.RANKMETHOD
RPTFLDS2.HTL.RANKBYTOP2
RPTFLDS2.HTL.INTDOMH FROM CopyTo8(CNT)
COMMIT;
ENDREPEAT CNT = CNT + 1;
stack clear CPYTEMP8 CopyTo8;
 
INFER RPT_FLDS.INST_KEY RPT_FLDS.HTLFLDS.SEQ_NO    INTO CPYTEMP9 ;
INFER RPTFLDS2.INST_KEY RPTFLDS2.HTLFLDS.SEQ_NO    INTO CopyTo9 ;
stack clear CPYTEMP9 CopyTo9;
REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.HTLFLDS.SEQ_NO INTO CPYTEMP9;
 
COMPUTE CNT = 1;
REPEAT WHILE CNT LE CPYTEMP9.FOCCOUNT
COMPUTE CopyTo9(CNT).INST_KEY     = CPYTEMP9(CNT).INST_KEY;
COMPUTE CopyTo9(CNT).SEQ_NO       = CPYTEMP9(CNT).SEQ_NO;
COMPUTE CopyTo9(CNT).PASSENGER    = CPYTEMP9(CNT).PASSENGER;
COMPUTE CopyTo9(CNT).CHAIN_CODE   = CPYTEMP9(CNT).CHAIN_CODE;
COMPUTE CopyTo9(CNT).HTL_CITY     = CPYTEMP9(CNT).HTL_CITY;
COMPUTE CopyTo9(CNT).REFUSE_CODE  = CPYTEMP9(CNT).REFUSE_CODE;
 
REPOSITION RPTFLDS2.RPT_INST.INST_KEY
FOR 1 INCLUDE RPTFLDS2.INST_KEY
RPTFLDS2.HTLFLDS.SEQ_NO
RPTFLDS2.HTLFLDS.PASSENGER
RPTFLDS2.HTLFLDS.CHAIN_CODE
RPTFLDS2.HTLFLDS.HTL_CITY
RPTFLDS2.HTLFLDS.REFUSE_CODE FROM CopyTo9(CNT)
COMMIT;
ENDREPEAT CNT = CNT + 1;
ENDCASE
 
CASE UPDCLIENT
INFER RPT_FLDS.INST_KEY RPT_FLDS.HIEORG1.ID INTO CPYTEMP10 ;
INFER RPTFLDS2.INST_KEY RPTFLDS2.HIEORG1.ID INTO CopyTo10 ;
stack clear CPYTEMP10 CopyTo10;
 
REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.HIEORG1.ID INTO CPYTEMP10;
 
COMPUTE CNT=1;
REPEAT WHILE CNT LE CPYTEMP10.FOCCOUNT
COMPUTE CopyTo10(CNT).INST_KEY     = CPYTEMP10(CNT).INST_KEY ;
COMPUTE CopyTo10(CNT).ID           = CPYTEMP10(CNT).ID ;
COMPUTE CopyTo10(CNT).INCL1        = CPYTEMP10(CNT).INCL1 ;
COMPUTE CopyTo10(CNT).INCL2        = CPYTEMP10(CNT).INCL2 ;
COMPUTE CopyTo10(CNT).INCL3        = CPYTEMP10(CNT).INCL3 ;
COMPUTE CopyTo10(CNT).SEL_LEVEL    = CPYTEMP10(CNT).SEL_LEVEL ;
 
REPOSITION RPTFLDS2.RPT_INST.INST_KEY
FOR ALL INCLUDE RPTFLDS2.INST_KEY
RPTFLDS2.HIEORG1.ID
FROM CopyTo10(CNT)
COMMIT;
ENDREPEAT CNT = CNT + 1;
stack clear CPYTEMP10 CopyTo10;
 
INFER RPT_FLDS.INST_KEY RPT_FLDS.HIEORG2.SEQ_NO    INTO CPYTEMP11 ;
INFER RPTFLDS2.INST_KEY RPTFLDS2.HIEORG2.SEQ_NO    INTO CopyTo11 ;
stack clear CPYTEMP11 CopyTo11;
REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.HIEORG2.SEQ_NO INTO CPYTEMP11;
 
COMPUTE CNT = 1;
REPEAT WHILE CNT LE CPYTEMP11.FOCCOUNT
COMPUTE CopyTo11(CNT).INST_KEY = CPYTEMP11(CNT).INST_KEY;
COMPUTE CopyTo11(CNT).SEQ_NO   = CPYTEMP11(CNT).SEQ_NO;
COMPUTE CopyTo11(CNT).CLIENT   = CPYTEMP11(CNT).CLIENT;
COMPUTE CopyTo11(CNT).CATG     = CPYTEMP11(CNT).CATG;
COMPUTE CopyTo11(CNT).MEMBER   = CPYTEMP11(CNT).MEMBER;
COMPUTE CopyTo11(CNT).LEVEL    = CPYTEMP11(CNT).LEVEL;
 
REPOSITION RPTFLDS2.RPT_INST.INST_KEY
FOR 1 INCLUDE RPTFLDS2.INST_KEY RPTFLDS2.HIEORG2.SEQ_NO
RPTFLDS2.HIEORG2.CLIENT RPTFLDS2.HIEORG2.CATG RPTFLDS2.HIEORG2.MEMBER
RPTFLDS2.HIEORG2.LEVEL FROM CopyTo11(CNT)
COMMIT;
ENDREPEAT CNT = CNT + 1;
ENDCASE
 
-*TOTAL COMPANY REPORTING
CASE UPDROLL
INFER RPT_FLDS.INST_KEY RPT_FLDS.ROLL1.ID INTO CPYTEMP12 ;
INFER RPTFLDS2.INST_KEY RPTFLDS2.ROLL1.ID INTO CopyTo12 ;
stack clear CPYTEMP12 CopyTo12;
 
REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.ROLL1.ID INTO CPYTEMP12;
 
COMPUTE CNT=1;
REPEAT WHILE CNT LE CPYTEMP12.FOCCOUNT
COMPUTE CopyTo12(CNT).INST_KEY = CPYTEMP12(CNT).INST_KEY ;
COMPUTE CopyTo12(CNT).ID       = CPYTEMP12(CNT).ID ;
COMPUTE CopyTo12(CNT).INCL1    = CPYTEMP12(CNT).INCL1 ;
COMPUTE CopyTo12(CNT).INCL2    = CPYTEMP12(CNT).INCL2 ;
COMPUTE CopyTo12(CNT).INCL3    = CPYTEMP12(CNT).INCL3 ;
COMPUTE CopyTo12(CNT).INCL4    = CPYTEMP12(CNT).INCL4 ;
COMPUTE CopyTo12(CNT).INCL5    = CPYTEMP12(CNT).INCL5 ;
COMPUTE CopyTo12(CNT).INCL6    = CPYTEMP12(CNT).INCL6 ;
COMPUTE CopyTo12(CNT).OF_ACCT    = CPYTEMP12(CNT).OF_ACCT ;
REPOSITION RPTFLDS2.RPT_INST.INST_KEY
FOR ALL INCLUDE RPTFLDS2.INST_KEY RPTFLDS2.ROLL1.ID
FROM CopyTo12(CNT)
COMMIT;
ENDREPEAT CNT = CNT + 1;
stack clear CPYTEMP12 CopyTo12;
 
INFER RPT_FLDS.INST_KEY RPT_FLDS.ROLL2.SEQ_NO    INTO CPYTEMP13 ;
INFER RPTFLDS2.INST_KEY RPTFLDS2.ROLL2.SEQ_NO    INTO CopyTo13 ;
stack clear CPYTEMP13 CopyTo13;
REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.ROLL2.SEQ_NO INTO CPYTEMP13;
 
COMPUTE CNT = 1;
REPEAT WHILE CNT LE CPYTEMP13.FOCCOUNT
COMPUTE CopyTo13(CNT).INST_KEY = CPYTEMP13(CNT).INST_KEY;
COMPUTE CopyTo13(CNT).SEQ_NO   = CPYTEMP13(CNT).SEQ_NO;
COMPUTE CopyTo13(CNT).ROLLUP   = CPYTEMP13(CNT).ROLLUP;
COMPUTE CopyTo13(CNT).BRANCH_CODE = CPYTEMP13(CNT).BRANCH_CODE;
COMPUTE CopyTo13(CNT).RESV_BRANCH = CPYTEMP13(CNT).RESV_BRANCH;
COMPUTE CopyTo13(CNT).TKT_BRANCH = CPYTEMP13(CNT).TKT_BRANCH;
COMPUTE CopyTo13(CNT).CATG2     = CPYTEMP13(CNT).CATG2;
COMPUTE CopyTo13(CNT).BR_CL_IDX = CPYTEMP13(CNT).BR_CL_IDX;
COMPUTE CopyTo13(CNT).ROLLUP2   = CPYTEMP13(CNT).ROLLUP2;
 
REPOSITION RPTFLDS2.RPT_INST.INST_KEY
FOR 1 INCLUDE RPTFLDS2.INST_KEY RPTFLDS2.ROLL2.SEQ_NO
FROM CopyTo13(CNT)
COMMIT;
ENDREPEAT CNT = CNT + 1;
ENDCASE
 
CASE UPDTrvlSmry
INFER RPT_FLDS.INST_KEY RPT_FLDS.TRVLSMRY.ID INTO CPYTEMP14 ;
INFER RPTFLDS2.INST_KEY RPTFLDS2.TRVLSMRY.ID INTO CopyTo14 ;
STACK CLEAR CPYTEMP14 CopyTo14;
 
REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.TRVLSMRY.ID INTO CPYTEMP14;
 
COMPUTE CNT=1;
REPEAT WHILE CNT LE CPYTEMP14.FOCCOUNT
COMPUTE CopyTo14(CNT).INST_KEY = CPYTEMP14(CNT).INST_KEY ;
COMPUTE CopyTo14(CNT).ID       = CPYTEMP14(CNT).ID ;
COMPUTE CopyTo14(CNT).ORDER    = CPYTEMP14(CNT).ORDER ;
COMPUTE CopyTo14(CNT).CHECKED  = CPYTEMP14(CNT).CHECKED ;
REPOSITION RPTFLDS2.RPT_INST.INST_KEY
FOR ALL INCLUDE RPTFLDS2.INST_KEY RPTFLDS2.TRVLSMRY.ID
FROM CopyTo14(CNT)
COMMIT;
ENDREPEAT CNT = CNT + 1;
STACK CLEAR CPYTEMP14 CopyTo14;
ENDCASE
 
CASE UPDUDID
INFER RPT_FLDS.INST_KEY RPT_FLDS.UDINFO.UID INTO CPYTEMP15 ;
INFER RPTFLDS2.INST_KEY RPTFLDS2.UDINFO.UID INTO CopyTo15 ;
STACK CLEAR CPYTEMP15 CopyTo15;
 
REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.UDINFO.UID INTO CPYTEMP15;
 
IF CPYTEMP15.FOCCOUNT EQ 0 THEN GOTO ENDCASE;
 
COMPUTE CNT=1;
REPEAT WHILE CNT LE CPYTEMP15.FOCCOUNT
COMPUTE CopyTo15(CNT).INST_KEY = CPYTEMP15(CNT).INST_KEY ;
COMPUTE CopyTo15(CNT).UID       = CPYTEMP15(CNT).UID ;
COMPUTE CopyTo15(CNT).UINCL    = CPYTEMP15(CNT).UINCL;
COMPUTE CopyTo15(CNT).UDID  = CPYTEMP15(CNT).UDID ;
COMPUTE CopyTo15(CNT).UDDATA    = CPYTEMP15(CNT).UDDATA ;
COMPUTE CopyTo15(CNT).FROMVAL  = CPYTEMP15(CNT).FROMVAL ;
COMPUTE CopyTo15(CNT).TOVAL    = CPYTEMP15(CNT).TOVAL ;
 
 
REPOSITION RPTFLDS2.RPT_INST.INST_KEY
FOR ALL INCLUDE RPTFLDS2.INST_KEY RPTFLDS2.UDINFO.UID
FROM CopyTo15(CNT)
COMMIT;
ENDREPEAT CNT = CNT + 1;
STACK CLEAR CPYTEMP15 CopyTo15;
ENDCASE
 
CASE UPDQtrReview
INFER RPT_FLDS.INST_KEY RPT_FLDS.QREVIEW.RPT_ID INTO CPYTEMP16 ;
INFER RPTFLDS2.INST_KEY RPTFLDS2.QREVIEW.RPT_ID INTO CopyTo16 ;
STACK CLEAR CPYTEMP16 CopyTo16;
 
REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.QREVIEW.RPT_ID INTO CPYTEMP16;
 
IF CPYTEMP16.FOCCOUNT EQ 0 THEN GOTO ENDCASE;
 
COMPUTE CNT=1;
REPEAT WHILE CNT LE CPYTEMP16.FOCCOUNT
COMPUTE CopyTo16(CNT).INST_KEY = CPYTEMP16(CNT).INST_KEY ;
COMPUTE CopyTo16(CNT).RPT_ID = CPYTEMP16(CNT).RPT_ID ;
COMPUTE CopyTo16(CNT).RPT_NBR = CPYTEMP16(CNT).RPT_NBR;
COMPUTE CopyTo16(CNT).RPT_ABBR = CPYTEMP16(CNT).RPT_ABBR ;
COMPUTE CopyTo16(CNT).RPT_MISC = CPYTEMP16(CNT).RPT_MISC ;
 
REPOSITION RPTFLDS2.RPT_INST.INST_KEY
FOR ALL INCLUDE RPTFLDS2.INST_KEY RPTFLDS2.QREVIEW.RPT_ID
FROM CopyTo16(CNT)
COMMIT;
ENDREPEAT CNT = CNT + 1;
STACK CLEAR CPYTEMP16 CopyTo16;
ENDCASE
 
CASE UPDQtrReview2
INFER RPT_FLDS.INST_KEY RPT_FLDS.QREVIEW2.SEQ_NO INTO CPYTEMP17 ;
INFER RPTFLDS2.INST_KEY RPTFLDS2.QREVIEW2.SEQ_NO INTO CopyTo17 ;
STACK CLEAR CPYTEMP17 CopyTo17;
 
REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.QREVIEW2.SEQ_NO INTO CPYTEMP17;
 
IF CPYTEMP17.FOCCOUNT EQ 0 THEN GOTO ENDCASE;
 
COMPUTE CNT=1;
REPEAT WHILE CNT LE CPYTEMP17.FOCCOUNT
COMPUTE CopyTo17(CNT).INST_KEY = CPYTEMP17(CNT).INST_KEY ;
COMPUTE CopyTo17(CNT).SEQ_NO = CPYTEMP17(CNT).SEQ_NO ;
COMPUTE CopyTo17(CNT).PEERGRP = CPYTEMP17(CNT).PEERGRP;
COMPUTE CopyTo17(CNT).PEERMBR = CPYTEMP17(CNT).PEERMBR ;
COMPUTE CopyTo17(CNT).CPEERGRP = CPYTEMP17(CNT).CPEERGRP ;
COMPUTE CopyTo17(CNT).CPEERMBR = CPYTEMP17(CNT).CPEERMBR;
COMPUTE CopyTo17(CNT).HPEERGRP = CPYTEMP17(CNT).HPEERGRP ;
COMPUTE CopyTo17(CNT).HPEERMBR = CPYTEMP17(CNT).HPEERMBR ;
COMPUTE CopyTo17(CNT).PERCENT = CPYTEMP17(CNT).PERCENT;
COMPUTE CopyTo17(CNT).AL_MFC = CPYTEMP17(CNT).AL_MFC ;
COMPUTE CopyTo17(CNT).AL_CSA = CPYTEMP17(CNT).AL_CSA ;
COMPUTE CopyTo17(CNT).AL_MSM = CPYTEMP17(CNT).AL_MSM ;
COMPUTE CopyTo17(CNT).AL_CA = CPYTEMP17(CNT).AL_CA ;
COMPUTE CopyTo17(CNT).LSO_AMT = CPYTEMP17(CNT).LSO_AMT ;
COMPUTE CopyTo17(CNT).OA_PCT = CPYTEMP17(CNT).OA_PCT ;
COMPUTE CopyTo17(CNT).CP_LOGO = CPYTEMP17(CNT).CP_LOGO ;
COMPUTE CopyTo17(CNT).AL_ADA = CPYTEMP17(CNT).AL_ADA ;
-*COMPUTE CopyTo17(CNT).LPEERGRP = CPYTEMP17(CNT).LPEERGRP ;
-*COMPUTE CopyTo17(CNT).LPEERMBR = CPYTEMP17(CNT).LPEERMBR;
 
REPOSITION RPTFLDS2.RPT_INST.INST_KEY
FOR ALL INCLUDE RPTFLDS2.INST_KEY RPTFLDS2.QREVIEW2.SEQ_NO
FROM CopyTo17(CNT)
COMMIT;
ENDREPEAT CNT = CNT + 1;
STACK CLEAR CPYTEMP17 CopyTo17;
ENDCASE
 
CASE UPDDVR
INFER RPT_FLDS.INST_KEY RPT_FLDS.DVR.DVRID INTO CPYTEMP18 ;
INFER RPTFLDS2.INST_KEY RPTFLDS2.DVR.DVRID INTO CopyTo18 ;
STACK CLEAR CPYTEMP18 CopyTo18;
 
REPOSITION RPT_FLDS.RPT_INST.INST_KEY;
FOR ALL NEXT RPT_FLDS.INST_KEY RPT_FLDS.DVR.DVRID INTO CPYTEMP18;
 
IF CPYTEMP18.FOCCOUNT EQ 0 THEN GOTO ENDCASE;
 
COMPUTE CNT=1;
REPEAT WHILE CNT LE CPYTEMP18.FOCCOUNT
COMPUTE CopyTo18(CNT).INST_KEY = CPYTEMP18(CNT).INST_KEY ;
COMPUTE CopyTo18(CNT).DVRID = CPYTEMP18(CNT).DVRID ;
COMPUTE CopyTo18(CNT).TRAN1 = CPYTEMP18(CNT).TRAN1;
COMPUTE CopyTo18(CNT).TRAN2 = CPYTEMP18(CNT).TRAN2 ;
COMPUTE CopyTo18(CNT).TRAN3 = CPYTEMP18(CNT).TRAN3 ;
COMPUTE CopyTo18(CNT).TRAN4 = CPYTEMP18(CNT).TRAN4;
COMPUTE CopyTo18(CNT).TRAN5 = CPYTEMP18(CNT).TRAN5 ;
COMPUTE CopyTo18(CNT).LSONLY = CPYTEMP18(CNT).LSONLY ;
COMPUTE CopyTo18(CNT).UNUSEDT1 = CPYTEMP18(CNT).UNUSEDT1 ;
COMPUTE CopyTo18(CNT).UNUSEDT2 = CPYTEMP18(CNT).UNUSEDT2 ;
COMPUTE CopyTo18(CNT).UNUSEDT3 = CPYTEMP18(CNT).UNUSEDT3 ;
COMPUTE CopyTo18(CNT).UNUSEDT4 = CPYTEMP18(CNT).UNUSEDT4 ;
 
REPOSITION RPTFLDS2.RPT_INST.INST_KEY
FOR ALL INCLUDE RPTFLDS2.INST_KEY RPTFLDS2.DVR.DVRID
FROM CopyTo18(CNT)
COMMIT;
ENDREPEAT CNT = CNT + 1;
STACK CLEAR CPYTEMP18 CopyTo18;
ENDCASE
 
END
-RUN
-EXIT
 
-AA
 
-*COPY rebuilt database RPTFLDS2 to RPT_FLDS
COPY D:\TNT\TTracker\SUDATA\RPTFLDS2.FOC D:\TNT\TTracker\SUDATA\RPT_FLDS.FOC
COPY D:\TNT\TTracker\SUDATA\RPTFLDS2.MAS D:\TNT\TTracker\SUDATA\RPT_FLDS.MAS
-RUN
-DOS DEL D:\TNT\TTracker\SUDATA\RPTFLDS2.FOC
-RUN
